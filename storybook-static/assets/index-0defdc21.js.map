{"version":3,"file":"index-0defdc21.js","sources":["../../node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/hast-to-react.js","../../node_modules/.pnpm/micromark-util-sanitize-uri@1.2.0/node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/.pnpm/micromark-util-subtokenize@1.1.0/node_modules/micromark-util-subtokenize/index.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/.pnpm/micromark-factory-destination@1.1.0/node_modules/micromark-factory-destination/index.js","../../node_modules/.pnpm/micromark-factory-label@1.1.0/node_modules/micromark-factory-label/index.js","../../node_modules/.pnpm/micromark-factory-title@1.1.0/node_modules/micromark-factory-title/index.js","../../node_modules/.pnpm/micromark-factory-whitespace@1.1.0/node_modules/micromark-factory-whitespace/index.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/.pnpm/micromark-util-html-tag-name@1.2.0/node_modules/micromark-util-html-tag-name/index.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/.pnpm/react-markdown@8.0.7_4ec0726b4bb7802d5bd0ac1fc5260d86/node_modules/react-markdown/lib/uri-transformer.js","../../node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js","../../node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js","../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minpath.browser.js","../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minproc.browser.js","../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js","../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.browser.js","../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js","../../node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js","../../node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js","../../node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js","../../node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js","../../node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js","../../node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/content.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/document.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/flow.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/text.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/create-tokenizer.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/constructs.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/parse.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/preprocess.js","../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/postprocess.js","../../node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/lib/index.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/lib/index.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/lib/index.js","../../node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/lib/index.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/lib/index.js","../../node_modules/.pnpm/react-markdown@8.0.7_4ec0726b4bb7802d5bd0ac1fc5260d86/node_modules/react-markdown/lib/rehype-filter.js","../../node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js","../../node_modules/.pnpm/inline-style-parser@0.1.1/node_modules/inline-style-parser/index.js","../../node_modules/.pnpm/style-to-object@0.4.2/node_modules/style-to-object/index.js","../../node_modules/.pnpm/react-markdown@8.0.7_4ec0726b4bb7802d5bd0ac1fc5260d86/node_modules/react-markdown/lib/ast-to-react.js","../../node_modules/.pnpm/react-markdown@8.0.7_4ec0726b4bb7802d5bd0ac1fc5260d86/node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hastToReact","normalizeUri","value","result","index","start","skip","code","replace","asciiAlphanumeric","next","attention","tokenizeAttention","resolveAllAttention","events","context","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","end","movePoint","push","resolveAll","splice","effects","ok","attentionMarkers","previous","before","classifyCharacter","marker","inside","token","after","close","point","autolink","tokenizeAutolink","nok","size","asciiAlpha","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","self","state","markdownSpace","contStart","factorySpace","contBefore","characterEscape","tokenizeCharacterEscape","asciiPunctuation","characterReference","tokenizeCharacterReference","max","test","numeric","asciiHexDigit","asciiDigit","decodeNamedCharacterReference","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","markdownLineEnding","atNonLazyBreak","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","lineStart","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","between","data","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","stream","current","adjust","breaks","slice","content","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","chunkStart","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","type","literalType","literalMarkerType","rawType","stringType","limit","balance","enclosedBefore","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","seen","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","name","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","blankLine","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","list","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","protocols","uriTransformer","uri","url","first","colon","protocol","isBuffer","obj","stringifyPosition","position","pos","VFileMessage","reason","place","origin","parts","path","basename","dirname","extname","join","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","proc","cwd","isUrl","fileUrlOrPath","urlToPath","error","getPathFromURLPosix","pathname","third","order","VFile","options","prop","assertNonEmpty","assertPart","stem","encoding","message","part","bufferLike","bail","hasOwn","toStr","defineProperty","gOPD","isArray","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","key","setProperty","target","getProperty","extend","src","copy","copyIsArray","clone","i","length","deep","prototype","trough","fns","pipeline","run","values","middlewareIndex","callback","output","fn","wrap","middelware","middleware","called","wrapped","fnExpectsCallback","done","exception","then","unified","base","own","transformers","attachers","namespace","frozen","freezeIndex","processor","freeze","parse","stringify","runSync","process","processSync","destination","assertUnfrozen","attacher","transformer","settings","addPlugin","addList","addPreset","add","plugin","plugins","thing","entry","isPlainObj","doc","file","vfile","Parser","assertParser","newable","node","Compiler","assertCompiler","assertNode","executor","resolve","reject","tree","complete","assertDone","looksLikeAVFileValue","keys","asyncName","looksLikeAVFile","emptyOptions","toString","includeImageAlt","includeHtml","one","all","initializeContent","afterContentStartConstruct","paragraphInitial","document","initializeDocument","containerConstruct","tokenizeContainer","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","flow","initializeFlow","initial","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","initializeText","resolveAllLineSuffixes","constructs","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","createTokenizer","parser","initialize","from","columnStart","resolveAllConstructs","consume","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","sliceStream","sliceSerialize","now","defineSkip","write","main","addResult","expandTabs","serializeChunks","sliceChunks","line","column","_index","_bufferIndex","accountForPotentialSkip","chunkIndex","go","fields","construct","_","onreturn","hook","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","atTab","contentInitial","flowInitial","insideSpan","resolveText","disable","combineExtensions","defaultConstructs","create","creator","search","preprocess","atCarriageReturn","preprocessor","match","endPosition","postprocess","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","html","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","setData","getData","listStack","prepareList","handler","defaultOnError","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","referenceType","decodeString","fragment","children","decodeNumericCharacterReference","d","combined","extensions","extension","right","left","remarkParse","blockquote","lang","properties","strikethrough","footnoteReference","id","safeId","counter","reuseCounter","sup","footnote","footnoteById","no","revert","subtype","suffix","contents","imageReference","inlineCode","linkReference","parent","results","loose","listLoose","listItemLoose","child","spread","root","pointStart","pointEnd","table","rows","firstRow","tableContent","body","tableRow","siblings","align","cellIndex","cells","cell","alignValue","tableCell","tab","space","trimLines","source","last","lines","trimLine","handlers","ignore","generated","definitions","cache","visit","clean","createState","dangerous","patch","applyData","oneBound","allBound","augment","ctx","props","to","hName","hChildren","hProperties","defaultUnknownHandler","nodes","footer","listItems","referenceIndex","backReferences","backReference","tailTail","toHast","foot","remarkRehype","bridge","mutate","remarkRehype$1","rehypeFilter","parent_","remove","b","c","e","f","g","h","k","l","m","n","p","q","t","u","v","a","r","reactIs_production_min","reactIsModule","require$$0","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","lineno","updatePosition","str","Position","whitespace","msg","err","re","comments","rules","val","ret","trim","declarations","decls","decl","StyleToObject","iterator","hasIterator","property","len","styleToObjectModule","tableElements","childrenToReact","childIndex","toReact","transform","parentSchema","schema","svg","addProperty","component","basic","React","ReactIs","input","getInputElement","getElementsBeforeCount","flattenPosition","count","find","commas","spaces","parseStyle","styleReplacer","$1","changelog","deprecated","ReactMarkdown","deprecation","hastNode","PropTypes"],"mappings":"wlBASO,MAAMA,GAAc,CACzB,QAAS,UACT,SAAU,WACV,OAAQ,SACR,gBAAiB,kBACjB,iBAAkB,mBAClB,cAAe,gBACf,eAAgB,iBAChB,iBAAkB,mBAClB,OAAQ,SACR,aAAc,eACd,aAAc,eACd,UAAW,YACX,UAAW,YACX,UAAW,YACX,WAAY,aACZ,UAAW,YACX,WAAY,YACd,ECgCO,SAASC,GAAaC,EAAO,CAElC,MAAMC,EAAS,CAAE,EACjB,IAAIC,EAAQ,GACRC,EAAQ,EACRC,EAAO,EACX,KAAO,EAAEF,EAAQF,EAAM,QAAQ,CAC7B,MAAMK,EAAOL,EAAM,WAAWE,CAAK,EAEnC,IAAII,EAAU,GAGd,GACED,IAAS,IACTE,EAAkBP,EAAM,WAAWE,EAAQ,CAAC,CAAC,GAC7CK,EAAkBP,EAAM,WAAWE,EAAQ,CAAC,CAAC,EAE7CE,EAAO,UAGAC,EAAO,IACT,oBAAoB,KAAK,OAAO,aAAaA,CAAI,CAAC,IACrDC,EAAU,OAAO,aAAaD,CAAI,WAI7BA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAMG,EAAOR,EAAM,WAAWE,EAAQ,CAAC,EAGnCG,EAAO,OAASG,EAAO,OAASA,EAAO,OACzCF,EAAU,OAAO,aAAaD,EAAMG,CAAI,EACxCJ,EAAO,GAIPE,EAAU,GAEb,MAGCA,EAAU,OAAO,aAAaD,CAAI,EAEhCC,IACFL,EAAO,KAAKD,EAAM,MAAMG,EAAOD,CAAK,EAAG,mBAAmBI,CAAO,CAAC,EAClEH,EAAQD,EAAQE,EAAO,EACvBE,EAAU,IAERF,IACFF,GAASE,EACTA,EAAO,EAEV,CACD,OAAOH,EAAO,KAAK,EAAE,EAAID,EAAM,MAAMG,CAAK,CAC5C,CCjGO,MAAMM,GAAY,CACvB,KAAM,YACN,SAAUC,GACV,WAAYC,EACd,EAOA,SAASA,GAAoBC,EAAQC,EAAS,CAC5C,IAAIX,EAAQ,GAERY,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAMJ,KAAO,EAAEnB,EAAQU,EAAO,QAEtB,GACEA,EAAOV,CAAK,EAAE,CAAC,IAAM,SACrBU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,qBAC1BU,EAAOV,CAAK,EAAE,CAAC,EAAE,QAKjB,IAHAY,EAAOZ,EAGAY,KAEL,GACEF,EAAOE,CAAI,EAAE,CAAC,IAAM,QACpBF,EAAOE,CAAI,EAAE,CAAC,EAAE,OAAS,qBACzBF,EAAOE,CAAI,EAAE,CAAC,EAAE,OAEhBD,EAAQ,eAAeD,EAAOE,CAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,IAClDD,EAAQ,eAAeD,EAAOV,CAAK,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,EACvD,CAKA,IACGU,EAAOE,CAAI,EAAE,CAAC,EAAE,QAAUF,EAAOV,CAAK,EAAE,CAAC,EAAE,SAC3CU,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,OAASU,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAM,QAAU,GAChE,GACGU,EAAOE,CAAI,EAAE,CAAC,EAAE,IAAI,OACnBF,EAAOE,CAAI,EAAE,CAAC,EAAE,MAAM,OACtBF,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,OACrBU,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAM,QACzB,GAGF,SAIFiB,EACEP,EAAOE,CAAI,EAAE,CAAC,EAAE,IAAI,OAASF,EAAOE,CAAI,EAAE,CAAC,EAAE,MAAM,OAAS,GAC5DF,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,OAASU,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS,EAC1D,EACA,EACN,MAAMC,EAAQ,OAAO,OAAO,CAAE,EAAES,EAAOE,CAAI,EAAE,CAAC,EAAE,GAAG,EAC7CQ,EAAM,OAAO,OAAO,CAAE,EAAEV,EAAOV,CAAK,EAAE,CAAC,EAAE,KAAK,EACpDqB,GAAUpB,EAAO,CAACgB,CAAG,EACrBI,GAAUD,EAAKH,CAAG,EAClBF,EAAkB,CAChB,KAAME,EAAM,EAAI,iBAAmB,mBACnC,MAAAhB,EACA,IAAK,OAAO,OAAO,CAAE,EAAES,EAAOE,CAAI,EAAE,CAAC,EAAE,GAAG,CAC3C,EACDI,EAAkB,CAChB,KAAMC,EAAM,EAAI,iBAAmB,mBACnC,MAAO,OAAO,OAAO,CAAE,EAAEP,EAAOV,CAAK,EAAE,CAAC,EAAE,KAAK,EAC/C,IAAAoB,CACD,EACDN,EAAO,CACL,KAAMG,EAAM,EAAI,aAAe,eAC/B,MAAO,OAAO,OAAO,CAAE,EAAEP,EAAOE,CAAI,EAAE,CAAC,EAAE,GAAG,EAC5C,IAAK,OAAO,OAAO,CAAE,EAAEF,EAAOV,CAAK,EAAE,CAAC,EAAE,KAAK,CAC9C,EACDa,EAAQ,CACN,KAAMI,EAAM,EAAI,SAAW,WAC3B,MAAO,OAAO,OAAO,CAAA,EAAIF,EAAgB,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIC,EAAgB,GAAG,CAC3C,EACDN,EAAOE,CAAI,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAA,EAAIG,EAAgB,KAAK,EAC7DL,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAQ,OAAO,OAAO,CAAA,EAAIgB,EAAgB,GAAG,EAC9DE,EAAa,CAAE,EAGXR,EAAOE,CAAI,EAAE,CAAC,EAAE,IAAI,OAASF,EAAOE,CAAI,EAAE,CAAC,EAAE,MAAM,SACrDM,EAAaI,EAAKJ,EAAY,CAC5B,CAAC,QAASR,EAAOE,CAAI,EAAE,CAAC,EAAGD,CAAO,EAClC,CAAC,OAAQD,EAAOE,CAAI,EAAE,CAAC,EAAGD,CAAO,CAC/C,CAAa,GAIHO,EAAaI,EAAKJ,EAAY,CAC5B,CAAC,QAASL,EAAOF,CAAO,EACxB,CAAC,QAASI,EAAiBJ,CAAO,EAClC,CAAC,OAAQI,EAAiBJ,CAAO,EACjC,CAAC,QAASG,EAAMH,CAAO,CACnC,CAAW,EAKDO,EAAaI,EACXJ,EACAK,GACEZ,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAME,EAAO,EAAGZ,CAAK,EAC5BW,CACD,CACF,EAGDO,EAAaI,EAAKJ,EAAY,CAC5B,CAAC,OAAQJ,EAAMH,CAAO,EACtB,CAAC,QAASK,EAAiBL,CAAO,EAClC,CAAC,OAAQK,EAAiBL,CAAO,EACjC,CAAC,OAAQE,EAAOF,CAAO,CACnC,CAAW,EAGGD,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,OAASU,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAM,QACvDmB,EAAS,EACTD,EAAaI,EAAKJ,EAAY,CAC5B,CAAC,QAASR,EAAOV,CAAK,EAAE,CAAC,EAAGW,CAAO,EACnC,CAAC,OAAQD,EAAOV,CAAK,EAAE,CAAC,EAAGW,CAAO,CAChD,CAAa,GAEDQ,EAAS,EAEXK,GAAOd,EAAQE,EAAO,EAAGZ,EAAQY,EAAO,EAAGM,CAAU,EACrDlB,EAAQY,EAAOM,EAAW,OAASC,EAAS,EAC5C,KACD,EAOP,IADAnB,EAAQ,GACD,EAAEA,EAAQU,EAAO,QAClBA,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,sBAC5BU,EAAOV,CAAK,EAAE,CAAC,EAAE,KAAO,QAG5B,OAAOU,CACT,CAMA,SAASF,GAAkBiB,EAASC,EAAI,CACtC,MAAMC,EAAmB,KAAK,OAAO,WAAW,iBAAiB,KAC3DC,EAAW,KAAK,SAChBC,EAASC,GAAkBF,CAAQ,EAGzC,IAAIG,EACJ,OAAO9B,EAYP,SAASA,EAAME,EAAM,CACnB,OAAA4B,EAAS5B,EACTsB,EAAQ,MAAM,mBAAmB,EAC1BO,EAAO7B,CAAI,CACnB,CAYD,SAAS6B,EAAO7B,EAAM,CACpB,GAAIA,IAAS4B,EACX,OAAAN,EAAQ,QAAQtB,CAAI,EACb6B,EAET,MAAMC,EAAQR,EAAQ,KAAK,mBAAmB,EAGxCS,EAAQJ,GAAkB3B,CAAI,EAI9BS,EACJ,CAACsB,GAAUA,IAAU,GAAKL,GAAWF,EAAiB,SAASxB,CAAI,EAC/DgC,EACJ,CAACN,GAAWA,IAAW,GAAKK,GAAUP,EAAiB,SAASC,CAAQ,EAC1E,OAAAK,EAAM,MAAQ,GAAQF,IAAW,GAAKnB,EAAOA,IAASiB,GAAU,CAACM,IACjEF,EAAM,OAAS,GAAQF,IAAW,GAAKI,EAAQA,IAAUD,GAAS,CAACtB,IAC5Dc,EAAGvB,CAAI,CACf,CACH,CAYA,SAASkB,GAAUe,EAAOjB,EAAQ,CAChCiB,EAAM,QAAUjB,EAChBiB,EAAM,QAAUjB,EAChBiB,EAAM,cAAgBjB,CACxB,CCvPO,MAAMkB,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAMA,SAASA,GAAiBb,EAASC,EAAIa,EAAK,CAC1C,IAAIC,EAAO,EACX,OAAOvC,EAcP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,MAAM,kBAAkB,EACzBb,CACR,CAcD,SAASA,EAAKT,EAAM,CAClB,OAAIsC,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACbuC,GAEFC,EAAWxC,CAAI,CACvB,CAcD,SAASuC,EAAmBvC,EAAM,CAEhC,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAME,EAAkBF,CAAI,GAErEqC,EAAO,EACAI,EAAyBzC,CAAI,GAE/BwC,EAAWxC,CAAI,CACvB,CAcD,SAASyC,EAAyBzC,EAAM,CACtC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBqC,EAAO,EACAK,IAKN1C,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAME,EAAkBF,CAAI,IACpEqC,IAAS,IAETf,EAAQ,QAAQtB,CAAI,EACbyC,IAETJ,EAAO,EACAG,EAAWxC,CAAI,EACvB,CAYD,SAAS0C,EAAU1C,EAAM,CACvB,OAAIA,IAAS,IACXsB,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAILvB,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAM2C,GAAa3C,CAAI,EAC3DoC,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACb0C,EACR,CAYD,SAASF,EAAWxC,EAAM,CACxB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb4C,GAELC,GAAW7C,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACbwC,GAEFJ,EAAIpC,CAAI,CAChB,CAYD,SAAS4C,EAAiB5C,EAAM,CAC9B,OAAOE,EAAkBF,CAAI,EAAI8C,EAAW9C,CAAI,EAAIoC,EAAIpC,CAAI,CAC7D,CAYD,SAAS8C,EAAW9C,EAAM,CACxB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBqC,EAAO,EACAO,GAEL5C,IAAS,IAEXsB,EAAQ,KAAK,kBAAkB,EAAE,KAAO,gBACxCA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEFwB,EAAW/C,CAAI,CACvB,CAcD,SAAS+C,EAAW/C,EAAM,CAExB,IAAKA,IAAS,IAAME,EAAkBF,CAAI,IAAMqC,IAAS,GAAI,CAC3D,MAAMlC,EAAOH,IAAS,GAAK+C,EAAaD,EACxC,OAAAxB,EAAQ,QAAQtB,CAAI,EACbG,CACR,CACD,OAAOiC,EAAIpC,CAAI,CAChB,CACH,CC/NO,MAAMgD,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,aAAc,CACZ,SAAUC,EACX,EACD,KAAAC,EACF,EAMA,SAASF,GAAwB3B,EAASC,EAAIa,EAAK,CACjD,MAAMgB,EAAO,KACb,OAAOtD,EAYP,SAASA,EAAME,EAAM,CACnB,GAAIA,IAAS,GAAI,CACf,MAAMqD,EAAQD,EAAK,eACnB,OAAKC,EAAM,OACT/B,EAAQ,MAAM,aAAc,CAC1B,WAAY,EACtB,CAAS,EACD+B,EAAM,KAAO,IAEf/B,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,kBAAkB,EACxBS,CACR,CACD,OAAOK,EAAIpC,CAAI,CAChB,CAYD,SAAS+B,EAAM/B,EAAM,CACnB,OAAIsD,EAActD,CAAI,GACpBsB,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,4BAA4B,EACzCA,EAAQ,KAAK,kBAAkB,EACxBC,IAETD,EAAQ,KAAK,kBAAkB,EACxBC,EAAGvB,CAAI,EACf,CACH,CAcA,SAASkD,GAA+B5B,EAASC,EAAIa,EAAK,CACxD,MAAMgB,EAAO,KACb,OAAOG,EAeP,SAASA,EAAUvD,EAAM,CACvB,OAAIsD,EAActD,CAAI,EAGbwD,EACLlC,EACAmC,EACA,aACAL,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAACpD,CAAI,EAEDyD,EAAWzD,CAAI,CACvB,CAeD,SAASyD,EAAWzD,EAAM,CACxB,OAAOsB,EAAQ,QAAQ0B,GAAYzB,EAAIa,CAAG,EAAEpC,CAAI,CACjD,CACH,CAGA,SAASmD,GAAK7B,EAAS,CACrBA,EAAQ,KAAK,YAAY,CAC3B,CCxIO,MAAMoC,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAMA,SAASA,GAAwBrC,EAASC,EAAIa,EAAK,CACjD,OAAOtC,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,cAAc,EACpBO,CACR,CAYD,SAASA,EAAO7B,EAAM,CAEpB,OAAI4D,GAAiB5D,CAAI,GACvBsB,EAAQ,MAAM,sBAAsB,EACpCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,sBAAsB,EACnCA,EAAQ,KAAK,iBAAiB,EACvBC,GAEFa,EAAIpC,CAAI,CAChB,CACH,CC7CO,MAAM6D,GAAqB,CAChC,KAAM,qBACN,SAAUC,EACZ,EAMA,SAASA,GAA2BxC,EAASC,EAAIa,EAAK,CACpD,MAAMgB,EAAO,KACb,IAAIf,EAAO,EAEP0B,EAEAC,EACJ,OAAOlE,EAgBP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,oBAAoB,EAClCA,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,0BAA0B,EAChCb,CACR,CAiBD,SAASA,EAAKT,EAAM,CAClB,OAAIA,IAAS,IACXsB,EAAQ,MAAM,iCAAiC,EAC/CA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,iCAAiC,EACvC2C,IAET3C,EAAQ,MAAM,yBAAyB,EACvCyC,EAAM,GACNC,EAAO9D,EACAP,EAAMK,CAAI,EAClB,CAcD,SAASiE,EAAQjE,EAAM,CACrB,OAAIA,IAAS,IAAMA,IAAS,KAC1BsB,EAAQ,MAAM,qCAAqC,EACnDA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,qCAAqC,EAClDA,EAAQ,MAAM,yBAAyB,EACvCyC,EAAM,EACNC,EAAOE,GACAvE,IAET2B,EAAQ,MAAM,yBAAyB,EACvCyC,EAAM,EACNC,EAAOG,GACAxE,EAAMK,CAAI,EAClB,CAmBD,SAASL,EAAMK,EAAM,CACnB,GAAIA,IAAS,IAAMqC,EAAM,CACvB,MAAMP,EAAQR,EAAQ,KAAK,yBAAyB,EACpD,OACE0C,IAAS9D,GACT,CAACkE,GAA8BhB,EAAK,eAAetB,CAAK,CAAC,EAElDM,EAAIpC,CAAI,GAKjBsB,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,0BAA0B,EACvCA,EAAQ,KAAK,oBAAoB,EAC1BC,EACR,CACD,OAAIyC,EAAKhE,CAAI,GAAKqC,IAAS0B,GACzBzC,EAAQ,QAAQtB,CAAI,EACbL,GAEFyC,EAAIpC,CAAI,CAChB,CACH,CC7IA,MAAMqE,GAAsB,CAC1B,SAAUC,GACV,QAAS,EACX,EAGaC,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,SAAU,EACZ,EAMA,SAASA,GAAmBlD,EAASC,EAAIa,EAAK,CAC5C,MAAMgB,EAAO,KAEPqB,EAAa,CACjB,SAAUC,EACV,QAAS,EACV,EACD,IAAIC,EAAgB,EAChBC,EAAW,EAEXhD,EACJ,OAAO9B,EAcP,SAASA,EAAME,EAAM,CAEnB,OAAO6E,EAAmB7E,CAAI,CAC/B,CAcD,SAAS6E,EAAmB7E,EAAM,CAChC,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAAuB,EACEG,GAAQA,EAAK,CAAC,EAAE,OAAS,aACrBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EACNlD,EAAS5B,EACTsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,yBAAyB,EAChCyD,EAAa/E,CAAI,CACzB,CAcD,SAAS+E,EAAa/E,EAAM,CAC1B,OAAIA,IAAS4B,GACXgD,IACAtD,EAAQ,QAAQtB,CAAI,EACb+E,GAELH,EAAW,EACNxC,EAAIpC,CAAI,GAEjBsB,EAAQ,KAAK,yBAAyB,EAC/BgC,EAActD,CAAI,EACrBwD,EAAalC,EAAS0D,EAAY,YAAY,EAAEhF,CAAI,EACpDgF,EAAWhF,CAAI,EACpB,CAcD,SAASgF,EAAWhF,EAAM,CACxB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,iBAAiB,EACvB8B,EAAK,UACR7B,EAAGvB,CAAI,EACPsB,EAAQ,MAAM+C,GAAqBa,EAAgBnD,CAAK,EAAE/B,CAAI,IAEpEsB,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACM6D,EAAKnF,CAAI,EACjB,CAcD,SAASmF,EAAKnF,EAAM,CAClB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3B0D,EAAWhF,CAAI,GAEpBsD,EAActD,CAAI,GACpBsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3BkC,EAAalC,EAAS8D,EAAY,YAAY,EAAEpF,CAAI,GAEzDA,IAAS,IAAMA,IAAS4B,EACnBQ,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACbmF,EACR,CAcD,SAASC,EAAWpF,EAAM,CACxB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,EACnCgF,EAAWhF,CAAI,GAExBsB,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACM+D,EAAKrF,CAAI,EACjB,CAcD,SAASqF,EAAKrF,EAAM,CAClB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3B0D,EAAWhF,CAAI,GAEpBA,IAAS,IAAMA,IAAS4B,EACnBQ,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACbqF,EACR,CAeD,SAASH,EAAelF,EAAM,CAC5B,OAAOsB,EAAQ,QAAQmD,EAAY1C,EAAOuD,CAAa,EAAEtF,CAAI,CAC9D,CAcD,SAASsF,EAActF,EAAM,CAC3B,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBiE,CACR,CAcD,SAASA,EAAavF,EAAM,CAC1B,OAAO2E,EAAgB,GAAKrB,EAActD,CAAI,EAC1CwD,EACElC,EACAkE,EACA,aACAb,EAAgB,CACjB,EAAC3E,CAAI,EACNwF,EAAmBxF,CAAI,CAC5B,CAcD,SAASwF,EAAmBxF,EAAM,CAChC,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,EACnCsB,EAAQ,MAAM+C,GAAqBa,EAAgBnD,CAAK,EAAE/B,CAAI,GAEvEsB,EAAQ,MAAM,eAAe,EACtBmE,EAAazF,CAAI,EACzB,CAcD,SAASyF,EAAazF,EAAM,CAC1B,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,eAAe,EACrBkE,EAAmBxF,CAAI,IAEhCsB,EAAQ,QAAQtB,CAAI,EACbyF,EACR,CAcD,SAAS1D,EAAM/B,EAAM,CACnB,OAAAsB,EAAQ,KAAK,YAAY,EAClBC,EAAGvB,CAAI,CACf,CAMD,SAAS0E,EAAmBpD,EAASC,EAAIa,EAAK,CAC5C,IAAIC,EAAO,EACX,OAAOqD,EAOP,SAASA,EAAY1F,EAAM,CACzB,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBxB,CACR,CAcD,SAASA,EAAME,EAAM,CAInB,OAAAsB,EAAQ,MAAM,iBAAiB,EACxBgC,EAActD,CAAI,EACrBwD,EACElC,EACAqE,EACA,aACAvC,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAACpD,CAAI,EACN2F,EAAoB3F,CAAI,CAC7B,CAcD,SAAS2F,EAAoB3F,EAAM,CACjC,OAAIA,IAAS4B,GACXN,EAAQ,MAAM,yBAAyB,EAChCsE,EAAc5F,CAAI,GAEpBoC,EAAIpC,CAAI,CAChB,CAcD,SAAS4F,EAAc5F,EAAM,CAC3B,OAAIA,IAAS4B,GACXS,IACAf,EAAQ,QAAQtB,CAAI,EACb4F,GAELvD,GAAQuC,GACVtD,EAAQ,KAAK,yBAAyB,EAC/BgC,EAActD,CAAI,EACrBwD,EAAalC,EAASuE,EAAoB,YAAY,EAAE7F,CAAI,EAC5D6F,EAAmB7F,CAAI,GAEtBoC,EAAIpC,CAAI,CAChB,CAcD,SAAS6F,EAAmB7F,EAAM,CAChC,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,iBAAiB,EACvBC,EAAGvB,CAAI,GAEToC,EAAIpC,CAAI,CAChB,CACF,CACH,CAMA,SAASsE,GAA4BhD,EAASC,EAAIa,EAAK,CACrD,MAAMgB,EAAO,KACb,OAAOtD,EAOP,SAASA,EAAME,EAAM,CACnB,OAAIA,IAAS,KACJoC,EAAIpC,CAAI,GAEjBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBwE,EACR,CAOD,SAASA,EAAU9F,EAAM,CACvB,OAAOoD,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIhB,EAAIpC,CAAI,EAAIuB,EAAGvB,CAAI,CAC/D,CACH,CCrdO,MAAM+F,GAAe,CAC1B,KAAM,eACN,SAAUC,EACZ,EAGMC,GAAe,CACnB,SAAUC,GACV,QAAS,EACX,EAMA,SAASF,GAAqB1E,EAASC,EAAIa,EAAK,CAC9C,MAAMgB,EAAO,KACb,OAAOtD,EAgBP,SAASA,EAAME,EAAM,CAGnB,OAAAsB,EAAQ,MAAM,cAAc,EAGrBkC,EAAalC,EAAS6E,EAAa,aAAc,EAAI,CAAC,EAAEnG,CAAI,CACpE,CAYD,SAASmG,EAAYnG,EAAM,CACzB,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO0B,GACLA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAC9CsB,EAAQpG,CAAI,EACZoC,EAAIpC,CAAI,CACb,CAYD,SAASoG,EAAQpG,EAAM,CACrB,OAAIA,IAAS,KACJ+B,EAAM/B,CAAI,EAEfiF,EAAmBjF,CAAI,EAClBsB,EAAQ,QAAQ2E,GAAcG,EAASrE,CAAK,EAAE/B,CAAI,GAE3DsB,EAAQ,MAAM,eAAe,EACtBO,EAAO7B,CAAI,EACnB,CAYD,SAAS6B,EAAO7B,EAAM,CACpB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,eAAe,EACrB8E,EAAQpG,CAAI,IAErBsB,EAAQ,QAAQtB,CAAI,EACb6B,EACR,CAGD,SAASE,EAAM/B,EAAM,CACnB,OAAAsB,EAAQ,KAAK,cAAc,EAIpBC,EAAGvB,CAAI,CACf,CACH,CAMA,SAASkG,GAAqB5E,EAASC,EAAIa,EAAK,CAC9C,MAAMgB,EAAO,KACb,OAAO6C,EAaP,SAASA,EAAajG,EAAM,CAG1B,OAAIoD,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAC3BhB,EAAIpC,CAAI,EAEbiF,EAAmBjF,CAAI,GACzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClB2E,GASFzC,EAAalC,EAAS6E,EAAa,aAAc,EAAI,CAAC,EAAEnG,CAAI,CACpE,CAYD,SAASmG,EAAYnG,EAAM,CACzB,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO0B,GACLA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAC9CvD,EAAGvB,CAAI,EACPiF,EAAmBjF,CAAI,EACvBiG,EAAajG,CAAI,EACjBoC,EAAIpC,CAAI,CACb,CACH,CC1KO,MAAMqG,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,QAASC,GACT,SAAA9E,EACF,EAIA,SAAS8E,GAAgBhG,EAAQ,CAC/B,IAAIiG,EAAgBjG,EAAO,OAAS,EAChCkG,EAAiB,EAEjB5G,EAEA6G,EAGJ,IACGnG,EAAOkG,CAAc,EAAE,CAAC,EAAE,OAAS,cAClClG,EAAOkG,CAAc,EAAE,CAAC,EAAE,OAAS,WACpClG,EAAOiG,CAAa,EAAE,CAAC,EAAE,OAAS,cACjCjG,EAAOiG,CAAa,EAAE,CAAC,EAAE,OAAS,UAKpC,IAHA3G,EAAQ4G,EAGD,EAAE5G,EAAQ2G,GACf,GAAIjG,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,eAAgB,CAE5CU,EAAOkG,CAAc,EAAE,CAAC,EAAE,KAAO,kBACjClG,EAAOiG,CAAa,EAAE,CAAC,EAAE,KAAO,kBAChCC,GAAkB,EAClBD,GAAiB,EACjB,KACD,EAOL,IAFA3G,EAAQ4G,EAAiB,EACzBD,IACO,EAAE3G,GAAS2G,GACZE,IAAU,OACR7G,IAAU2G,GAAiBjG,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,eACvD6G,EAAQ7G,IAGVA,IAAU2G,GACVjG,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,gBAE1BU,EAAOmG,CAAK,EAAE,CAAC,EAAE,KAAO,eACpB7G,IAAU6G,EAAQ,IACpBnG,EAAOmG,CAAK,EAAE,CAAC,EAAE,IAAMnG,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5CU,EAAO,OAAOmG,EAAQ,EAAG7G,EAAQ6G,EAAQ,CAAC,EAC1CF,GAAiB3G,EAAQ6G,EAAQ,EACjC7G,EAAQ6G,EAAQ,GAElBA,EAAQ,QAGZ,OAAOnG,CACT,CAMA,SAASkB,GAASzB,EAAM,CAEtB,OACEA,IAAS,IACT,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAAE,CAAC,EAAE,OAAS,iBAEpD,CAMA,SAASsG,GAAiBhF,EAASC,EAAIa,EAAK,CAE1C,IAAIwC,EAAW,EAEXvC,EAEAP,EACJ,OAAOhC,EAcP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,kBAAkB,EACzByD,EAAa/E,CAAI,CACzB,CAYD,SAAS+E,EAAa/E,EAAM,CAC1B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpB4E,IACOG,IAETzD,EAAQ,KAAK,kBAAkB,EACxBqF,EAAQ3G,CAAI,EACpB,CAYD,SAAS2G,EAAQ3G,EAAM,CAErB,OAAIA,IAAS,KACJoC,EAAIpC,CAAI,EAMbA,IAAS,IACXsB,EAAQ,MAAM,OAAO,EACrBA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,OAAO,EACbqF,GAIL3G,IAAS,IACX8B,EAAQR,EAAQ,MAAM,kBAAkB,EACxCe,EAAO,EACAuD,EAAc5F,CAAI,GAEvBiF,EAAmBjF,CAAI,GACzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBqF,IAITrF,EAAQ,MAAM,cAAc,EACrBsF,EAAK5G,CAAI,EACjB,CAYD,SAAS4G,EAAK5G,EAAM,CAClB,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTiF,EAAmBjF,CAAI,GAEvBsB,EAAQ,KAAK,cAAc,EACpBqF,EAAQ3G,CAAI,IAErBsB,EAAQ,QAAQtB,CAAI,EACb4G,EACR,CAYD,SAAShB,EAAc5F,EAAM,CAE3B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBqC,IACOuD,GAILvD,IAASuC,GACXtD,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,KAAK,UAAU,EAChBC,EAAGvB,CAAI,IAIhB8B,EAAM,KAAO,eACN8E,EAAK5G,CAAI,EACjB,CACH,CC7NO,SAAS6G,GAAYtG,EAAQ,CAElC,MAAMuG,EAAQ,CAAE,EAChB,IAAIjH,EAAQ,GAERkH,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EACJ,KAAO,EAAExH,EAAQU,EAAO,QAAQ,CAC9B,KAAOV,KAASiH,GACdjH,EAAQiH,EAAMjH,CAAK,EAMrB,GAJAkH,EAAQxG,EAAOV,CAAK,EAKlBA,GACAkH,EAAM,CAAC,EAAE,OAAS,aAClBxG,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,mBAE9BuH,EAAYL,EAAM,CAAC,EAAE,WAAW,OAChCE,EAAa,EAEXA,EAAaG,EAAU,QACvBA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,oBAElCA,GAAc,GAGdA,EAAaG,EAAU,QACvBA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,WAElC,KAAO,EAAEA,EAAaG,EAAU,QAC1BA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,WAGlCG,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,cACpCG,EAAUH,CAAU,EAAE,CAAC,EAAE,4BAA8B,GACvDA,KAOR,GAAIF,EAAM,CAAC,IAAM,QACXA,EAAM,CAAC,EAAE,cACX,OAAO,OAAOD,EAAOQ,GAAW/G,EAAQV,CAAK,CAAC,EAC9CA,EAAQiH,EAAMjH,CAAK,EACnBwH,EAAO,YAIFN,EAAM,CAAC,EAAE,WAAY,CAG5B,IAFAE,EAAapH,EACbmH,EAAY,OACLC,MACLC,EAAa3G,EAAO0G,CAAU,EAE5BC,EAAW,CAAC,EAAE,OAAS,cACvBA,EAAW,CAAC,EAAE,OAAS,oBAEnBA,EAAW,CAAC,IAAM,UAChBF,IACFzG,EAAOyG,CAAS,EAAE,CAAC,EAAE,KAAO,mBAE9BE,EAAW,CAAC,EAAE,KAAO,aACrBF,EAAYC,GAMdD,IAEFD,EAAM,CAAC,EAAE,IAAM,OAAO,OAAO,GAAIxG,EAAOyG,CAAS,EAAE,CAAC,EAAE,KAAK,EAG3DG,EAAa5G,EAAO,MAAMyG,EAAWnH,CAAK,EAC1CsH,EAAW,QAAQJ,CAAK,EACxB1F,GAAOd,EAAQyG,EAAWnH,EAAQmH,EAAY,EAAGG,CAAU,EAE9D,CACF,CACD,MAAO,CAACE,CACV,CASA,SAASC,GAAW/G,EAAQgH,EAAY,CACtC,MAAMzF,EAAQvB,EAAOgH,CAAU,EAAE,CAAC,EAC5B/G,EAAUD,EAAOgH,CAAU,EAAE,CAAC,EACpC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,CAAE,EACnBC,EACJ5F,EAAM,YAActB,EAAQ,OAAOsB,EAAM,WAAW,EAAEA,EAAM,KAAK,EAC7D6F,EAAcD,EAAU,OAExBZ,EAAQ,CAAE,EAEVc,EAAO,CAAE,EAEf,IAAIC,EAEApG,EACA5B,EAAQ,GAERiI,EAAUhG,EACViG,EAAS,EACTjI,EAAQ,EACZ,MAAMkI,EAAS,CAAClI,CAAK,EAIrB,KAAOgI,GAAS,CAEd,KAAOvH,EAAO,EAAEiH,CAAa,EAAE,CAAC,IAAMM,GAAS,CAG/CL,EAAe,KAAKD,CAAa,EAC5BM,EAAQ,aACXD,EAASrH,EAAQ,YAAYsH,CAAO,EAC/BA,EAAQ,MACXD,EAAO,KAAK,IAAI,EAEdpG,GACFiG,EAAU,WAAWI,EAAQ,KAAK,EAEhCA,EAAQ,8BACVJ,EAAU,mCAAqC,IAEjDA,EAAU,MAAMG,CAAM,EAClBC,EAAQ,8BACVJ,EAAU,mCAAqC,SAKnDjG,EAAWqG,EACXA,EAAUA,EAAQ,IACnB,CAKD,IADAA,EAAUhG,EACH,EAAEjC,EAAQ8H,EAAY,QAGzBA,EAAY9H,CAAK,EAAE,CAAC,IAAM,QAC1B8H,EAAY9H,EAAQ,CAAC,EAAE,CAAC,IAAM,SAC9B8H,EAAY9H,CAAK,EAAE,CAAC,EAAE,OAAS8H,EAAY9H,EAAQ,CAAC,EAAE,CAAC,EAAE,MACzD8H,EAAY9H,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS8H,EAAY9H,CAAK,EAAE,CAAC,EAAE,IAAI,OAE/DC,EAAQD,EAAQ,EAChBmI,EAAO,KAAKlI,CAAK,EAEjBgI,EAAQ,WAAa,OACrBA,EAAQ,SAAW,OACnBA,EAAUA,EAAQ,MAqBtB,IAhBAJ,EAAU,OAAS,CAAE,EAKjBI,GAEFA,EAAQ,WAAa,OACrBA,EAAQ,SAAW,QAEnBE,EAAO,IAAK,EAKdnI,EAAQmI,EAAO,OACRnI,KAAS,CACd,MAAMoI,EAAQN,EAAY,MAAMK,EAAOnI,CAAK,EAAGmI,EAAOnI,EAAQ,CAAC,CAAC,EAC1DC,EAAQ2H,EAAe,IAAK,EAClCX,EAAM,QAAQ,CAAChH,EAAOA,EAAQmI,EAAM,OAAS,CAAC,CAAC,EAC/C5G,GAAOd,EAAQT,EAAO,EAAGmI,CAAK,CAC/B,CAED,IADApI,EAAQ,GACD,EAAEA,EAAQiH,EAAM,QACrBc,EAAKG,EAASjB,EAAMjH,CAAK,EAAE,CAAC,CAAC,EAAIkI,EAASjB,EAAMjH,CAAK,EAAE,CAAC,EACxDkI,GAAUjB,EAAMjH,CAAK,EAAE,CAAC,EAAIiH,EAAMjH,CAAK,EAAE,CAAC,EAAI,EAEhD,OAAO+H,CACT,CC/MO,MAAMM,GAAU,CACrB,SAAUC,GACV,QAASC,EACX,EAGMC,GAAwB,CAC5B,SAAUC,GACV,QAAS,EACX,EAQA,SAASF,GAAe7H,EAAQ,CAC9B,OAAAsG,GAAYtG,CAAM,EACXA,CACT,CAMA,SAAS4H,GAAgB7G,EAASC,EAAI,CAEpC,IAAIE,EACJ,OAAO8G,EAYP,SAASA,EAAWvI,EAAM,CACxB,OAAAsB,EAAQ,MAAM,SAAS,EACvBG,EAAWH,EAAQ,MAAM,eAAgB,CACvC,YAAa,SACnB,CAAK,EACMkH,EAAYxI,CAAI,CACxB,CAYD,SAASwI,EAAYxI,EAAM,CACzB,OAAIA,IAAS,KACJyI,EAAWzI,CAAI,EAKpBiF,EAAmBjF,CAAI,EAClBsB,EAAQ,MACb+G,GACAK,EACAD,CACD,EAACzI,CAAI,GAIRsB,EAAQ,QAAQtB,CAAI,EACbwI,EACR,CAOD,SAASC,EAAWzI,EAAM,CACxB,OAAAsB,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,SAAS,EACfC,EAAGvB,CAAI,CACf,CAOD,SAAS0I,EAAgB1I,EAAM,CAC7B,OAAAsB,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,cAAc,EAC3BG,EAAS,KAAOH,EAAQ,MAAM,eAAgB,CAC5C,YAAa,UACb,SAAAG,CACN,CAAK,EACDA,EAAWA,EAAS,KACb+G,CACR,CACH,CAMA,SAASF,GAAqBhH,EAASC,EAAIa,EAAK,CAC9C,MAAMgB,EAAO,KACb,OAAOuF,EAOP,SAASA,EAAe3I,EAAM,CAC5B,OAAAsB,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBkC,EAAalC,EAASsH,EAAU,YAAY,CACpD,CAOD,SAASA,EAAS5I,EAAM,CACtB,GAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,EAC1C,OAAOoC,EAAIpC,CAAI,EAKjB,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MACE,CAACA,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,GAC5D0B,GACAA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAEzCvD,EAAGvB,CAAI,EAETsB,EAAQ,UAAU8B,EAAK,OAAO,WAAW,KAAMhB,EAAKb,CAAE,EAAEvB,CAAI,CACpE,CACH,CCvHO,SAAS6I,GACdvH,EACAC,EACAa,EACA0G,EACAC,EACAC,EACAC,EACAC,EACAnF,EACA,CACA,MAAMoF,EAAQpF,GAAO,OAAO,kBAC5B,IAAIqF,EAAU,EACd,OAAOtJ,EAcP,SAASA,EAAME,EAAM,CACnB,OAAIA,IAAS,IACXsB,EAAQ,MAAMwH,CAAI,EAClBxH,EAAQ,MAAMyH,CAAW,EACzBzH,EAAQ,MAAM0H,CAAiB,EAC/B1H,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK0H,CAAiB,EACvBK,GAILrJ,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAM2C,GAAa3C,CAAI,EAC3DoC,EAAIpC,CAAI,GAEjBsB,EAAQ,MAAMwH,CAAI,EAClBxH,EAAQ,MAAM2H,CAAO,EACrB3H,EAAQ,MAAM4H,CAAU,EACxB5H,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMgI,EAAItJ,CAAI,EAChB,CAYD,SAASqJ,EAAerJ,EAAM,CAC5B,OAAIA,IAAS,IACXsB,EAAQ,MAAM0H,CAAiB,EAC/B1H,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK0H,CAAiB,EAC9B1H,EAAQ,KAAKyH,CAAW,EACxBzH,EAAQ,KAAKwH,CAAI,EACVvH,IAETD,EAAQ,MAAM4H,CAAU,EACxB5H,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMiI,EAASvJ,CAAI,EACrB,CAYD,SAASuJ,EAASvJ,EAAM,CACtB,OAAIA,IAAS,IACXsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK4H,CAAU,EAChBG,EAAerJ,CAAI,GAExBA,IAAS,MAAQA,IAAS,IAAMiF,EAAmBjF,CAAI,EAClDoC,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACbA,IAAS,GAAKwJ,EAAiBD,EACvC,CAYD,SAASC,EAAexJ,EAAM,CAC5B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCsB,EAAQ,QAAQtB,CAAI,EACbuJ,GAEFA,EAASvJ,CAAI,CACrB,CAYD,SAASsJ,EAAItJ,EAAM,CACjB,MACE,CAACoJ,IACApJ,IAAS,MAAQA,IAAS,IAAMyJ,EAA0BzJ,CAAI,IAE/DsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK4H,CAAU,EACvB5H,EAAQ,KAAK2H,CAAO,EACpB3H,EAAQ,KAAKwH,CAAI,EACVvH,EAAGvB,CAAI,GAEZoJ,EAAUD,GAASnJ,IAAS,IAC9BsB,EAAQ,QAAQtB,CAAI,EACpBoJ,IACOE,GAELtJ,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBoJ,IACOE,GAMLtJ,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAM2C,GAAa3C,CAAI,EAC3DoC,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACbA,IAAS,GAAK0J,EAAYJ,EAClC,CAYD,SAASI,EAAU1J,EAAM,CACvB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCsB,EAAQ,QAAQtB,CAAI,EACbsJ,GAEFA,EAAItJ,CAAI,CAChB,CACH,CCzLO,SAAS2J,GAAarI,EAASC,EAAIa,EAAK0G,EAAMc,EAAYV,EAAY,CAC3E,MAAM9F,EAAO,KACb,IAAIf,EAAO,EAEPwH,EACJ,OAAO/J,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAMwH,CAAI,EAClBxH,EAAQ,MAAMsI,CAAU,EACxBtI,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAKsI,CAAU,EACvBtI,EAAQ,MAAM4H,CAAU,EACjB9C,CACR,CAYD,SAASA,EAAQpG,EAAM,CACrB,OACEqC,EAAO,KACPrC,IAAS,MACTA,IAAS,IACRA,IAAS,IAAM,CAAC6J,GAMhB7J,IAAS,IACR,CAACqC,GACD,2BAA4Be,EAAK,OAAO,WAEnChB,EAAIpC,CAAI,EAEbA,IAAS,IACXsB,EAAQ,KAAK4H,CAAU,EACvB5H,EAAQ,MAAMsI,CAAU,EACxBtI,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAKsI,CAAU,EACvBtI,EAAQ,KAAKwH,CAAI,EACVvH,GAIL0D,EAAmBjF,CAAI,GACzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClB8E,IAET9E,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMwI,EAAY9J,CAAI,EACxB,CAYD,SAAS8J,EAAY9J,EAAM,CACzB,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTiF,EAAmBjF,CAAI,GACvBqC,IAAS,KAETf,EAAQ,KAAK,aAAa,EACnB8E,EAAQpG,CAAI,IAErBsB,EAAQ,QAAQtB,CAAI,EACf6J,IAAMA,EAAO,CAACvG,EAActD,CAAI,GAC9BA,IAAS,GAAK+J,EAAcD,EACpC,CAYD,SAASC,EAAY/J,EAAM,CACzB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCsB,EAAQ,QAAQtB,CAAI,EACpBqC,IACOyH,GAEFA,EAAY9J,CAAI,CACxB,CACH,CCtHO,SAASgK,GAAa1I,EAASC,EAAIa,EAAK0G,EAAMc,EAAYV,EAAY,CAE3E,IAAItH,EACJ,OAAO9B,EAYP,SAASA,EAAME,EAAM,CACnB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCsB,EAAQ,MAAMwH,CAAI,EAClBxH,EAAQ,MAAMsI,CAAU,EACxBtI,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAKsI,CAAU,EACvBhI,EAAS5B,IAAS,GAAK,GAAKA,EACrBiK,GAEF7H,EAAIpC,CAAI,CAChB,CAcD,SAASiK,EAAMjK,EAAM,CACnB,OAAIA,IAAS4B,GACXN,EAAQ,MAAMsI,CAAU,EACxBtI,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAKsI,CAAU,EACvBtI,EAAQ,KAAKwH,CAAI,EACVvH,IAETD,EAAQ,MAAM4H,CAAU,EACjB9C,EAAQpG,CAAI,EACpB,CAYD,SAASoG,EAAQpG,EAAM,CACrB,OAAIA,IAAS4B,GACXN,EAAQ,KAAK4H,CAAU,EAChBe,EAAMrI,CAAM,GAEjB5B,IAAS,KACJoC,EAAIpC,CAAI,EAIbiF,EAAmBjF,CAAI,GAEzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBkC,EAAalC,EAAS8E,EAAS,YAAY,IAEpD9E,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMO,EAAO7B,CAAI,EACnB,CAOD,SAAS6B,EAAO7B,EAAM,CACpB,OAAIA,IAAS4B,GAAU5B,IAAS,MAAQiF,EAAmBjF,CAAI,GAC7DsB,EAAQ,KAAK,aAAa,EACnB8E,EAAQpG,CAAI,IAErBsB,EAAQ,QAAQtB,CAAI,EACbA,IAAS,GAAKkK,EAASrI,EAC/B,CAYD,SAASqI,EAAOlK,EAAM,CACpB,OAAIA,IAAS4B,GAAU5B,IAAS,IAC9BsB,EAAQ,QAAQtB,CAAI,EACb6B,GAEFA,EAAO7B,CAAI,CACnB,CACH,CClIO,SAASmK,GAAkB7I,EAASC,EAAI,CAE7C,IAAIsI,EACJ,OAAO/J,EAGP,SAASA,EAAME,EAAM,CACnB,OAAIiF,EAAmBjF,CAAI,GACzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EACzBuI,EAAO,GACA/J,GAELwD,EAActD,CAAI,EACbwD,EACLlC,EACAxB,EACA+J,EAAO,aAAe,YACvB,EAAC7J,CAAI,EAEDuB,EAAGvB,CAAI,CACf,CACH,CC7BO,MAAMoK,GAAa,CACxB,KAAM,aACN,SAAUC,EACZ,EAGMC,GAAc,CAClB,SAAUC,GACV,QAAS,EACX,EAMA,SAASF,GAAmB/I,EAASC,EAAIa,EAAK,CAC5C,MAAMgB,EAAO,KAEb,IAAIoH,EACJ,OAAO1K,EAYP,SAASA,EAAME,EAAM,CAInB,OAAAsB,EAAQ,MAAM,YAAY,EACnBI,EAAO1B,CAAI,CACnB,CAYD,SAAS0B,EAAO1B,EAAM,CAGpB,OAAO2J,GAAa,KAClBvG,EACA9B,EACAmJ,EAEArI,EACA,kBACA,wBACA,uBACD,EAACpC,CAAI,CACP,CAYD,SAASyK,EAAWzK,EAAM,CAIxB,OAHAwK,EAAaE,GACXtH,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CACxE,EACGpD,IAAS,IACXsB,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,kBAAkB,EACxBqJ,GAEFvI,EAAIpC,CAAI,CAChB,CAYD,SAAS2K,EAAY3K,EAAM,CAEzB,OAAOyJ,EAA0BzJ,CAAI,EACjCmK,GAAkB7I,EAASsJ,CAAiB,EAAE5K,CAAI,EAClD4K,EAAkB5K,CAAI,CAC3B,CAYD,SAAS4K,EAAkB5K,EAAM,CAC/B,OAAO6I,GACLvH,EACAuJ,EAEAzI,EACA,wBACA,+BACA,qCACA,2BACA,6BACD,EAACpC,CAAI,CACP,CAYD,SAAS6K,EAAiB7K,EAAM,CAC9B,OAAOsB,EAAQ,QAAQgJ,GAAavI,EAAOA,CAAK,EAAE/B,CAAI,CACvD,CAcD,SAAS+B,EAAM/B,EAAM,CACnB,OAAOsD,EAActD,CAAI,EACrBwD,EAAalC,EAASwJ,EAAiB,YAAY,EAAE9K,CAAI,EACzD8K,EAAgB9K,CAAI,CACzB,CAcD,SAAS8K,EAAgB9K,EAAM,CAC7B,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,YAAY,EAKzB8B,EAAK,OAAO,QAAQ,KAAKoH,CAAU,EAK5BjJ,EAAGvB,CAAI,GAEToC,EAAIpC,CAAI,CAChB,CACH,CAMA,SAASuK,GAAoBjJ,EAASC,EAAIa,EAAK,CAC7C,OAAOkI,EAcP,SAASA,EAAYtK,EAAM,CACzB,OAAOyJ,EAA0BzJ,CAAI,EACjCmK,GAAkB7I,EAASyJ,CAAY,EAAE/K,CAAI,EAC7CoC,EAAIpC,CAAI,CACb,CAaD,SAAS+K,EAAa/K,EAAM,CAC1B,OAAOgK,GACL1I,EACA0J,EACA5I,EACA,kBACA,wBACA,uBACD,EAACpC,CAAI,CACP,CAYD,SAASgL,EAAWhL,EAAM,CACxB,OAAOsD,EAActD,CAAI,EACrBwD,EAAalC,EAAS2J,EAA8B,YAAY,EAAEjL,CAAI,EACtEiL,EAA6BjL,CAAI,CACtC,CAYD,SAASiL,EAA6BjL,EAAM,CAC1C,OAAOA,IAAS,MAAQiF,EAAmBjF,CAAI,EAAIuB,EAAGvB,CAAI,EAAIoC,EAAIpC,CAAI,CACvE,CACH,CCpRO,MAAMkL,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAMA,SAASA,GAAwB7J,EAASC,EAAIa,EAAK,CACjD,OAAOtC,EAaP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQtB,CAAI,EACb+B,CACR,CAaD,SAASA,EAAM/B,EAAM,CACnB,OAAIiF,EAAmBjF,CAAI,GACzBsB,EAAQ,KAAK,iBAAiB,EACvBC,EAAGvB,CAAI,GAEToC,EAAIpC,CAAI,CAChB,CACH,CCvCO,MAAMoL,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,QAASC,EACX,EAGA,SAASA,GAAkB/K,EAAQC,EAAS,CAC1C,IAAIiI,EAAalI,EAAO,OAAS,EAC7BgF,EAAe,EAEf2C,EAEAvH,EAGJ,OAAIJ,EAAOgF,CAAY,EAAE,CAAC,EAAE,OAAS,eACnCA,GAAgB,GAKhBkD,EAAa,EAAIlD,GACjBhF,EAAOkI,CAAU,EAAE,CAAC,EAAE,OAAS,eAE/BA,GAAc,GAGdlI,EAAOkI,CAAU,EAAE,CAAC,EAAE,OAAS,uBAC9BlD,IAAiBkD,EAAa,GAC5BA,EAAa,EAAIlD,GAChBhF,EAAOkI,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,gBAEvCA,GAAclD,EAAe,IAAMkD,EAAa,EAAI,GAElDA,EAAalD,IACf2C,EAAU,CACR,KAAM,iBACN,MAAO3H,EAAOgF,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKhF,EAAOkI,CAAU,EAAE,CAAC,EAAE,GAC5B,EACD9H,EAAO,CACL,KAAM,YACN,MAAOJ,EAAOgF,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKhF,EAAOkI,CAAU,EAAE,CAAC,EAAE,IAC3B,YAAa,MACd,EACDpH,GAAOd,EAAQgF,EAAckD,EAAalD,EAAe,EAAG,CAC1D,CAAC,QAAS2C,EAAS1H,CAAO,EAC1B,CAAC,QAASG,EAAMH,CAAO,EACvB,CAAC,OAAQG,EAAMH,CAAO,EACtB,CAAC,OAAQ0H,EAAS1H,CAAO,CAC/B,CAAK,GAEID,CACT,CAMA,SAAS8K,GAAmB/J,EAASC,EAAIa,EAAK,CAC5C,IAAIC,EAAO,EACX,OAAOvC,EAYP,SAASA,EAAME,EAAM,CAEnB,OAAAsB,EAAQ,MAAM,YAAY,EACnBI,EAAO1B,CAAI,CACnB,CAYD,SAAS0B,EAAO1B,EAAM,CACpB,OAAAsB,EAAQ,MAAM,oBAAoB,EAC3ByD,EAAa/E,CAAI,CACzB,CAYD,SAAS+E,EAAa/E,EAAM,CAC1B,OAAIA,IAAS,IAAMqC,IAAS,GAC1Bf,EAAQ,QAAQtB,CAAI,EACb+E,GAIL/E,IAAS,MAAQyJ,EAA0BzJ,CAAI,GACjDsB,EAAQ,KAAK,oBAAoB,EAC1B8E,EAAQpG,CAAI,GAEdoC,EAAIpC,CAAI,CAChB,CAYD,SAASoG,EAAQpG,EAAM,CACrB,OAAIA,IAAS,IACXsB,EAAQ,MAAM,oBAAoB,EAC3BiK,EAAgBvL,CAAI,GAEzBA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,YAAY,EAIlBC,EAAGvB,CAAI,GAEZsD,EAActD,CAAI,EACbwD,EAAalC,EAAS8E,EAAS,YAAY,EAAEpG,CAAI,GAK1DsB,EAAQ,MAAM,gBAAgB,EACvBsF,EAAK5G,CAAI,EACjB,CAcD,SAASuL,EAAgBvL,EAAM,CAC7B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbuL,IAETjK,EAAQ,KAAK,oBAAoB,EAC1B8E,EAAQpG,CAAI,EACpB,CAYD,SAAS4G,EAAK5G,EAAM,CAClB,OAAIA,IAAS,MAAQA,IAAS,IAAMyJ,EAA0BzJ,CAAI,GAChEsB,EAAQ,KAAK,gBAAgB,EACtB8E,EAAQpG,CAAI,IAErBsB,EAAQ,QAAQtB,CAAI,EACb4G,EACR,CACH,CCjMO,MAAM4E,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,IACF,EAcaC,GAAe,CAAC,MAAO,SAAU,QAAS,UAAU,ECxEpDC,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,UAAWC,GACX,SAAU,EACZ,EAGMC,GAAkB,CACtB,SAAUC,GACV,QAAS,EACX,EACMC,GAA2B,CAC/B,SAAUC,GACV,QAAS,EACX,EAGA,SAASJ,GAAkBrL,EAAQ,CACjC,IAAIV,EAAQU,EAAO,OACnB,KAAOV,KACD,EAAAU,EAAOV,CAAK,EAAE,CAAC,IAAM,SAAWU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,aAA9D,CAIF,OAAIA,EAAQ,GAAKU,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,eAE7CU,EAAOV,CAAK,EAAE,CAAC,EAAE,MAAQU,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,MAE9CU,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,MAAQU,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,MAElDU,EAAO,OAAOV,EAAQ,EAAG,CAAC,GAErBU,CACT,CAMA,SAASoL,GAAiBrK,EAASC,EAAIa,EAAK,CAC1C,MAAMgB,EAAO,KAEb,IAAIxB,EAEAqK,EAEAC,EAEArM,EAEAsM,EACJ,OAAOrM,EAYP,SAASA,EAAME,EAAM,CAEnB,OAAO0B,EAAO1B,CAAI,CACnB,CAYD,SAAS0B,EAAO1B,EAAM,CACpB,OAAAsB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQtB,CAAI,EACbS,CACR,CAgBD,SAASA,EAAKT,EAAM,CAClB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACboM,GAELpM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBiM,EAAa,GACNI,GAELrM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS,EAMFwB,EAAK,UAAY7B,EAAK+K,GAI3BhK,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EAEpBkM,EAAS,OAAO,aAAalM,CAAI,EAC1BuM,GAEFnK,EAAIpC,CAAI,CAChB,CAgBD,SAASoM,EAAgBpM,EAAM,CAC7B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS,EACF4K,GAELxM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS,EACT/B,EAAQ,EACD4M,GAILnK,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS,EAGFwB,EAAK,UAAY7B,EAAK+K,GAExBlK,EAAIpC,CAAI,CAChB,CAYD,SAASwM,EAAkBxM,EAAM,CAC/B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EAGboD,EAAK,UAAY7B,EAAK+K,GAExBlK,EAAIpC,CAAI,CAChB,CAYD,SAASyM,EAAgBzM,EAAM,CAC7B,MAAML,GAAQ,SACd,OAAIK,IAASL,GAAM,WAAWE,GAAO,GACnCyB,EAAQ,QAAQtB,CAAI,EAChBH,IAAUF,GAAM,OAGXyD,EAAK,UAAY7B,EAAKmL,EAExBD,GAEFrK,EAAIpC,CAAI,CAChB,CAYD,SAASqM,EAAcrM,EAAM,CAC3B,OAAIsC,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EAEpBkM,EAAS,OAAO,aAAalM,CAAI,EAC1BuM,GAEFnK,EAAIpC,CAAI,CAChB,CAcD,SAASuM,EAAQvM,EAAM,CACrB,GACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTyJ,EAA0BzJ,CAAI,EAC9B,CACA,MAAM2M,GAAQ3M,IAAS,GACjB4M,GAAOV,EAAO,YAAa,EACjC,MAAI,CAACS,IAAS,CAACV,GAAcR,GAAa,SAASmB,EAAI,GACrDhL,EAAS,EAGFwB,EAAK,UAAY7B,EAAGvB,CAAI,EAAI0M,EAAa1M,CAAI,GAElDwL,GAAe,SAASU,EAAO,YAAa,CAAA,GAC9CtK,EAAS,EACL+K,IACFrL,EAAQ,QAAQtB,CAAI,EACb6M,GAKFzJ,EAAK,UAAY7B,EAAGvB,CAAI,EAAI0M,EAAa1M,CAAI,IAEtD4B,EAAS,EAEFwB,EAAK,WAAa,CAACA,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EACtDhB,EAAIpC,CAAI,EACRiM,EACAa,EAAwB9M,CAAI,EAC5B+M,EAA4B/M,CAAI,EACrC,CAGD,OAAIA,IAAS,IAAME,EAAkBF,CAAI,GACvCsB,EAAQ,QAAQtB,CAAI,EACpBkM,GAAU,OAAO,aAAalM,CAAI,EAC3BuM,GAEFnK,EAAIpC,CAAI,CAChB,CAYD,SAAS6M,EAAiB7M,EAAM,CAC9B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EAGboD,EAAK,UAAY7B,EAAKmL,GAExBtK,EAAIpC,CAAI,CAChB,CAYD,SAAS8M,EAAwB9M,EAAM,CACrC,OAAIsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACb8M,GAEFE,EAAYhN,CAAI,CACxB,CAyBD,SAAS+M,EAA4B/M,EAAM,CACzC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbgN,GAILhN,IAAS,IAAMA,IAAS,IAAMsC,GAAWtC,CAAI,GAC/CsB,EAAQ,QAAQtB,CAAI,EACbiN,GAEL3J,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACb+M,GAEFC,EAAYhN,CAAI,CACxB,CAgBD,SAASiN,EAAsBjN,EAAM,CAEnC,OACEA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTE,EAAkBF,CAAI,GAEtBsB,EAAQ,QAAQtB,CAAI,EACbiN,GAEFC,EAA2BlN,CAAI,CACvC,CAeD,SAASkN,EAA2BlN,EAAM,CACxC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbmN,GAEL7J,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbkN,GAEFH,EAA4B/M,CAAI,CACxC,CAeD,SAASmN,EAA6BnN,EAAM,CAC1C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFoC,EAAIpC,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1BsB,EAAQ,QAAQtB,CAAI,EACpBmM,EAAUnM,EACHoN,GAEL9J,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbmN,GAEFE,EAA+BrN,CAAI,CAC3C,CAcD,SAASoN,EAA6BpN,EAAM,CAC1C,OAAIA,IAASmM,GACX7K,EAAQ,QAAQtB,CAAI,EACpBmM,EAAU,KACHmB,GAELtN,IAAS,MAAQiF,EAAmBjF,CAAI,EACnCoC,EAAIpC,CAAI,GAEjBsB,EAAQ,QAAQtB,CAAI,EACboN,EACR,CAYD,SAASC,EAA+BrN,EAAM,CAC5C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTyJ,EAA0BzJ,CAAI,EAEvBkN,EAA2BlN,CAAI,GAExCsB,EAAQ,QAAQtB,CAAI,EACbqN,EACR,CAaD,SAASC,EAAkCtN,EAAM,CAC/C,OAAIA,IAAS,IAAMA,IAAS,IAAMsD,EAActD,CAAI,EAC3C+M,EAA4B/M,CAAI,EAElCoC,EAAIpC,CAAI,CAChB,CAYD,SAASgN,EAAYhN,EAAM,CACzB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbuN,GAEFnL,EAAIpC,CAAI,CAChB,CAYD,SAASuN,EAAcvN,EAAM,CAC3B,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,EAGnC0M,EAAa1M,CAAI,EAEtBsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbuN,GAEFnL,EAAIpC,CAAI,CAChB,CAYD,SAAS0M,EAAa1M,EAAM,CAC1B,OAAIA,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACbwN,GAELxN,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACbyN,GAELzN,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACb0N,IAEL1N,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACbsM,GAELtM,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACb2N,IAEL1I,EAAmBjF,CAAI,IAAM4B,IAAW,GAAKA,IAAW,IAC1DN,EAAQ,KAAK,cAAc,EACpBA,EAAQ,MACbuK,GACA+B,GACAC,CACD,EAAC7N,CAAI,GAEJA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,cAAc,EACpBuM,EAAkB7N,CAAI,IAE/BsB,EAAQ,QAAQtB,CAAI,EACb0M,EACR,CAaD,SAASmB,EAAkB7N,EAAM,CAC/B,OAAOsB,EAAQ,MACbyK,GACA+B,EACAF,EACD,EAAC5N,CAAI,CACP,CAaD,SAAS8N,EAAyB9N,EAAM,CACtC,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClByM,CACR,CAaD,SAASA,EAAmB/N,EAAM,CAChC,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,EACnC6N,EAAkB7N,CAAI,GAE/BsB,EAAQ,MAAM,cAAc,EACrBoL,EAAa1M,CAAI,EACzB,CAYD,SAASwN,EAA0BxN,EAAM,CACvC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbsM,GAEFI,EAAa1M,CAAI,CACzB,CAYD,SAASyN,EAAuBzN,EAAM,CACpC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBkM,EAAS,GACF8B,IAEFtB,EAAa1M,CAAI,CACzB,CAYD,SAASgO,GAAsBhO,EAAM,CACnC,GAAIA,IAAS,GAAI,CACf,MAAM4M,GAAOV,EAAO,YAAa,EACjC,OAAIT,GAAa,SAASmB,EAAI,GAC5BtL,EAAQ,QAAQtB,CAAI,EACb0N,IAEFhB,EAAa1M,CAAI,CACzB,CACD,OAAIsC,GAAWtC,CAAI,GAAKkM,EAAO,OAAS,GACtC5K,EAAQ,QAAQtB,CAAI,EAEpBkM,GAAU,OAAO,aAAalM,CAAI,EAC3BgO,IAEFtB,EAAa1M,CAAI,CACzB,CAYD,SAAS2N,GAAwB3N,EAAM,CACrC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbsM,GAEFI,EAAa1M,CAAI,CACzB,CAoBD,SAASsM,EAA8BtM,EAAM,CAC3C,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb0N,IAIL1N,IAAS,IAAM4B,IAAW,GAC5BN,EAAQ,QAAQtB,CAAI,EACbsM,GAEFI,EAAa1M,CAAI,CACzB,CAYD,SAAS0N,GAAkB1N,EAAM,CAC/B,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,cAAc,EACpBsM,GAAkB5N,CAAI,IAE/BsB,EAAQ,QAAQtB,CAAI,EACb0N,GACR,CAYD,SAASE,GAAkB5N,EAAM,CAC/B,OAAAsB,EAAQ,KAAK,UAAU,EAKhBC,EAAGvB,CAAI,CACf,CACH,CAMA,SAASgM,GAAiC1K,EAASC,EAAIa,EAAK,CAC1D,MAAMgB,EAAO,KACb,OAAOtD,EAaP,SAASA,EAAME,EAAM,CACnB,OAAIiF,EAAmBjF,CAAI,GACzBsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBS,GAEFK,EAAIpC,CAAI,CAChB,CAaD,SAAS+B,EAAM/B,EAAM,CACnB,OAAOoD,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIhB,EAAIpC,CAAI,EAAIuB,EAAGvB,CAAI,CAC/D,CACH,CAMA,SAAS8L,GAAwBxK,EAASC,EAAIa,EAAK,CACjD,OAAOtC,EAaP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBA,EAAQ,QAAQ2M,GAAW1M,EAAIa,CAAG,CAC1C,CACH,CCl4BO,MAAM8L,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAMA,SAASA,GAAiB7M,EAASC,EAAIa,EAAK,CAC1C,MAAMgB,EAAO,KAEb,IAAIxB,EAEA/B,EAEAuO,EACJ,OAAOtO,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQtB,CAAI,EACbS,CACR,CAgBD,SAASA,EAAKT,EAAM,CAClB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACboM,GAELpM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbqM,GAELrM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbqO,GAIL/L,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACbsO,GAEFlM,EAAIpC,CAAI,CAChB,CAgBD,SAASoM,EAAgBpM,EAAM,CAC7B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbwM,GAELxM,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBH,EAAQ,EACD4M,GAELnK,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACbuO,GAEFnM,EAAIpC,CAAI,CAChB,CAYD,SAASwM,EAAkBxM,EAAM,CAC/B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbwO,GAEFpM,EAAIpC,CAAI,CAChB,CAYD,SAASyO,EAAQzO,EAAM,CACrB,OAAIA,IAAS,KACJoC,EAAIpC,CAAI,EAEbA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb0O,GAELzJ,EAAmBjF,CAAI,GACzBoO,EAAcK,EACPE,EAAiB3O,CAAI,IAE9BsB,EAAQ,QAAQtB,CAAI,EACbyO,EACR,CAYD,SAASC,EAAa1O,EAAM,CAC1B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbwO,GAEFC,EAAQzO,CAAI,CACpB,CAYD,SAASwO,EAAWxO,EAAM,CACxB,OAAOA,IAAS,GACZiB,EAAIjB,CAAI,EACRA,IAAS,GACT0O,EAAa1O,CAAI,EACjByO,EAAQzO,CAAI,CACjB,CAYD,SAASyM,EAAgBzM,EAAM,CAC7B,MAAML,GAAQ,SACd,OAAIK,IAASL,GAAM,WAAWE,GAAO,GACnCyB,EAAQ,QAAQtB,CAAI,EACbH,IAAUF,GAAM,OAASiP,EAAQnC,GAEnCrK,EAAIpC,CAAI,CAChB,CAYD,SAAS4O,EAAM5O,EAAM,CACnB,OAAIA,IAAS,KACJoC,EAAIpC,CAAI,EAEbA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb6O,GAEL5J,EAAmBjF,CAAI,GACzBoO,EAAcQ,EACPD,EAAiB3O,CAAI,IAE9BsB,EAAQ,QAAQtB,CAAI,EACb4O,EACR,CAYD,SAASC,EAAW7O,EAAM,CACxB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb8O,GAEFF,EAAM5O,CAAI,CAClB,CAYD,SAAS8O,EAAS9O,EAAM,CACtB,OAAIA,IAAS,GACJiB,EAAIjB,CAAI,EAEbA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb8O,GAEFF,EAAM5O,CAAI,CAClB,CAYD,SAASuO,EAAYvO,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,GACrBiB,EAAIjB,CAAI,EAEbiF,EAAmBjF,CAAI,GACzBoO,EAAcG,EACPI,EAAiB3O,CAAI,IAE9BsB,EAAQ,QAAQtB,CAAI,EACbuO,EACR,CAYD,SAASF,EAAYrO,EAAM,CACzB,OAAIA,IAAS,KACJoC,EAAIpC,CAAI,EAEbA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACb+O,GAEL9J,EAAmBjF,CAAI,GACzBoO,EAAcC,EACPM,EAAiB3O,CAAI,IAE9BsB,EAAQ,QAAQtB,CAAI,EACbqO,EACR,CAYD,SAASU,EAAiB/O,EAAM,CAC9B,OAAOA,IAAS,GAAKiB,EAAIjB,CAAI,EAAIqO,EAAYrO,CAAI,CAClD,CAYD,SAASqM,EAAcrM,EAAM,CAE3B,OAAIsC,GAAWtC,CAAI,GACjBsB,EAAQ,QAAQtB,CAAI,EACbgP,GAEF5M,EAAIpC,CAAI,CAChB,CAYD,SAASgP,EAAShP,EAAM,CAEtB,OAAIA,IAAS,IAAME,EAAkBF,CAAI,GACvCsB,EAAQ,QAAQtB,CAAI,EACbgP,GAEFC,EAAgBjP,CAAI,CAC5B,CAYD,SAASiP,EAAgBjP,EAAM,CAC7B,OAAIiF,EAAmBjF,CAAI,GACzBoO,EAAca,EACPN,EAAiB3O,CAAI,GAE1BsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbiP,GAEFhO,EAAIjB,CAAI,CAChB,CAYD,SAASsO,EAAQtO,EAAM,CAErB,OAAIA,IAAS,IAAME,EAAkBF,CAAI,GACvCsB,EAAQ,QAAQtB,CAAI,EACbsO,GAELtO,IAAS,IAAMA,IAAS,IAAMyJ,EAA0BzJ,CAAI,EACvDkP,EAAelP,CAAI,EAErBoC,EAAIpC,CAAI,CAChB,CAYD,SAASkP,EAAelP,EAAM,CAC5B,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbiB,GAILjB,IAAS,IAAMA,IAAS,IAAMsC,GAAWtC,CAAI,GAC/CsB,EAAQ,QAAQtB,CAAI,EACbmP,GAELlK,EAAmBjF,CAAI,GACzBoO,EAAcc,EACPP,EAAiB3O,CAAI,GAE1BsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbkP,GAEFjO,EAAIjB,CAAI,CAChB,CAYD,SAASmP,EAAqBnP,EAAM,CAElC,OACEA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTE,EAAkBF,CAAI,GAEtBsB,EAAQ,QAAQtB,CAAI,EACbmP,GAEFC,EAA0BpP,CAAI,CACtC,CAaD,SAASoP,EAA0BpP,EAAM,CACvC,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACbqP,GAELpK,EAAmBjF,CAAI,GACzBoO,EAAcgB,EACPT,EAAiB3O,CAAI,GAE1BsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACboP,GAEFF,EAAelP,CAAI,CAC3B,CAaD,SAASqP,EAA4BrP,EAAM,CACzC,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFoC,EAAIpC,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1BsB,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS5B,EACFsP,GAELrK,EAAmBjF,CAAI,GACzBoO,EAAciB,EACPV,EAAiB3O,CAAI,GAE1BsD,EAActD,CAAI,GACpBsB,EAAQ,QAAQtB,CAAI,EACbqP,IAET/N,EAAQ,QAAQtB,CAAI,EACbuP,EACR,CAYD,SAASD,EAA4BtP,EAAM,CACzC,OAAIA,IAAS4B,GACXN,EAAQ,QAAQtB,CAAI,EACpB4B,EAAS,OACF4N,GAELxP,IAAS,KACJoC,EAAIpC,CAAI,EAEbiF,EAAmBjF,CAAI,GACzBoO,EAAckB,EACPX,EAAiB3O,CAAI,IAE9BsB,EAAQ,QAAQtB,CAAI,EACbsP,EACR,CAYD,SAASC,EAA8BvP,EAAM,CAC3C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFoC,EAAIpC,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAAMyJ,EAA0BzJ,CAAI,EACvDkP,EAAelP,CAAI,GAE5BsB,EAAQ,QAAQtB,CAAI,EACbuP,EACR,CAaD,SAASC,EAAiCxP,EAAM,CAC9C,OAAIA,IAAS,IAAMA,IAAS,IAAMyJ,EAA0BzJ,CAAI,EACvDkP,EAAelP,CAAI,EAErBoC,EAAIpC,CAAI,CAChB,CAYD,SAASiB,EAAIjB,EAAM,CACjB,OAAIA,IAAS,IACXsB,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,UAAU,EAChBC,GAEFa,EAAIpC,CAAI,CAChB,CAgBD,SAAS2O,EAAiB3O,EAAM,CAC9B,OAAAsB,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBmO,EACR,CAgBD,SAASA,GAAgBzP,EAAM,CAG7B,OAAOsD,EAActD,CAAI,EACrBwD,EACElC,EACAoO,GACA,aACAtM,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAACpD,CAAI,EACN0P,GAAsB1P,CAAI,CAC/B,CAgBD,SAAS0P,GAAsB1P,EAAM,CACnC,OAAAsB,EAAQ,MAAM,cAAc,EACrB8M,EAAYpO,CAAI,CACxB,CACH,CCrrBO,MAAM2P,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,UAAWC,GACX,WAAYC,EACd,EAGMC,GAAoB,CACxB,SAAUC,EACZ,EAEMC,GAAyB,CAC7B,SAAUC,EACZ,EAEMC,GAA8B,CAClC,SAAUC,EACZ,EAGA,SAASN,GAAmBvP,EAAQ,CAClC,IAAIV,EAAQ,GACZ,KAAO,EAAEA,EAAQU,EAAO,QAAQ,CAC9B,MAAMuB,EAAQvB,EAAOV,CAAK,EAAE,CAAC,GAE3BiC,EAAM,OAAS,cACfA,EAAM,OAAS,aACfA,EAAM,OAAS,cAGfvB,EAAO,OAAOV,EAAQ,EAAGiC,EAAM,OAAS,aAAe,EAAI,CAAC,EAC5DA,EAAM,KAAO,OACbjC,IAEH,CACD,OAAOU,CACT,CAGA,SAASsP,GAAkBtP,EAAQC,EAAS,CAC1C,IAAIX,EAAQU,EAAO,OACfS,EAAS,EAETc,EAEArB,EAEAuB,EAEAqO,EAGJ,KAAOxQ,KAEL,GADAiC,EAAQvB,EAAOV,CAAK,EAAE,CAAC,EACnBY,EAAM,CAER,GACEqB,EAAM,OAAS,QACdA,EAAM,OAAS,aAAeA,EAAM,UAErC,MAKEvB,EAAOV,CAAK,EAAE,CAAC,IAAM,SAAWiC,EAAM,OAAS,cACjDA,EAAM,UAAY,GAErB,SAAUE,GACT,GACEzB,EAAOV,CAAK,EAAE,CAAC,IAAM,UACpBiC,EAAM,OAAS,cAAgBA,EAAM,OAAS,cAC/C,CAACA,EAAM,YAEPrB,EAAOZ,EACHiC,EAAM,OAAS,aAAa,CAC9Bd,EAAS,EACT,KACD,OAEMc,EAAM,OAAS,aACxBE,EAAQnC,GAGZ,MAAMa,EAAQ,CACZ,KAAMH,EAAOE,CAAI,EAAE,CAAC,EAAE,OAAS,YAAc,OAAS,QACtD,MAAO,OAAO,OAAO,CAAE,EAAEF,EAAOE,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIF,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CACxD,EACK+P,EAAQ,CACZ,KAAM,QACN,MAAO,OAAO,OAAO,CAAE,EAAE/P,EAAOE,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAE,EAAEF,EAAOyB,CAAK,EAAE,CAAC,EAAE,GAAG,CAC5C,EACKrB,EAAO,CACX,KAAM,YACN,MAAO,OAAO,OAAO,CAAA,EAAIJ,EAAOE,EAAOO,EAAS,CAAC,EAAE,CAAC,EAAE,GAAG,EACzD,IAAK,OAAO,OAAO,GAAIT,EAAOyB,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAClD,EACD,OAAAqO,EAAQ,CACN,CAAC,QAAS3P,EAAOF,CAAO,EACxB,CAAC,QAAS8P,EAAO9P,CAAO,CACzB,EAGD6P,EAAQlP,EAAKkP,EAAO9P,EAAO,MAAME,EAAO,EAAGA,EAAOO,EAAS,CAAC,CAAC,EAG7DqP,EAAQlP,EAAKkP,EAAO,CAAC,CAAC,QAAS1P,EAAMH,CAAO,CAAC,CAAC,EAK9C6P,EAAQlP,EACNkP,EACAjP,GACEZ,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAME,EAAOO,EAAS,EAAGgB,EAAQ,CAAC,EACzCxB,CACD,CACF,EAGD6P,EAAQlP,EAAKkP,EAAO,CAClB,CAAC,OAAQ1P,EAAMH,CAAO,EACtBD,EAAOyB,EAAQ,CAAC,EAChBzB,EAAOyB,EAAQ,CAAC,EAChB,CAAC,OAAQsO,EAAO9P,CAAO,CAC3B,CAAG,EAGD6P,EAAQlP,EAAKkP,EAAO9P,EAAO,MAAMyB,EAAQ,CAAC,CAAC,EAG3CqO,EAAQlP,EAAKkP,EAAO,CAAC,CAAC,OAAQ3P,EAAOF,CAAO,CAAC,CAAC,EAC9Ca,GAAOd,EAAQE,EAAMF,EAAO,OAAQ8P,CAAK,EAClC9P,CACT,CAMA,SAASqP,GAAiBtO,EAASC,EAAIa,EAAK,CAC1C,MAAMgB,EAAO,KACb,IAAIvD,EAAQuD,EAAK,OAAO,OAEpBmN,EAEAC,EAGJ,KAAO3Q,KACL,IACGuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC9BuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,cACjC,CAACuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,UACvB,CACA0Q,EAAanN,EAAK,OAAOvD,CAAK,EAAE,CAAC,EACjC,KACD,CAEH,OAAOC,EAiBP,SAASA,EAAME,EAAM,CAEnB,OAAKuQ,EAaDA,EAAW,UACNE,EAAYzQ,CAAI,GAEzBwQ,EAAUpN,EAAK,OAAO,QAAQ,SAC5BsH,GACEtH,EAAK,eAAe,CAClB,MAAOmN,EAAW,IAClB,IAAKnN,EAAK,IAAK,CACzB,CAAS,CACF,CACF,EACD9B,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,UAAU,EAChBS,GA5BEK,EAAIpC,CAAI,CA6BlB,CAkBD,SAAS+B,EAAM/B,EAAM,CAKnB,OAAIA,IAAS,GACJsB,EAAQ,QACbyO,GACAW,EACAF,EAAUE,EAAaD,CACxB,EAACzQ,CAAI,EAIJA,IAAS,GACJsB,EAAQ,QACb2O,GACAS,EACAF,EAAUG,EAAmBF,CAC9B,EAACzQ,CAAI,EAIDwQ,EAAUE,EAAW1Q,CAAI,EAAIyQ,EAAYzQ,CAAI,CACrD,CAgBD,SAAS2Q,EAAiB3Q,EAAM,CAC9B,OAAOsB,EAAQ,QACb6O,GACAO,EACAD,CACD,EAACzQ,CAAI,CACP,CAkBD,SAAS0Q,EAAW1Q,EAAM,CAExB,OAAOuB,EAAGvB,CAAI,CACf,CAkBD,SAASyQ,EAAYzQ,EAAM,CACzB,OAAAuQ,EAAW,UAAY,GAChBnO,EAAIpC,CAAI,CAChB,CACH,CAMA,SAASgQ,GAAiB1O,EAASC,EAAIa,EAAK,CAC1C,OAAOwO,EAYP,SAASA,EAAc5Q,EAAM,CAC3B,OAAAsB,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EACtBuP,CACR,CAYD,SAASA,EAAe7Q,EAAM,CAC5B,OAAOyJ,EAA0BzJ,CAAI,EACjCmK,GAAkB7I,EAASwP,CAAY,EAAE9Q,CAAI,EAC7C8Q,EAAa9Q,CAAI,CACtB,CAYD,SAAS8Q,EAAa9Q,EAAM,CAC1B,OAAIA,IAAS,GACJ+Q,EAAY/Q,CAAI,EAElB6I,GACLvH,EACA0P,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,EACD,EAACjR,CAAI,CACP,CAYD,SAASgR,EAAyBhR,EAAM,CACtC,OAAOyJ,EAA0BzJ,CAAI,EACjCmK,GAAkB7I,EAAS4P,CAAe,EAAElR,CAAI,EAChD+Q,EAAY/Q,CAAI,CACrB,CAYD,SAASiR,EAA2BjR,EAAM,CACxC,OAAOoC,EAAIpC,CAAI,CAChB,CAYD,SAASkR,EAAgBlR,EAAM,CAC7B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAClCgK,GACL1I,EACA6P,EACA/O,EACA,gBACA,sBACA,qBACD,EAACpC,CAAI,EAED+Q,EAAY/Q,CAAI,CACxB,CAYD,SAASmR,EAAmBnR,EAAM,CAChC,OAAOyJ,EAA0BzJ,CAAI,EACjCmK,GAAkB7I,EAASyP,CAAW,EAAE/Q,CAAI,EAC5C+Q,EAAY/Q,CAAI,CACrB,CAYD,SAAS+Q,EAAY/Q,EAAM,CACzB,OAAIA,IAAS,IACXsB,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEFa,EAAIpC,CAAI,CAChB,CACH,CAMA,SAASkQ,GAAsB5O,EAASC,EAAIa,EAAK,CAC/C,MAAMgB,EAAO,KACb,OAAOgO,EAYP,SAASA,EAAcpR,EAAM,CAC3B,OAAO2J,GAAa,KAClBvG,EACA9B,EACA+P,EACAC,EACA,YACA,kBACA,iBACD,EAACtR,CAAI,CACP,CAYD,SAASqR,EAAmBrR,EAAM,CAChC,OAAOoD,EAAK,OAAO,QAAQ,SACzBsH,GACEtH,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CACxE,CACF,EACG7B,EAAGvB,CAAI,EACPoC,EAAIpC,CAAI,CACb,CAYD,SAASsR,EAAqBtR,EAAM,CAClC,OAAOoC,EAAIpC,CAAI,CAChB,CACH,CAMA,SAASoQ,GAA2B9O,EAASC,EAAIa,EAAK,CACpD,OAAOmP,EAcP,SAASA,EAAwBvR,EAAM,CAGrC,OAAAsB,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,iBAAiB,EACvBkQ,CACR,CAcD,SAASA,EAAuBxR,EAAM,CACpC,OAAIA,IAAS,IACXsB,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,iBAAiB,EAC9BA,EAAQ,KAAK,WAAW,EACjBC,GAEFa,EAAIpC,CAAI,CAChB,CACH,CC9lBO,MAAMyR,GAAkB,CAC7B,KAAM,kBACN,SAAUC,GACV,WAAY/B,GAAS,UACvB,EAMA,SAAS+B,GAAwBpQ,EAASC,EAAIa,EAAK,CACjD,MAAMgB,EAAO,KACb,OAAOtD,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,kBAAkB,EACxBb,CACR,CAYD,SAASA,EAAKT,EAAM,CAClB,OAAIA,IAAS,IACXsB,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,YAAY,EAClBS,GAEFK,EAAIpC,CAAI,CAChB,CA6BD,SAAS+B,EAAM/B,EAAM,CAMnB,OAAOA,IAAS,IAAM,2BAA4BoD,EAAK,OAAO,WAC1DhB,EAAIpC,CAAI,EACRuB,EAAGvB,CAAI,CACZ,CACH,CC1FO,MAAM2R,GAAiB,CAC5B,KAAM,iBACN,SAAUC,GACV,WAAYjC,GAAS,UACvB,EAMA,SAASiC,GAAuBtQ,EAASC,EAAIa,EAAK,CAChD,MAAMgB,EAAO,KACb,OAAOtD,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,WAAW,EACjBS,CACR,CAGD,SAASA,EAAM/B,EAAM,CAKnB,OAAOA,IAAS,IAAM,2BAA4BoD,EAAK,OAAO,WAC1DhB,EAAIpC,CAAI,EACRuB,EAAGvB,CAAI,CACZ,CACH,CC3CO,MAAM6R,GAAa,CACxB,KAAM,aACN,SAAUC,EACZ,EAMA,SAASA,GAAmBxQ,EAASC,EAAI,CACvC,OAAOzB,EAGP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBkC,EAAalC,EAASC,EAAI,YAAY,CAC9C,CACH,CClBO,MAAMwQ,GAAgB,CAC3B,KAAM,gBACN,SAAUC,EACZ,EAMA,SAASA,GAAsB1Q,EAASC,EAAIa,EAAK,CAC/C,IAAIC,EAAO,EAEPT,EACJ,OAAO9B,EAYP,SAASA,EAAME,EAAM,CACnB,OAAAsB,EAAQ,MAAM,eAAe,EAEtBI,EAAO1B,CAAI,CACnB,CAYD,SAAS0B,EAAO1B,EAAM,CACpB,OAAA4B,EAAS5B,EACFoG,EAAQpG,CAAI,CACpB,CAYD,SAASoG,EAAQpG,EAAM,CACrB,OAAIA,IAAS4B,GACXN,EAAQ,MAAM,uBAAuB,EAC9B2Q,EAASjS,CAAI,GAElBqC,GAAQ,IAAMrC,IAAS,MAAQiF,EAAmBjF,CAAI,IACxDsB,EAAQ,KAAK,eAAe,EACrBC,EAAGvB,CAAI,GAEToC,EAAIpC,CAAI,CAChB,CAYD,SAASiS,EAASjS,EAAM,CACtB,OAAIA,IAAS4B,GACXN,EAAQ,QAAQtB,CAAI,EACpBqC,IACO4P,IAET3Q,EAAQ,KAAK,uBAAuB,EAC7BgC,EAActD,CAAI,EACrBwD,EAAalC,EAAS8E,EAAS,YAAY,EAAEpG,CAAI,EACjDoG,EAAQpG,CAAI,EACjB,CACH,CCpFO,MAAMkS,EAAO,CAClB,KAAM,OACN,SAAUC,GACV,aAAc,CACZ,SAAUC,EACX,EACD,KAAMC,EACR,EAGMC,GAAoC,CACxC,SAAUC,GACV,QAAS,EACX,EAGMC,GAAkB,CACtB,SAAUC,GACV,QAAS,EACX,EASA,SAASN,GAAkB7Q,EAASC,EAAIa,EAAK,CAC3C,MAAMgB,EAAO,KACP0B,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,IAAIsP,EACF5N,GAAQA,EAAK,CAAC,EAAE,OAAS,aACrBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EACFzC,EAAO,EACX,OAAOvC,EAGP,SAASA,EAAME,EAAM,CACnB,MAAM2S,EACJvP,EAAK,eAAe,OACnBpD,IAAS,IAAMA,IAAS,IAAMA,IAAS,GACpC,gBACA,eACN,GACE2S,IAAS,gBACL,CAACvP,EAAK,eAAe,QAAUpD,IAASoD,EAAK,eAAe,OAC5De,GAAWnE,CAAI,EACnB,CAOA,GANKoD,EAAK,eAAe,OACvBA,EAAK,eAAe,KAAOuP,EAC3BrR,EAAQ,MAAMqR,EAAM,CAClB,WAAY,EACtB,CAAS,GAECA,IAAS,gBACX,OAAArR,EAAQ,MAAM,gBAAgB,EACvBtB,IAAS,IAAMA,IAAS,GAC3BsB,EAAQ,MAAMyQ,GAAe3P,EAAKwQ,CAAQ,EAAE5S,CAAI,EAChD4S,EAAS5S,CAAI,EAEnB,GAAI,CAACoD,EAAK,WAAapD,IAAS,GAC9B,OAAAsB,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,MAAM,eAAe,EACtBO,EAAO7B,CAAI,CAErB,CACD,OAAOoC,EAAIpC,CAAI,CAChB,CAGD,SAAS6B,EAAO7B,EAAM,CACpB,OAAImE,GAAWnE,CAAI,GAAK,EAAEqC,EAAO,IAC/Bf,EAAQ,QAAQtB,CAAI,EACb6B,IAGN,CAACuB,EAAK,WAAaf,EAAO,KAC1Be,EAAK,eAAe,OACjBpD,IAASoD,EAAK,eAAe,OAC7BpD,IAAS,IAAMA,IAAS,KAE5BsB,EAAQ,KAAK,eAAe,EACrBsR,EAAS5S,CAAI,GAEfoC,EAAIpC,CAAI,CAChB,CAKD,SAAS4S,EAAS5S,EAAM,CACtB,OAAAsB,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,gBAAgB,EAC7B8B,EAAK,eAAe,OAASA,EAAK,eAAe,QAAUpD,EACpDsB,EAAQ,MACb2M,GAEA7K,EAAK,UAAYhB,EAAMyQ,EACvBvR,EAAQ,QACNgR,GACAQ,EACAC,CACD,CACF,CACF,CAGD,SAASF,EAAQ7S,EAAM,CACrB,OAAAoD,EAAK,eAAe,iBAAmB,GACvCsP,IACOI,EAAY9S,CAAI,CACxB,CAGD,SAAS+S,EAAY/S,EAAM,CACzB,OAAIsD,EAActD,CAAI,GACpBsB,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,0BAA0B,EAChCwR,GAEF1Q,EAAIpC,CAAI,CAChB,CAGD,SAAS8S,EAAY9S,EAAM,CACzB,OAAAoD,EAAK,eAAe,KAClBsP,EACAtP,EAAK,eAAe9B,EAAQ,KAAK,gBAAgB,EAAG,EAAI,EAAE,OACrDC,EAAGvB,CAAI,CACf,CACH,CAMA,SAASoS,GAAyB9Q,EAASC,EAAIa,EAAK,CAClD,MAAMgB,EAAO,KACb,OAAAA,EAAK,eAAe,WAAa,OAC1B9B,EAAQ,MAAM2M,GAAW4E,EAASG,CAAQ,EAGjD,SAASH,EAAQ7S,EAAM,CACrB,OAAAoD,EAAK,eAAe,kBAClBA,EAAK,eAAe,mBACpBA,EAAK,eAAe,iBAIfI,EACLlC,EACAC,EACA,iBACA6B,EAAK,eAAe,KAAO,CAC5B,EAACpD,CAAI,CACP,CAGD,SAASgT,EAAShT,EAAM,CACtB,OAAIoD,EAAK,eAAe,mBAAqB,CAACE,EAActD,CAAI,GAC9DoD,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChC6P,EAAiBjT,CAAI,IAE9BoD,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChC9B,EAAQ,QAAQkR,GAAiBjR,EAAI0R,CAAgB,EAAEjT,CAAI,EACnE,CAGD,SAASiT,EAAiBjT,EAAM,CAE9B,OAAAoD,EAAK,eAAe,WAAa,GAEjCA,EAAK,UAAY,OAGVI,EACLlC,EACAA,EAAQ,QAAQ4Q,EAAM3Q,EAAIa,CAAG,EAC7B,aACAgB,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAACpD,CAAI,CACP,CACH,CAMA,SAASyS,GAAenR,EAASC,EAAIa,EAAK,CACxC,MAAMgB,EAAO,KACb,OAAOI,EACLlC,EACA6E,EACA,iBACA/C,EAAK,eAAe,KAAO,CAC5B,EAGD,SAAS+C,EAAYnG,EAAM,CACzB,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO0B,GACLA,EAAK,CAAC,EAAE,OAAS,kBACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,SAAW1B,EAAK,eAAe,KACnE7B,EAAGvB,CAAI,EACPoC,EAAIpC,CAAI,CACb,CACH,CAMA,SAASqS,GAAgB/Q,EAAS,CAChCA,EAAQ,KAAK,KAAK,eAAe,IAAI,CACvC,CAMA,SAASiR,GAAiCjR,EAASC,EAAIa,EAAK,CAC1D,MAAMgB,EAAO,KAIb,OAAOI,EACLlC,EACA6E,EACA,2BACA/C,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,EAAI,CACT,EAGD,SAAS+C,EAAYnG,EAAM,CACzB,MAAM8E,EAAO1B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MAAO,CAACE,EAActD,CAAI,GACxB8E,GACAA,EAAK,CAAC,EAAE,OAAS,2BACfvD,EAAGvB,CAAI,EACPoC,EAAIpC,CAAI,CACb,CACH,CC/PO,MAAMkT,GAAkB,CAC7B,KAAM,kBACN,SAAUC,GACV,UAAWC,EACb,EAGA,SAASA,GAAyB7S,EAAQC,EAAS,CAEjD,IAAIX,EAAQU,EAAO,OAEf2H,EAEAvH,EAEAyJ,EAIJ,KAAOvK,KACL,GAAIU,EAAOV,CAAK,EAAE,CAAC,IAAM,QAAS,CAChC,GAAIU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,UAAW,CACvCqI,EAAUrI,EACV,KACD,CACGU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,cAC5Bc,EAAOd,EAEV,MAGKU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,WAE5BU,EAAO,OAAOV,EAAO,CAAC,EAEpB,CAACuK,GAAc7J,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,eAC3CuK,EAAavK,GAInB,MAAMwT,EAAU,CACd,KAAM,gBACN,MAAO,OAAO,OAAO,CAAE,EAAE9S,EAAOI,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIJ,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CACxD,EAGD,OAAAA,EAAOI,CAAI,EAAE,CAAC,EAAE,KAAO,oBAInByJ,GACF7J,EAAO,OAAOI,EAAM,EAAG,CAAC,QAAS0S,EAAS7S,CAAO,CAAC,EAClDD,EAAO,OAAO6J,EAAa,EAAG,EAAG,CAAC,OAAQ7J,EAAO2H,CAAO,EAAE,CAAC,EAAG1H,CAAO,CAAC,EACtED,EAAO2H,CAAO,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAA,EAAI3H,EAAO6J,CAAU,EAAE,CAAC,EAAE,GAAG,GAEpE7J,EAAO2H,CAAO,EAAE,CAAC,EAAImL,EAIvB9S,EAAO,KAAK,CAAC,OAAQ8S,EAAS7S,CAAO,CAAC,EAC/BD,CACT,CAMA,SAAS4S,GAAwB7R,EAASC,EAAIa,EAAK,CACjD,MAAMgB,EAAO,KAEb,IAAIxB,EACJ,OAAO9B,EAaP,SAASA,EAAME,EAAM,CACnB,IAAIH,EAAQuD,EAAK,OAAO,OAEpBkQ,EAEJ,KAAOzT,KAGL,GACEuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC/BuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC/BuD,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,UAC/B,CACAyT,EAAYlQ,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,OAAS,YAC3C,KACD,CAKH,MAAI,CAACuD,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,IAAMA,EAAK,WAAakQ,IAC3DhS,EAAQ,MAAM,mBAAmB,EACjCM,EAAS5B,EACF0B,EAAO1B,CAAI,GAEboC,EAAIpC,CAAI,CAChB,CAaD,SAAS0B,EAAO1B,EAAM,CACpB,OAAAsB,EAAQ,MAAM,2BAA2B,EAClCO,EAAO7B,CAAI,CACnB,CAaD,SAAS6B,EAAO7B,EAAM,CACpB,OAAIA,IAAS4B,GACXN,EAAQ,QAAQtB,CAAI,EACb6B,IAETP,EAAQ,KAAK,2BAA2B,EACjCgC,EAActD,CAAI,EACrBwD,EAAalC,EAASS,EAAO,YAAY,EAAE/B,CAAI,EAC/C+B,EAAM/B,CAAI,EACf,CAaD,SAAS+B,EAAM/B,EAAM,CACnB,OAAIA,IAAS,MAAQiF,EAAmBjF,CAAI,GAC1CsB,EAAQ,KAAK,mBAAmB,EACzBC,EAAGvB,CAAI,GAEToC,EAAIpC,CAAI,CAChB,CACH,CCrLA,MAAMuT,GAAY,CAAC,OAAQ,QAAS,SAAU,KAAK,EAM5C,SAASC,GAAeC,EAAK,CAClC,MAAMC,GAAOD,GAAO,IAAI,KAAM,EACxBE,EAAQD,EAAI,OAAO,CAAC,EAE1B,GAAIC,IAAU,KAAOA,IAAU,IAC7B,OAAOD,EAGT,MAAME,EAAQF,EAAI,QAAQ,GAAG,EAC7B,GAAIE,IAAU,GACZ,OAAOF,EAGT,IAAI7T,EAAQ,GAEZ,KAAO,EAAEA,EAAQ0T,GAAU,QAAQ,CACjC,MAAMM,EAAWN,GAAU1T,CAAK,EAEhC,GACE+T,IAAUC,EAAS,QACnBH,EAAI,MAAM,EAAGG,EAAS,MAAM,EAAE,YAAW,IAAOA,EAEhD,OAAOH,CAEV,CAQD,OANA7T,EAAQ6T,EAAI,QAAQ,GAAG,EACnB7T,IAAU,IAAM+T,EAAQ/T,IAI5BA,EAAQ6T,EAAI,QAAQ,GAAG,EACnB7T,IAAU,IAAM+T,EAAQ/T,GACnB6T,EAIF,oBACT;;;;;GCrCA,IAAAI,GAAiB,SAAmBC,EAAK,CACvC,OAAOA,GAAO,MAAQA,EAAI,aAAe,MACvC,OAAOA,EAAI,YAAY,UAAa,YAAcA,EAAI,YAAY,SAASA,CAAG,CAClF,kBC0BO,SAASC,GAAkBrU,EAAO,CAEvC,MAAI,CAACA,GAAS,OAAOA,GAAU,SACtB,GAIL,aAAcA,GAAS,SAAUA,EAC5BsU,GAAStU,EAAM,QAAQ,EAI5B,UAAWA,GAAS,QAASA,EACxBsU,GAAStU,CAAK,EAInB,SAAUA,GAAS,WAAYA,EAC1BsC,GAAMtC,CAAK,EAIb,EACT,CAMA,SAASsC,GAAMA,EAAO,CACpB,OAAOpC,GAAMoC,GAASA,EAAM,IAAI,EAAI,IAAMpC,GAAMoC,GAASA,EAAM,MAAM,CACvE,CAMA,SAASgS,GAASC,EAAK,CACrB,OAAOjS,GAAMiS,GAAOA,EAAI,KAAK,EAAI,IAAMjS,GAAMiS,GAAOA,EAAI,GAAG,CAC7D,CAMA,SAASrU,GAAMF,EAAO,CACpB,OAAOA,GAAS,OAAOA,GAAU,SAAWA,EAAQ,CACtD,CCvEO,MAAMwU,UAAqB,KAAM,CAmBtC,YAAYC,EAAQC,EAAOC,EAAQ,CAEjC,MAAMC,EAAQ,CAAC,KAAM,IAAI,EAEzB,IAAIN,EAAW,CAEb,MAAO,CAAC,KAAM,KAAM,OAAQ,IAAI,EAEhC,IAAK,CAAC,KAAM,KAAM,OAAQ,IAAI,CAC/B,EASD,GAPA,MAAO,EAEH,OAAOI,GAAU,WACnBC,EAASD,EACTA,EAAQ,QAGN,OAAOC,GAAW,SAAU,CAC9B,MAAMzU,EAAQyU,EAAO,QAAQ,GAAG,EAE5BzU,IAAU,GACZ0U,EAAM,CAAC,EAAID,GAEXC,EAAM,CAAC,EAAID,EAAO,MAAM,EAAGzU,CAAK,EAChC0U,EAAM,CAAC,EAAID,EAAO,MAAMzU,EAAQ,CAAC,EAEpC,CAEGwU,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAM,WAGRJ,EAAWI,EAAM,UAIZ,UAAWA,GAAS,QAASA,EAGpCJ,EAAWI,GAGJ,SAAUA,GAAS,WAAYA,KAEtCJ,EAAS,MAAQI,IAWrB,KAAK,KAAOL,GAAkBK,CAAK,GAAK,MAOxC,KAAK,QAAU,OAAOD,GAAW,SAAWA,EAAO,QAAUA,EAU7D,KAAK,MAAQ,GAET,OAAOA,GAAW,UAAYA,EAAO,QACvC,KAAK,MAAQA,EAAO,OAUtB,KAAK,OAAS,KAAK,QAYnB,KAAK,MAOL,KAAK,KAAOH,EAAS,MAAM,KAO3B,KAAK,OAASA,EAAS,MAAM,OAO7B,KAAK,SAAWA,EAOhB,KAAK,OAASM,EAAM,CAAC,EAOrB,KAAK,OAASA,EAAM,CAAC,EAOrB,KAAK,KAYL,KAAK,OAOL,KAAK,SAUL,KAAK,IAOL,KAAK,IAEN,CACH,CAEAJ,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,OAAS,GAChCA,EAAa,UAAU,QAAU,GACjCA,EAAa,UAAU,MAAQ,GAC/BA,EAAa,UAAU,MAAQ,KAC/BA,EAAa,UAAU,OAAS,KAChCA,EAAa,UAAU,KAAO,KAC9BA,EAAa,UAAU,OAAS,KAChCA,EAAa,UAAU,OAAS,KAChCA,EAAa,UAAU,SAAW,KC7K3B,MAAMK,GAAO,CAAC,SAAAC,GAAU,QAAAC,GAAS,QAAAC,GAAS,KAAAC,GAAM,IAAK,GAAG,EAc/D,SAASH,GAASD,EAAMK,EAAK,CAC3B,GAAIA,IAAQ,QAAa,OAAOA,GAAQ,SACtC,MAAM,IAAI,UAAU,iCAAiC,EAGvDC,GAAWN,CAAI,EACf,IAAI1U,EAAQ,EACRmB,EAAM,GACNpB,EAAQ2U,EAAK,OAEbO,EAEJ,GAAIF,IAAQ,QAAaA,EAAI,SAAW,GAAKA,EAAI,OAASL,EAAK,OAAQ,CACrE,KAAO3U,KACL,GAAI2U,EAAK,WAAW3U,CAAK,IAAM,IAG7B,GAAIkV,EAAc,CAChBjV,EAAQD,EAAQ,EAChB,KACD,OACQoB,EAAM,IAGf8T,EAAe,GACf9T,EAAMpB,EAAQ,GAIlB,OAAOoB,EAAM,EAAI,GAAKuT,EAAK,MAAM1U,EAAOmB,CAAG,CAC5C,CAED,GAAI4T,IAAQL,EACV,MAAO,GAGT,IAAIQ,EAAmB,GACnBC,EAAWJ,EAAI,OAAS,EAE5B,KAAOhV,KACL,GAAI2U,EAAK,WAAW3U,CAAK,IAAM,IAG7B,GAAIkV,EAAc,CAChBjV,EAAQD,EAAQ,EAChB,KACD,OAEGmV,EAAmB,IAGrBD,EAAe,GACfC,EAAmBnV,EAAQ,GAGzBoV,EAAW,KAETT,EAAK,WAAW3U,CAAK,IAAMgV,EAAI,WAAWI,GAAU,EAClDA,EAAW,IAGbhU,EAAMpB,IAKRoV,EAAW,GACXhU,EAAM+T,IAMd,OAAIlV,IAAUmB,EACZA,EAAM+T,EACG/T,EAAM,IACfA,EAAMuT,EAAK,QAGNA,EAAK,MAAM1U,EAAOmB,CAAG,CAC9B,CAUA,SAASyT,GAAQF,EAAM,CAGrB,GAFAM,GAAWN,CAAI,EAEXA,EAAK,SAAW,EAClB,MAAO,IAGT,IAAIvT,EAAM,GACNpB,EAAQ2U,EAAK,OAEbU,EAGJ,KAAO,EAAErV,GACP,GAAI2U,EAAK,WAAW3U,CAAK,IAAM,IAC7B,GAAIqV,EAAgB,CAClBjU,EAAMpB,EACN,KACD,OACSqV,IAEVA,EAAiB,IAIrB,OAAOjU,EAAM,EACTuT,EAAK,WAAW,CAAC,IAAM,GACrB,IACA,IACFvT,IAAQ,GAAKuT,EAAK,WAAW,CAAC,IAAM,GACpC,KACAA,EAAK,MAAM,EAAGvT,CAAG,CACvB,CAUA,SAAS0T,GAAQH,EAAM,CACrBM,GAAWN,CAAI,EAEf,IAAI3U,EAAQ2U,EAAK,OAEbvT,EAAM,GACNkU,EAAY,EACZC,EAAW,GAGXC,EAAc,EAEdH,EAEJ,KAAOrV,KAAS,CACd,MAAMG,EAAOwU,EAAK,WAAW3U,CAAK,EAElC,GAAIG,IAAS,GAAc,CAGzB,GAAIkV,EAAgB,CAClBC,EAAYtV,EAAQ,EACpB,KACD,CAED,QACD,CAEGoB,EAAM,IAGRiU,EAAiB,GACjBjU,EAAMpB,EAAQ,GAGZG,IAAS,GAEPoV,EAAW,EACbA,EAAWvV,EACFwV,IAAgB,IACzBA,EAAc,GAEPD,EAAW,KAGpBC,EAAc,GAEjB,CAED,OACED,EAAW,GACXnU,EAAM,GAENoU,IAAgB,GAEfA,IAAgB,GAAKD,IAAanU,EAAM,GAAKmU,IAAaD,EAAY,EAEhE,GAGFX,EAAK,MAAMY,EAAUnU,CAAG,CACjC,CAUA,SAAS2T,MAAQU,EAAU,CACzB,IAAIzV,EAAQ,GAER0V,EAEJ,KAAO,EAAE1V,EAAQyV,EAAS,QACxBR,GAAWQ,EAASzV,CAAK,CAAC,EAEtByV,EAASzV,CAAK,IAChB0V,EACEA,IAAW,OAAYD,EAASzV,CAAK,EAAI0V,EAAS,IAAMD,EAASzV,CAAK,GAI5E,OAAO0V,IAAW,OAAY,IAAMC,GAAUD,CAAM,CACtD,CAYA,SAASC,GAAUhB,EAAM,CACvBM,GAAWN,CAAI,EAEf,MAAMiB,EAAWjB,EAAK,WAAW,CAAC,IAAM,GAGxC,IAAI7U,EAAQ+V,GAAgBlB,EAAM,CAACiB,CAAQ,EAE3C,OAAI9V,EAAM,SAAW,GAAK,CAAC8V,IACzB9V,EAAQ,KAGNA,EAAM,OAAS,GAAK6U,EAAK,WAAWA,EAAK,OAAS,CAAC,IAAM,KAC3D7U,GAAS,KAGJ8V,EAAW,IAAM9V,EAAQA,CAClC,CAYA,SAAS+V,GAAgBlB,EAAMmB,EAAgB,CAC7C,IAAI/V,EAAS,GACTgW,EAAoB,EACpBC,EAAY,GACZC,EAAO,EACPjW,EAAQ,GAERG,EAEA+V,EAEJ,KAAO,EAAElW,GAAS2U,EAAK,QAAQ,CAC7B,GAAI3U,EAAQ2U,EAAK,OACfxU,EAAOwU,EAAK,WAAW3U,CAAK,MACvB,IAAIG,IAAS,GAClB,MAEAA,EAAO,GAGT,GAAIA,IAAS,GAAc,CACzB,GAAI,EAAA6V,IAAchW,EAAQ,GAAKiW,IAAS,GAEjC,GAAID,IAAchW,EAAQ,GAAKiW,IAAS,EAAG,CAChD,GACElW,EAAO,OAAS,GAChBgW,IAAsB,GACtBhW,EAAO,WAAWA,EAAO,OAAS,CAAC,IAAM,IACzCA,EAAO,WAAWA,EAAO,OAAS,CAAC,IAAM,IAEzC,GAAIA,EAAO,OAAS,GAGlB,GAFAmW,EAAiBnW,EAAO,YAAY,GAAG,EAEnCmW,IAAmBnW,EAAO,OAAS,EAAG,CACpCmW,EAAiB,GACnBnW,EAAS,GACTgW,EAAoB,IAEpBhW,EAASA,EAAO,MAAM,EAAGmW,CAAc,EACvCH,EAAoBhW,EAAO,OAAS,EAAIA,EAAO,YAAY,GAAG,GAGhEiW,EAAYhW,EACZiW,EAAO,EACP,QACD,UACQlW,EAAO,OAAS,EAAG,CAC5BA,EAAS,GACTgW,EAAoB,EACpBC,EAAYhW,EACZiW,EAAO,EACP,QACD,EAGCH,IACF/V,EAASA,EAAO,OAAS,EAAIA,EAAS,MAAQ,KAC9CgW,EAAoB,EAE9B,MACYhW,EAAO,OAAS,EAClBA,GAAU,IAAM4U,EAAK,MAAMqB,EAAY,EAAGhW,CAAK,EAE/CD,EAAS4U,EAAK,MAAMqB,EAAY,EAAGhW,CAAK,EAG1C+V,EAAoB/V,EAAQgW,EAAY,EAG1CA,EAAYhW,EACZiW,EAAO,CACR,MAAU9V,IAAS,IAAgB8V,EAAO,GACzCA,IAEAA,EAAO,EAEV,CAED,OAAOlW,CACT,CAUA,SAASkV,GAAWN,EAAM,CACxB,GAAI,OAAOA,GAAS,SAClB,MAAM,IAAI,UACR,mCAAqC,KAAK,UAAUA,CAAI,CACzD,CAEL,CChaO,MAAMwB,GAAO,CAAC,IAAAC,EAAG,EAExB,SAASA,IAAM,CACb,MAAO,GACT,CCoBO,SAASC,GAAMC,EAAe,CACnC,OACEA,IAAkB,MAClB,OAAOA,GAAkB,UAEzBA,EAAc,MAEdA,EAAc,MAElB,CCxBO,SAASC,GAAU5B,EAAM,CAC9B,GAAI,OAAOA,GAAS,SAClBA,EAAO,IAAI,IAAIA,CAAI,UACV,CAAC0B,GAAM1B,CAAI,EAAG,CAEvB,MAAM6B,EAAQ,IAAI,UAChB,+EACE7B,EACA,GACH,EACD,MAAA6B,EAAM,KAAO,uBACPA,CACP,CAED,GAAI7B,EAAK,WAAa,QAAS,CAE7B,MAAM6B,EAAQ,IAAI,UAAU,gCAAgC,EAC5D,MAAAA,EAAM,KAAO,yBACPA,CACP,CAED,OAAOC,GAAoB9B,CAAI,CACjC,CAUA,SAAS8B,GAAoB5C,EAAK,CAChC,GAAIA,EAAI,WAAa,GAAI,CAEvB,MAAM2C,EAAQ,IAAI,UAChB,sDACD,EACD,MAAAA,EAAM,KAAO,4BACPA,CACP,CAED,MAAME,EAAW7C,EAAI,SACrB,IAAI7T,EAAQ,GAEZ,KAAO,EAAEA,EAAQ0W,EAAS,QACxB,GACEA,EAAS,WAAW1W,CAAK,IAAM,IAC/B0W,EAAS,WAAW1W,EAAQ,CAAC,IAAM,GACnC,CACA,MAAM2W,EAAQD,EAAS,WAAW1W,EAAQ,CAAC,EAC3C,GAAI2W,IAAU,IAAgBA,IAAU,IAAe,CAErD,MAAMH,EAAQ,IAAI,UAChB,qDACD,EACD,MAAAA,EAAM,KAAO,4BACPA,CACP,CACF,CAGH,OAAO,mBAAmBE,CAAQ,CACpC,CCuBA,MAAME,GAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,SAAS,EAEnE,MAAMC,EAAM,CAuBjB,YAAY/W,EAAO,CAEjB,IAAIgX,EAEChX,EAEM,OAAOA,GAAU,UAAYuM,GAAOvM,CAAK,EAClDgX,EAAU,CAAC,MAAAhX,CAAK,EACPuW,GAAMvW,CAAK,EACpBgX,EAAU,CAAC,KAAMhX,CAAK,EAEtBgX,EAAUhX,EANVgX,EAAU,CAAE,EAiBd,KAAK,KAAO,CAAE,EAOd,KAAK,SAAW,CAAE,EASlB,KAAK,QAAU,CAAE,EAOjB,KAAK,IAAMX,GAAK,IAAK,EAQrB,KAAK,MAYL,KAAK,OAUL,KAAK,OAUL,KAAK,IAIL,IAAInW,EAAQ,GAEZ,KAAO,EAAEA,EAAQ4W,GAAM,QAAQ,CAC7B,MAAMG,EAAOH,GAAM5W,CAAK,EAKtB+W,KAAQD,GACRA,EAAQC,CAAI,IAAM,QAClBD,EAAQC,CAAI,IAAM,OAGlB,KAAKA,CAAI,EAAIA,IAAS,UAAY,CAAC,GAAGD,EAAQC,CAAI,CAAC,EAAID,EAAQC,CAAI,EAEtE,CAGD,IAAIA,EAGJ,IAAKA,KAAQD,EAENF,GAAM,SAASG,CAAI,IAEtB,KAAKA,CAAI,EAAID,EAAQC,CAAI,EAG9B,CAOD,IAAI,MAAO,CACT,OAAO,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,CAC5C,CAWD,IAAI,KAAKpC,EAAM,CACT0B,GAAM1B,CAAI,IACZA,EAAO4B,GAAU5B,CAAI,GAGvBqC,GAAerC,EAAM,MAAM,EAEvB,KAAK,OAASA,GAChB,KAAK,QAAQ,KAAKA,CAAI,CAEzB,CAKD,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SAAWA,GAAK,QAAQ,KAAK,IAAI,EAAI,MAClE,CAOD,IAAI,QAAQE,EAAS,CACnBI,GAAW,KAAK,SAAU,SAAS,EACnC,KAAK,KAAON,GAAK,KAAKE,GAAW,GAAI,KAAK,QAAQ,CACnD,CAKD,IAAI,UAAW,CACb,OAAO,OAAO,KAAK,MAAS,SAAWF,GAAK,SAAS,KAAK,IAAI,EAAI,MACnE,CASD,IAAI,SAASC,EAAU,CACrBoC,GAAepC,EAAU,UAAU,EACnCqC,GAAWrC,EAAU,UAAU,EAC/B,KAAK,KAAOD,GAAK,KAAK,KAAK,SAAW,GAAIC,CAAQ,CACnD,CAKD,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SAAWD,GAAK,QAAQ,KAAK,IAAI,EAAI,MAClE,CASD,IAAI,QAAQG,EAAS,CAInB,GAHAmC,GAAWnC,EAAS,SAAS,EAC7BG,GAAW,KAAK,QAAS,SAAS,EAE9BH,EAAS,CACX,GAAIA,EAAQ,WAAW,CAAC,IAAM,GAC5B,MAAM,IAAI,MAAM,+BAA+B,EAGjD,GAAIA,EAAQ,SAAS,IAAK,CAAC,EACzB,MAAM,IAAI,MAAM,wCAAwC,CAE3D,CAED,KAAK,KAAOH,GAAK,KAAK,KAAK,QAAS,KAAK,MAAQG,GAAW,GAAG,CAChE,CAKD,IAAI,MAAO,CACT,OAAO,OAAO,KAAK,MAAS,SACxBH,GAAK,SAAS,KAAK,KAAM,KAAK,OAAO,EACrC,MACL,CASD,IAAI,KAAKuC,EAAM,CACbF,GAAeE,EAAM,MAAM,EAC3BD,GAAWC,EAAM,MAAM,EACvB,KAAK,KAAOvC,GAAK,KAAK,KAAK,SAAW,GAAIuC,GAAQ,KAAK,SAAW,GAAG,CACtE,CAWD,SAASC,EAAU,CACjB,OAAQ,KAAK,OAAS,IAAI,SAASA,GAAY,MAAS,CACzD,CAkBD,QAAQ5C,EAAQC,EAAOC,EAAQ,CAC7B,MAAM2C,EAAU,IAAI9C,EAAaC,EAAQC,EAAOC,CAAM,EAEtD,OAAI,KAAK,OACP2C,EAAQ,KAAO,KAAK,KAAO,IAAMA,EAAQ,KACzCA,EAAQ,KAAO,KAAK,MAGtBA,EAAQ,MAAQ,GAEhB,KAAK,SAAS,KAAKA,CAAO,EAEnBA,CACR,CAkBD,KAAK7C,EAAQC,EAAOC,EAAQ,CAC1B,MAAM2C,EAAU,KAAK,QAAQ7C,EAAQC,EAAOC,CAAM,EAElD,OAAA2C,EAAQ,MAAQ,KAETA,CACR,CAsBD,KAAK7C,EAAQC,EAAOC,EAAQ,CAC1B,MAAM2C,EAAU,KAAK,QAAQ7C,EAAQC,EAAOC,CAAM,EAElD,MAAA2C,EAAQ,MAAQ,GAEVA,CACP,CACH,CAYA,SAASH,GAAWI,EAAMtK,EAAM,CAC9B,GAAIsK,GAAQA,EAAK,SAAS1C,GAAK,GAAG,EAChC,MAAM,IAAI,MACR,IAAM5H,EAAO,uCAAyC4H,GAAK,IAAM,GAClE,CAEL,CAYA,SAASqC,GAAeK,EAAMtK,EAAM,CAClC,GAAI,CAACsK,EACH,MAAM,IAAI,MAAM,IAAMtK,EAAO,mBAAmB,CAEpD,CAYA,SAASkI,GAAWN,EAAM5H,EAAM,CAC9B,GAAI,CAAC4H,EACH,MAAM,IAAI,MAAM,YAAc5H,EAAO,iCAAiC,CAE1E,CAUA,SAASV,GAAOvM,EAAO,CACrB,OAAOwX,GAAWxX,CAAK,CACzB,CChgBO,SAASyX,GAAKf,EAAO,CAC1B,GAAIA,EACF,MAAMA,CAEV,CCTA,IAAIgB,GAAS,OAAO,UAAU,eAC1BC,GAAQ,OAAO,UAAU,SACzBC,GAAiB,OAAO,eACxBC,GAAO,OAAO,yBAEdC,GAAU,SAAiBC,EAAK,CACnC,OAAI,OAAO,MAAM,SAAY,WACrB,MAAM,QAAQA,CAAG,EAGlBJ,GAAM,KAAKI,CAAG,IAAM,gBAC5B,EAEIC,GAAgB,SAAuB5D,EAAK,CAC/C,GAAI,CAACA,GAAOuD,GAAM,KAAKvD,CAAG,IAAM,kBAC/B,MAAO,GAGR,IAAI6D,EAAoBP,GAAO,KAAKtD,EAAK,aAAa,EAClD8D,EAAmB9D,EAAI,aAAeA,EAAI,YAAY,WAAasD,GAAO,KAAKtD,EAAI,YAAY,UAAW,eAAe,EAE7H,GAAIA,EAAI,aAAe,CAAC6D,GAAqB,CAACC,EAC7C,MAAO,GAKR,IAAIC,EACJ,IAAKA,KAAO/D,EAAK,CAEjB,OAAO,OAAO+D,EAAQ,KAAeT,GAAO,KAAKtD,EAAK+D,CAAG,CAC1D,EAGIC,GAAc,SAAqBC,EAAQrB,EAAS,CACnDY,IAAkBZ,EAAQ,OAAS,YACtCY,GAAeS,EAAQrB,EAAQ,KAAM,CACpC,WAAY,GACZ,aAAc,GACd,MAAOA,EAAQ,SACf,SAAU,EACb,CAAG,EAEDqB,EAAOrB,EAAQ,IAAI,EAAIA,EAAQ,QAEjC,EAGIsB,GAAc,SAAqBlE,EAAKnH,EAAM,CACjD,GAAIA,IAAS,YACZ,GAAKyK,GAAO,KAAKtD,EAAKnH,CAAI,GAEnB,GAAI4K,GAGV,OAAOA,GAAKzD,EAAKnH,CAAI,EAAE,UAJvB,QAQF,OAAOmH,EAAInH,CAAI,CAChB,EAEAsL,GAAiB,SAASA,GAAS,CAClC,IAAIvB,EAAS/J,EAAMuL,EAAKC,EAAMC,EAAaC,EACvCN,EAAS,UAAU,CAAC,EACpBO,EAAI,EACJC,EAAS,UAAU,OACnBC,EAAO,GAaX,IAVI,OAAOT,GAAW,YACrBS,EAAOT,EACPA,EAAS,UAAU,CAAC,GAAK,GAEzBO,EAAI,IAEDP,GAAU,MAAS,OAAOA,GAAW,UAAY,OAAOA,GAAW,cACtEA,EAAS,CAAA,GAGHO,EAAIC,EAAQ,EAAED,EAGpB,GAFA5B,EAAU,UAAU4B,CAAC,EAEjB5B,GAAW,KAEd,IAAK/J,KAAQ+J,EACZwB,EAAMF,GAAYD,EAAQpL,CAAI,EAC9BwL,EAAOH,GAAYtB,EAAS/J,CAAI,EAG5BoL,IAAWI,IAEVK,GAAQL,IAAST,GAAcS,CAAI,IAAMC,EAAcZ,GAAQW,CAAI,KAClEC,GACHA,EAAc,GACdC,EAAQH,GAAOV,GAAQU,CAAG,EAAIA,EAAM,CAAA,GAEpCG,EAAQH,GAAOR,GAAcQ,CAAG,EAAIA,EAAM,CAAA,EAI3CJ,GAAYC,EAAQ,CAAE,KAAMpL,EAAM,SAAUsL,EAAOO,EAAMH,EAAOF,CAAI,CAAG,CAAA,GAG7D,OAAOA,EAAS,KAC1BL,GAAYC,EAAQ,CAAE,KAAMpL,EAAM,SAAUwL,CAAI,CAAE,GAQvD,OAAOJ,CACR,kBCpHe,SAASL,GAAchY,EAAO,CAC5C,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAC1C,MAAO,GAGR,MAAM+Y,EAAY,OAAO,eAAe/Y,CAAK,EAC7C,OAAQ+Y,IAAc,MAAQA,IAAc,OAAO,WAAa,OAAO,eAAeA,CAAS,IAAM,OAAS,EAAE,OAAO,eAAe/Y,IAAU,EAAE,OAAO,YAAYA,EACtK,CCUO,SAASgZ,IAAS,CAEvB,MAAMC,EAAM,CAAE,EAERC,EAAW,CAAC,IAAAC,EAAK,IAAAhY,CAAG,EAE1B,OAAO+X,EAGP,SAASC,KAAOC,EAAQ,CACtB,IAAIC,EAAkB,GAEtB,MAAMC,EAAWF,EAAO,IAAK,EAE7B,GAAI,OAAOE,GAAa,WACtB,MAAM,IAAI,UAAU,2CAA6CA,CAAQ,EAG3E9Y,EAAK,KAAM,GAAG4Y,CAAM,EAQpB,SAAS5Y,EAAKkW,KAAU6C,EAAQ,CAC9B,MAAMC,EAAKP,EAAI,EAAEI,CAAe,EAChC,IAAInZ,EAAQ,GAEZ,GAAIwW,EAAO,CACT4C,EAAS5C,CAAK,EACd,MACD,CAGD,KAAO,EAAExW,EAAQkZ,EAAO,SAClBG,EAAOrZ,CAAK,IAAM,MAAQqZ,EAAOrZ,CAAK,IAAM,UAC9CqZ,EAAOrZ,CAAK,EAAIkZ,EAAOlZ,CAAK,GAKhCkZ,EAASG,EAGLC,EACFC,GAAKD,EAAIhZ,CAAI,EAAE,GAAG+Y,CAAM,EAExBD,EAAS,KAAM,GAAGC,CAAM,CAE3B,CACF,CAGD,SAASpY,EAAIuY,EAAY,CACvB,GAAI,OAAOA,GAAe,WACxB,MAAM,IAAI,UACR,+CAAiDA,CAClD,EAGH,OAAAT,EAAI,KAAKS,CAAU,EACZR,CACR,CACH,CAUO,SAASO,GAAKE,EAAYL,EAAU,CAEzC,IAAIM,EAEJ,OAAOC,EAQP,SAASA,KAAWrS,EAAY,CAC9B,MAAMsS,EAAoBH,EAAW,OAASnS,EAAW,OAEzD,IAAIvH,EAEA6Z,GACFtS,EAAW,KAAKuS,CAAI,EAGtB,GAAI,CACF9Z,EAAS0Z,EAAW,MAAM,KAAMnS,CAAU,CAC3C,OAAQkP,EAAO,CACd,MAAMsD,EAAkCtD,EAMxC,GAAIoD,GAAqBF,EACvB,MAAMI,EAGR,OAAOD,EAAKC,CAAS,CACtB,CAEIF,IACC7Z,aAAkB,QACpBA,EAAO,KAAKga,EAAMF,CAAI,EACb9Z,aAAkB,MAC3B8Z,EAAK9Z,CAAM,EAEXga,EAAKha,CAAM,EAGhB,CAMD,SAAS8Z,EAAKrD,KAAU6C,EAAQ,CACzBK,IACHA,EAAS,GACTN,EAAS5C,EAAO,GAAG6C,CAAM,EAE5B,CAOD,SAASU,EAAKja,EAAO,CACnB+Z,EAAK,KAAM/Z,CAAK,CACjB,CACH,CCnIO,MAAMka,GAAUC,GAAM,EAAC,OAAQ,EAEhCC,GAAM,CAAE,EAAC,eAMf,SAASD,IAAO,CACd,MAAME,EAAerB,GAAQ,EAEvBsB,EAAY,CAAE,EAEpB,IAAIC,EAAY,CAAE,EAEdC,EACAC,EAAc,GAIlB,OAAAC,EAAU,KAAOzT,EACjByT,EAAU,OAAS,OACnBA,EAAU,SAAW,OAGrBA,EAAU,OAASC,EAGnBD,EAAU,UAAYJ,EAEtBI,EAAU,IAAMvZ,EAGhBuZ,EAAU,MAAQE,EAClBF,EAAU,UAAYG,EAEtBH,EAAU,IAAMvB,EAChBuB,EAAU,QAAUI,EAEpBJ,EAAU,QAAUK,EACpBL,EAAU,YAAcM,EAGjBN,EAIP,SAASA,GAAY,CACnB,MAAMO,EAAcd,GAAM,EAC1B,IAAIja,EAAQ,GAEZ,KAAO,EAAEA,EAAQoa,EAAU,QACzBW,EAAY,IAAI,GAAGX,EAAUpa,CAAK,CAAC,EAGrC,OAAA+a,EAAY,KAAK1C,GAAO,GAAM,CAAE,EAAEgC,CAAS,CAAC,EAErCU,CACR,CAOD,SAAShU,EAAKkR,EAAKnY,EAAO,CACxB,OAAI,OAAOmY,GAAQ,SAEb,UAAU,SAAW,GACvB+C,GAAe,OAAQV,CAAM,EAC7BD,EAAUpC,CAAG,EAAInY,EACV0a,GAIDN,GAAI,KAAKG,EAAWpC,CAAG,GAAKoC,EAAUpC,CAAG,GAAM,KAIrDA,GACF+C,GAAe,OAAQV,CAAM,EAC7BD,EAAYpC,EACLuC,GAIFH,CACR,CAGD,SAASI,GAAS,CAChB,GAAIH,EACF,OAAOE,EAGT,KAAO,EAAED,EAAcH,EAAU,QAAQ,CACvC,KAAM,CAACa,EAAU,GAAGnE,CAAO,EAAIsD,EAAUG,CAAW,EAEpD,GAAIzD,EAAQ,CAAC,IAAM,GACjB,SAGEA,EAAQ,CAAC,IAAM,KACjBA,EAAQ,CAAC,EAAI,QAIf,MAAMoE,EAAcD,EAAS,KAAKT,EAAW,GAAG1D,CAAO,EAEnD,OAAOoE,GAAgB,YACzBf,EAAa,IAAIe,CAAW,CAE/B,CAED,OAAAZ,EAAS,GACTC,EAAc,OAAO,kBAEdC,CACR,CAOD,SAASvZ,EAAInB,KAAUgX,EAAS,CAE9B,IAAIqE,EAIJ,GAFAH,GAAe,MAAOV,CAAM,EAExBxa,GAAU,KAEP,GAAI,OAAOA,GAAU,WAC1Bsb,EAAUtb,EAAO,GAAGgX,CAAO,UAClB,OAAOhX,GAAU,SACtB,MAAM,QAAQA,CAAK,EACrBub,EAAQvb,CAAK,EAEbwb,EAAUxb,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,EAGlE,OAAIqb,IACFd,EAAU,SAAW,OAAO,OAAOA,EAAU,UAAY,CAAE,EAAEc,CAAQ,GAGhEX,EAMP,SAASe,EAAIzb,EAAO,CAClB,GAAI,OAAOA,GAAU,WACnBsb,EAAUtb,CAAK,UACN,OAAOA,GAAU,SAC1B,GAAI,MAAM,QAAQA,CAAK,EAAG,CACxB,KAAM,CAAC0b,EAAQ,GAAG1E,CAAO,EAAIhX,EAC7Bsb,EAAUI,EAAQ,GAAG1E,CAAO,CACtC,MACUwE,EAAUxb,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,CAEnE,CAMD,SAASwb,EAAUvb,EAAQ,CACzBsb,EAAQtb,EAAO,OAAO,EAElBA,EAAO,WACTob,EAAW,OAAO,OAAOA,GAAY,CAAE,EAAEpb,EAAO,QAAQ,EAE3D,CAMD,SAASsb,EAAQI,EAAS,CACxB,IAAIzb,EAAQ,GAEZ,GAAIyb,GAAY,KAET,GAAI,MAAM,QAAQA,CAAO,EAC9B,KAAO,EAAEzb,EAAQyb,EAAQ,QAAQ,CAC/B,MAAMC,EAAQD,EAAQzb,CAAK,EAC3Bub,EAAIG,CAAK,CACV,KAED,OAAM,IAAI,UAAU,oCAAsCD,EAAU,GAAG,CAE1E,CAOD,SAASL,EAAUI,EAAQ1b,EAAO,CAChC,IAAIE,EAAQ,GAER2b,EAEJ,KAAO,EAAE3b,EAAQoa,EAAU,QACzB,GAAIA,EAAUpa,CAAK,EAAE,CAAC,IAAMwb,EAAQ,CAClCG,EAAQvB,EAAUpa,CAAK,EACvB,KACD,CAGC2b,GACEC,GAAWD,EAAM,CAAC,CAAC,GAAKC,GAAW9b,CAAK,IAC1CA,EAAQuY,GAAO,GAAMsD,EAAM,CAAC,EAAG7b,CAAK,GAGtC6b,EAAM,CAAC,EAAI7b,GAGXsa,EAAU,KAAK,CAAC,GAAG,SAAS,CAAC,CAEhC,CACF,CAGD,SAASM,EAAMmB,EAAK,CAClBrB,EAAU,OAAQ,EAClB,MAAMsB,EAAOC,GAAMF,CAAG,EAChBG,EAASxB,EAAU,OAGzB,OAFAyB,GAAa,QAASD,CAAM,EAExBE,GAAQF,EAAQ,OAAO,EAElB,IAAIA,EAAO,OAAOF,CAAI,EAAGA,CAAI,EAAE,MAAO,EAIxCE,EAAO,OAAOF,CAAI,EAAGA,CAAI,CACjC,CAGD,SAASnB,EAAUwB,EAAMN,EAAK,CAC5BrB,EAAU,OAAQ,EAClB,MAAMsB,EAAOC,GAAMF,CAAG,EAChBO,EAAW5B,EAAU,SAI3B,OAHA6B,GAAe,YAAaD,CAAQ,EACpCE,GAAWH,CAAI,EAEXD,GAAQE,EAAU,SAAS,EAEtB,IAAIA,EAASD,EAAML,CAAI,EAAE,QAAS,EAIpCM,EAASD,EAAML,CAAI,CAC3B,CAQD,SAAS7C,EAAIkD,EAAMN,EAAKzC,EAAU,CAShC,GARAkD,GAAWH,CAAI,EACf3B,EAAU,OAAQ,EAEd,CAACpB,GAAY,OAAOyC,GAAQ,aAC9BzC,EAAWyC,EACXA,EAAM,QAGJ,CAACzC,EACH,OAAO,IAAI,QAAQmD,CAAQ,EAG7BA,EAAS,KAAMnD,CAAQ,EAOvB,SAASmD,EAASC,EAASC,EAAQ,CAEjCtC,EAAa,IAAIgC,EAAMJ,GAAMF,CAAG,EAAGhC,CAAI,EAQvC,SAASA,EAAKrD,EAAOkG,EAAMZ,EAAM,CAC/BY,EAAOA,GAAQP,EACX3F,EACFiG,EAAOjG,CAAK,EACHgG,EACTA,EAAQE,CAAI,EAGZtD,EAAS,KAAMsD,EAAMZ,CAAI,CAE5B,CACF,CACF,CAGD,SAASlB,EAAQuB,EAAML,EAAM,CAE3B,IAAI/b,EAEA4c,EAEJ,OAAAnC,EAAU,IAAI2B,EAAML,EAAMjC,CAAI,EAE9B+C,GAAW,UAAW,MAAOD,CAAQ,EAG9B5c,EAOP,SAAS8Z,EAAKrD,EAAOkG,EAAM,CACzBnF,GAAKf,CAAK,EACVzW,EAAS2c,EACTC,EAAW,EACZ,CACF,CAOD,SAAS9B,EAAQgB,EAAKzC,EAAU,CAK9B,GAJAoB,EAAU,OAAQ,EAClByB,GAAa,UAAWzB,EAAU,MAAM,EACxC6B,GAAe,UAAW7B,EAAU,QAAQ,EAExC,CAACpB,EACH,OAAO,IAAI,QAAQmD,CAAQ,EAG7BA,EAAS,KAAMnD,CAAQ,EAOvB,SAASmD,EAASC,EAASC,EAAQ,CACjC,MAAMX,EAAOC,GAAMF,CAAG,EAEtBrB,EAAU,IAAIA,EAAU,MAAMsB,CAAI,EAAGA,EAAM,CAACtF,EAAOkG,EAAMZ,IAAS,CAChE,GAAItF,GAAS,CAACkG,GAAQ,CAACZ,EACrBjC,EAAKrD,CAAK,MACL,CAEL,MAAMzW,EAASya,EAAU,UAAUkC,EAAMZ,CAAI,EAEjB/b,GAAW,OAE5B8c,GAAqB9c,CAAM,EACpC+b,EAAK,MAAQ/b,EAEb+b,EAAK,OAAS/b,GAGhB8Z,EAAKrD,EAAOsF,CAAI,CACjB,CACT,CAAO,EAOD,SAASjC,EAAKrD,EAAOsF,EAAM,CACrBtF,GAAS,CAACsF,EACZW,EAAOjG,CAAK,EACHgG,EACTA,EAAQV,CAAI,EAGZ1C,EAAS,KAAM0C,CAAI,CAEtB,CACF,CACF,CAGD,SAAShB,EAAYe,EAAK,CAExB,IAAIc,EAEJnC,EAAU,OAAQ,EAClByB,GAAa,cAAezB,EAAU,MAAM,EAC5C6B,GAAe,cAAe7B,EAAU,QAAQ,EAEhD,MAAMsB,EAAOC,GAAMF,CAAG,EAEtB,OAAArB,EAAU,QAAQsB,EAAMjC,CAAI,EAE5B+C,GAAW,cAAe,UAAWD,CAAQ,EAEtCb,EAMP,SAASjC,EAAKrD,EAAO,CACnBmG,EAAW,GACXpF,GAAKf,CAAK,CACX,CACF,CACH,CASA,SAAS0F,GAAQpc,EAAOiN,EAAM,CAC5B,OACE,OAAOjN,GAAU,YAGjBA,EAAM,YAKLgd,GAAKhd,EAAM,SAAS,GAAKiN,KAAQjN,EAAM,UAE5C,CAQA,SAASgd,GAAKhd,EAAO,CAEnB,IAAImY,EAEJ,IAAKA,KAAOnY,EACV,GAAIoa,GAAI,KAAKpa,EAAOmY,CAAG,EACrB,MAAO,GAIX,MAAO,EACT,CASA,SAASgE,GAAalP,EAAMjN,EAAO,CACjC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaiN,EAAO,oBAAoB,CAEhE,CASA,SAASsP,GAAetP,EAAMjN,EAAO,CACnC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaiN,EAAO,sBAAsB,CAElE,CASA,SAASiO,GAAejO,EAAMuN,EAAQ,CACpC,GAAIA,EACF,MAAM,IAAI,MACR,gBACEvN,EACA,kHACH,CAEL,CAQA,SAASuP,GAAWH,EAAM,CAGxB,GAAI,CAACP,GAAWO,CAAI,GAAK,OAAOA,EAAK,MAAS,SAC5C,MAAM,IAAI,UAAU,uBAAyBA,EAAO,GAAG,CAG3D,CAUA,SAASS,GAAW7P,EAAMgQ,EAAWJ,EAAU,CAC7C,GAAI,CAACA,EACH,MAAM,IAAI,MACR,IAAM5P,EAAO,0BAA4BgQ,EAAY,WACtD,CAEL,CAMA,SAAShB,GAAMjc,EAAO,CACpB,OAAOkd,GAAgBld,CAAK,EAAIA,EAAQ,IAAI+W,GAAM/W,CAAK,CACzD,CAMA,SAASkd,GAAgBld,EAAO,CAC9B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,YAAaA,GACb,aAAcA,EAEpB,CAMA,SAAS+c,GAAqB/c,EAAO,CACnC,OAAO,OAAOA,GAAU,UAAYmU,GAASnU,CAAK,CACpD,CC1kBA,MAAMmd,GAAe,CAAE,EAehB,SAASC,GAASpd,EAAOgX,EAAS,CACvC,MAAMqE,EAAWrE,GAAWmG,GACtBE,EACJ,OAAOhC,EAAS,iBAAoB,UAChCA,EAAS,gBACT,GACAiC,EACJ,OAAOjC,EAAS,aAAgB,UAAYA,EAAS,YAAc,GAErE,OAAOkC,GAAIvd,EAAOqd,EAAiBC,CAAW,CAChD,CAcA,SAASC,GAAIvd,EAAOqd,EAAiBC,EAAa,CAChD,GAAIjB,GAAKrc,CAAK,EAAG,CACf,GAAI,UAAWA,EACb,OAAOA,EAAM,OAAS,QAAU,CAACsd,EAAc,GAAKtd,EAAM,MAG5D,GAAIqd,GAAmB,QAASrd,GAASA,EAAM,IAC7C,OAAOA,EAAM,IAGf,GAAI,aAAcA,EAChB,OAAOwd,GAAIxd,EAAM,SAAUqd,EAAiBC,CAAW,CAE1D,CAED,OAAI,MAAM,QAAQtd,CAAK,EACdwd,GAAIxd,EAAOqd,EAAiBC,CAAW,EAGzC,EACT,CAcA,SAASE,GAAIpE,EAAQiE,EAAiBC,EAAa,CAEjD,MAAMrd,EAAS,CAAE,EACjB,IAAIC,EAAQ,GAEZ,KAAO,EAAEA,EAAQkZ,EAAO,QACtBnZ,EAAOC,CAAK,EAAIqd,GAAInE,EAAOlZ,CAAK,EAAGmd,EAAiBC,CAAW,EAGjE,OAAOrd,EAAO,KAAK,EAAE,CACvB,CAUA,SAASoc,GAAKrc,EAAO,CACnB,MAAO,GAAQA,GAAS,OAAOA,GAAU,SAC3C,CChGO,MAAMuI,GAAU,CACrB,SAAUkV,EACZ,EAMA,SAASA,GAAkB9b,EAAS,CAClC,MAAMiE,EAAejE,EAAQ,QAC3B,KAAK,OAAO,WAAW,eACvB+b,EACAC,CACD,EAED,IAAI7b,EACJ,OAAO8D,EAGP,SAAS8X,EAA2Brd,EAAM,CACxC,GAAIA,IAAS,KAAM,CACjBsB,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EAClBkC,EAAalC,EAASiE,EAAc,YAAY,CACxD,CAGD,SAAS+X,EAAiBtd,EAAM,CAC9B,OAAAsB,EAAQ,MAAM,WAAW,EAClBwE,EAAU9F,CAAI,CACtB,CAGD,SAAS8F,EAAU9F,EAAM,CACvB,MAAM8B,EAAQR,EAAQ,MAAM,YAAa,CACvC,YAAa,OACb,SAAAG,CACN,CAAK,EACD,OAAIA,IACFA,EAAS,KAAOK,GAElBL,EAAWK,EACJ8E,EAAK5G,CAAI,CACjB,CAGD,SAAS4G,EAAK5G,EAAM,CAClB,GAAIA,IAAS,KAAM,CACjBsB,EAAQ,KAAK,WAAW,EACxBA,EAAQ,KAAK,WAAW,EACxBA,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAIiF,EAAmBjF,CAAI,GACzBsB,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,WAAW,EACjBwE,IAITxE,EAAQ,QAAQtB,CAAI,EACb4G,EACR,CACH,CC1DO,MAAM2W,GAAW,CACtB,SAAUC,EACZ,EAGMC,GAAqB,CACzB,SAAUC,EACZ,EAMA,SAASF,GAAmBlc,EAAS,CACnC,MAAM8B,EAAO,KAEPua,EAAQ,CAAE,EAChB,IAAIC,EAAY,EAEZC,EAEAC,EAEAC,EACJ,OAAOje,EAGP,SAASA,EAAME,EAAM,CAWnB,GAAI4d,EAAYD,EAAM,OAAQ,CAC5B,MAAMK,EAAOL,EAAMC,CAAS,EAC5B,OAAAxa,EAAK,eAAiB4a,EAAK,CAAC,EACrB1c,EAAQ,QACb0c,EAAK,CAAC,EAAE,aACRC,EACAC,CACD,EAACle,CAAI,CACP,CAGD,OAAOke,EAAmBle,CAAI,CAC/B,CAGD,SAASie,EAAiBje,EAAM,CAM9B,GALA4d,IAKIxa,EAAK,eAAe,WAAY,CAClCA,EAAK,eAAe,WAAa,OAC7Bya,GACFM,EAAW,EAKb,MAAMC,EAAmBhb,EAAK,OAAO,OACrC,IAAIib,EAAkBD,EAElBnc,EAGJ,KAAOoc,KACL,GACEjb,EAAK,OAAOib,CAAe,EAAE,CAAC,IAAM,QACpCjb,EAAK,OAAOib,CAAe,EAAE,CAAC,EAAE,OAAS,YACzC,CACApc,EAAQmB,EAAK,OAAOib,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CAEHC,EAAeV,CAAS,EAGxB,IAAI/d,EAAQue,EACZ,KAAOve,EAAQuD,EAAK,OAAO,QACzBA,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAE,EAAEoC,CAAK,EACnDpC,IAIF,OAAAwB,GACE+B,EAAK,OACLib,EAAkB,EAClB,EACAjb,EAAK,OAAO,MAAMgb,CAAgB,CACnC,EAGDhb,EAAK,OAAO,OAASvD,EACdqe,EAAmBle,CAAI,CAC/B,CACD,OAAOF,EAAME,CAAI,CAClB,CAGD,SAASke,EAAmBle,EAAM,CAMhC,GAAI4d,IAAcD,EAAM,OAAQ,CAI9B,GAAI,CAACE,EACH,OAAOU,EAAkBve,CAAI,EAM/B,GAAI6d,EAAU,kBAAoBA,EAAU,iBAAiB,SAC3D,OAAOW,EAAUxe,CAAI,EAQvBoD,EAAK,UAAY,GACfya,EAAU,kBAAoB,CAACA,EAAU,8BAE5C,CAGD,OAAAza,EAAK,eAAiB,CAAE,EACjB9B,EAAQ,MACbmc,GACAgB,EACAC,CACD,EAAC1e,CAAI,CACP,CAGD,SAASye,EAAqBze,EAAM,CAClC,OAAI6d,GAAWM,EAAW,EAC1BG,EAAeV,CAAS,EACjBW,EAAkBve,CAAI,CAC9B,CAGD,SAAS0e,EAAsB1e,EAAM,CACnC,OAAAoD,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EAAIwa,IAAcD,EAAM,OACxDI,EAAkB3a,EAAK,IAAG,EAAG,OACtBob,EAAUxe,CAAI,CACtB,CAGD,SAASue,EAAkBve,EAAM,CAE/B,OAAAoD,EAAK,eAAiB,CAAE,EACjB9B,EAAQ,QACbmc,GACAkB,EACAH,CACD,EAACxe,CAAI,CACP,CAGD,SAAS2e,EAAkB3e,EAAM,CAC/B,OAAA4d,IACAD,EAAM,KAAK,CAACva,EAAK,iBAAkBA,EAAK,cAAc,CAAC,EAEhDmb,EAAkBve,CAAI,CAC9B,CAGD,SAASwe,EAAUxe,EAAM,CACvB,GAAIA,IAAS,KAAM,CACb6d,GAAWM,EAAW,EAC1BG,EAAe,CAAC,EAChBhd,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAA6d,EAAYA,GAAaza,EAAK,OAAO,KAAKA,EAAK,KAAK,EACpD9B,EAAQ,MAAM,YAAa,CACzB,YAAa,OACb,SAAUwc,EACV,WAAYD,CAClB,CAAK,EACMe,EAAa5e,CAAI,CACzB,CAGD,SAAS4e,EAAa5e,EAAM,CAC1B,GAAIA,IAAS,KAAM,CACjB6e,EAAavd,EAAQ,KAAK,WAAW,EAAG,EAAI,EAC5Cgd,EAAe,CAAC,EAChBhd,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAIiF,EAAmBjF,CAAI,GACzBsB,EAAQ,QAAQtB,CAAI,EACpB6e,EAAavd,EAAQ,KAAK,WAAW,CAAC,EAEtCsc,EAAY,EACZxa,EAAK,UAAY,OACVtD,IAETwB,EAAQ,QAAQtB,CAAI,EACb4e,EACR,CAOD,SAASC,EAAa/c,EAAOgd,EAAK,CAChC,MAAMjX,EAASzE,EAAK,YAAYtB,CAAK,EAyCrC,GAxCIgd,GAAKjX,EAAO,KAAK,IAAI,EACzB/F,EAAM,SAAWgc,EACbA,IAAYA,EAAW,KAAOhc,GAClCgc,EAAahc,EACb+b,EAAU,WAAW/b,EAAM,KAAK,EAChC+b,EAAU,MAAMhW,CAAM,EAmClBzE,EAAK,OAAO,KAAKtB,EAAM,MAAM,IAAI,EAAG,CACtC,IAAIjC,EAAQge,EAAU,OAAO,OAC7B,KAAOhe,KACL,GAEEge,EAAU,OAAOhe,CAAK,EAAE,CAAC,EAAE,MAAM,OAASke,IAEzC,CAACF,EAAU,OAAOhe,CAAK,EAAE,CAAC,EAAE,KAE3Bge,EAAU,OAAOhe,CAAK,EAAE,CAAC,EAAE,IAAI,OAASke,GAI1C,OAMJ,MAAMK,EAAmBhb,EAAK,OAAO,OACrC,IAAIib,EAAkBD,EAElBvU,EAEA5H,EAGJ,KAAOoc,KACL,GACEjb,EAAK,OAAOib,CAAe,EAAE,CAAC,IAAM,QACpCjb,EAAK,OAAOib,CAAe,EAAE,CAAC,EAAE,OAAS,YACzC,CACA,GAAIxU,EAAM,CACR5H,EAAQmB,EAAK,OAAOib,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CACDxU,EAAO,EACR,CAMH,IAJAyU,EAAeV,CAAS,EAGxB/d,EAAQue,EACDve,EAAQuD,EAAK,OAAO,QACzBA,EAAK,OAAOvD,CAAK,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAE,EAAEoC,CAAK,EACnDpC,IAIFwB,GACE+B,EAAK,OACLib,EAAkB,EAClB,EACAjb,EAAK,OAAO,MAAMgb,CAAgB,CACnC,EAGDhb,EAAK,OAAO,OAASvD,CACtB,CACF,CAMD,SAASye,EAAejc,EAAM,CAC5B,IAAIxC,EAAQ8d,EAAM,OAGlB,KAAO9d,KAAUwC,GAAM,CACrB,MAAMmZ,EAAQmC,EAAM9d,CAAK,EACzBuD,EAAK,eAAiBoY,EAAM,CAAC,EAC7BA,EAAM,CAAC,EAAE,KAAK,KAAKpY,EAAM9B,CAAO,CACjC,CACDqc,EAAM,OAAStb,CAChB,CACD,SAAS8b,GAAY,CACnBN,EAAU,MAAM,CAAC,IAAI,CAAC,EACtBC,EAAa,OACbD,EAAY,OACZza,EAAK,eAAe,WAAa,MAClC,CACH,CAMA,SAASsa,GAAkBpc,EAASC,EAAIa,EAAK,CAG3C,OAAOoB,EACLlC,EACAA,EAAQ,QAAQ,KAAK,OAAO,WAAW,SAAUC,EAAIa,CAAG,EACxD,aACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAC5E,CACH,CClXO,MAAM2c,GAAO,CAClB,SAAUC,EACZ,EAMA,SAASA,GAAe1d,EAAS,CAC/B,MAAM8B,EAAO,KACP6b,EAAU3d,EAAQ,QAEtB2M,GACAiR,EAEA5d,EAAQ,QACN,KAAK,OAAO,WAAW,YACvB6d,EACA3b,EACElC,EACAA,EAAQ,QACN,KAAK,OAAO,WAAW,KACvB6d,EACA7d,EAAQ,QAAQ4G,GAASiX,CAAc,CACxC,EACD,YACD,CACF,CACF,EACD,OAAOF,EAGP,SAASC,EAAclf,EAAM,CAC3B,GAAIA,IAAS,KAAM,CACjBsB,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAAsB,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,iBAAiB,EAC9B8B,EAAK,iBAAmB,OACjB6b,CACR,CAGD,SAASE,EAAenf,EAAM,CAC5B,GAAIA,IAAS,KAAM,CACjBsB,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAAsB,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQtB,CAAI,EACpBsB,EAAQ,KAAK,YAAY,EACzB8B,EAAK,iBAAmB,OACjB6b,CACR,CACH,CC1DO,MAAMG,GAAW,CACtB,WAAYC,GAAgB,CAC9B,EACaC,GAASC,GAAkB,QAAQ,EACnC5e,GAAO4e,GAAkB,MAAM,EAM5C,SAASA,GAAkBC,EAAO,CAChC,MAAO,CACL,SAAUC,EACV,WAAYJ,GACVG,IAAU,OAASE,GAAyB,MAC7C,CACF,EAMD,SAASD,EAAene,EAAS,CAC/B,MAAM8B,EAAO,KACPuc,EAAa,KAAK,OAAO,WAAWH,CAAK,EACzC7e,EAAOW,EAAQ,QAAQqe,EAAY7f,EAAO8f,CAAO,EACvD,OAAO9f,EAGP,SAASA,EAAME,EAAM,CACnB,OAAOoG,EAAQpG,CAAI,EAAIW,EAAKX,CAAI,EAAI4f,EAAQ5f,CAAI,CACjD,CAGD,SAAS4f,EAAQ5f,EAAM,CACrB,GAAIA,IAAS,KAAM,CACjBsB,EAAQ,QAAQtB,CAAI,EACpB,MACD,CACD,OAAAsB,EAAQ,MAAM,MAAM,EACpBA,EAAQ,QAAQtB,CAAI,EACb4G,CACR,CAGD,SAASA,EAAK5G,EAAM,CAClB,OAAIoG,EAAQpG,CAAI,GACdsB,EAAQ,KAAK,MAAM,EACZX,EAAKX,CAAI,IAIlBsB,EAAQ,QAAQtB,CAAI,EACb4G,EACR,CAMD,SAASR,EAAQpG,EAAM,CACrB,GAAIA,IAAS,KACX,MAAO,GAET,MAAMkS,EAAOyN,EAAW3f,CAAI,EAC5B,IAAIH,EAAQ,GACZ,GAAIqS,EAGF,KAAO,EAAErS,EAAQqS,EAAK,QAAQ,CAC5B,MAAM8L,EAAO9L,EAAKrS,CAAK,EACvB,GAAI,CAACme,EAAK,UAAYA,EAAK,SAAS,KAAK5a,EAAMA,EAAK,QAAQ,EAC1D,MAAO,EAEV,CAEH,MAAO,EACR,CACF,CACH,CAMA,SAASic,GAAeQ,EAAe,CACrC,OAAOC,EAGP,SAASA,EAAevf,EAAQC,EAAS,CACvC,IAAIX,EAAQ,GAER6G,EAIJ,KAAO,EAAE7G,GAASU,EAAO,QACnBmG,IAAU,OACRnG,EAAOV,CAAK,GAAKU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,SAC7C6G,EAAQ7G,EACRA,MAEO,CAACU,EAAOV,CAAK,GAAKU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,UAEjDA,IAAU6G,EAAQ,IACpBnG,EAAOmG,CAAK,EAAE,CAAC,EAAE,IAAMnG,EAAOV,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5CU,EAAO,OAAOmG,EAAQ,EAAG7G,EAAQ6G,EAAQ,CAAC,EAC1C7G,EAAQ6G,EAAQ,GAElBA,EAAQ,QAGZ,OAAOmZ,EAAgBA,EAActf,EAAQC,CAAO,EAAID,CACzD,CACH,CAaA,SAASmf,GAAuBnf,EAAQC,EAAS,CAC/C,IAAI+G,EAAa,EAEjB,KAAO,EAAEA,GAAchH,EAAO,QAC5B,IACGgH,IAAehH,EAAO,QACrBA,EAAOgH,CAAU,EAAE,CAAC,EAAE,OAAS,eACjChH,EAAOgH,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,OACnC,CACA,MAAMX,EAAOrG,EAAOgH,EAAa,CAAC,EAAE,CAAC,EAC/BwY,EAASvf,EAAQ,YAAYoG,CAAI,EACvC,IAAI/G,EAAQkgB,EAAO,OACfC,EAAc,GACd3d,EAAO,EAEP4d,EACJ,KAAOpgB,KAAS,CACd,MAAMqgB,EAAQH,EAAOlgB,CAAK,EAC1B,GAAI,OAAOqgB,GAAU,SAAU,CAE7B,IADAF,EAAcE,EAAM,OACbA,EAAM,WAAWF,EAAc,CAAC,IAAM,IAC3C3d,IACA2d,IAEF,GAAIA,EAAa,MACjBA,EAAc,EACf,SAEQE,IAAU,GACjBD,EAAO,GACP5d,YACS6d,IAAU,GAEd,CAELrgB,IACA,KACD,CACF,CACD,GAAIwC,EAAM,CACR,MAAMP,EAAQ,CACZ,KACEyF,IAAehH,EAAO,QAAU0f,GAAQ5d,EAAO,EAC3C,aACA,oBACN,MAAO,CACL,KAAMuE,EAAK,IAAI,KACf,OAAQA,EAAK,IAAI,OAASvE,EAC1B,OAAQuE,EAAK,IAAI,OAASvE,EAC1B,OAAQuE,EAAK,MAAM,OAAS/G,EAC5B,aAAcA,EACVmgB,EACApZ,EAAK,MAAM,aAAeoZ,CAC/B,EACD,IAAK,OAAO,OAAO,CAAA,EAAIpZ,EAAK,GAAG,CAChC,EACDA,EAAK,IAAM,OAAO,OAAO,CAAE,EAAE9E,EAAM,KAAK,EACpC8E,EAAK,MAAM,SAAWA,EAAK,IAAI,OACjC,OAAO,OAAOA,EAAM9E,CAAK,GAEzBvB,EAAO,OACLgH,EACA,EACA,CAAC,QAASzF,EAAOtB,CAAO,EACxB,CAAC,OAAQsB,EAAOtB,CAAO,CACxB,EACD+G,GAAc,EAEjB,CACDA,GACD,CAEH,OAAOhH,CACT,CClKO,SAAS4f,GAAgBC,EAAQC,EAAYC,EAAM,CAExD,IAAIre,EAAQ,OAAO,OACjBqe,EACI,OAAO,OAAO,CAAE,EAAEA,CAAI,EACtB,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,EACL,CACE,OAAQ,EACR,aAAc,EACf,CACF,EAED,MAAMC,EAAc,CAAE,EAEhBC,EAAuB,CAAE,EAE/B,IAAIT,EAAS,CAAE,EAEXpC,EAAQ,CAAE,EASd,MAAMrc,EAAU,CACd,QAAAmf,EACA,MAAA/Z,EACA,KAAAvD,EACA,QAASud,EAAiBC,CAAqB,EAC/C,MAAOD,EAAiBE,CAAiB,EACzC,UAAWF,EAAiBE,EAAmB,CAC7C,UAAW,EACjB,CAAK,CACF,EAOKpgB,EAAU,CACd,SAAU,KACV,KAAM,KACN,eAAgB,CAAE,EAClB,OAAQ,CAAE,EACV,OAAA4f,EACA,YAAAS,EACA,eAAAC,EACA,IAAAC,EACA,WAAAC,EACA,MAAAC,CACD,EAOD,IAAI5d,EAAQgd,EAAW,SAAS,KAAK7f,EAASc,CAAO,EAQrD,OAAI+e,EAAW,YACbG,EAAqB,KAAKH,CAAU,EAE/B7f,EAGP,SAASygB,EAAMhZ,EAAO,CAKpB,OAJA8X,EAAS5e,EAAK4e,EAAQ9X,CAAK,EAC3BiZ,EAAM,EAGFnB,EAAOA,EAAO,OAAS,CAAC,IAAM,KACzB,CAAE,GAEXoB,EAAUd,EAAY,CAAC,EAGvB7f,EAAQ,OAASY,GAAWof,EAAsBhgB,EAAQ,OAAQA,CAAO,EAClEA,EAAQ,OAChB,CAOD,SAASsgB,EAAehf,EAAOsf,EAAY,CACzC,OAAOC,GAAgBR,EAAY/e,CAAK,EAAGsf,CAAU,CACtD,CAGD,SAASP,EAAY/e,EAAO,CAC1B,OAAOwf,GAAYvB,EAAQje,CAAK,CACjC,CAGD,SAASif,GAAM,CAEb,KAAM,CAAC,KAAAQ,EAAM,OAAAC,EAAQ,OAAAxgB,EAAQ,OAAAygB,EAAQ,aAAAC,CAAY,EAAIzf,EACrD,MAAO,CACL,KAAAsf,EACA,OAAAC,EACA,OAAAxgB,EACA,OAAAygB,EACA,aAAAC,CACD,CACF,CAGD,SAASV,EAAWrhB,EAAO,CACzB4gB,EAAY5gB,EAAM,IAAI,EAAIA,EAAM,OAChCgiB,EAAyB,CAC1B,CAgBD,SAAST,GAAO,CAEd,IAAIU,EACJ,KAAO3f,EAAM,OAAS8d,EAAO,QAAQ,CACnC,MAAMG,EAAQH,EAAO9d,EAAM,MAAM,EAGjC,GAAI,OAAOie,GAAU,SAKnB,IAJA0B,EAAa3f,EAAM,OACfA,EAAM,aAAe,IACvBA,EAAM,aAAe,GAGrBA,EAAM,SAAW2f,GACjB3f,EAAM,aAAeie,EAAM,QAE3B2B,EAAG3B,EAAM,WAAWje,EAAM,YAAY,CAAC,OAGzC4f,EAAG3B,CAAK,CAEX,CACF,CAQD,SAAS2B,EAAG7hB,EAAM,CAGhBqD,EAAQA,EAAMrD,CAAI,CACnB,CAGD,SAASygB,EAAQzgB,EAAM,CACjBiF,EAAmBjF,CAAI,GACzBiC,EAAM,OACNA,EAAM,OAAS,EACfA,EAAM,QAAUjC,IAAS,GAAK,EAAI,EAClC2hB,EAAyB,GAChB3hB,IAAS,KAClBiC,EAAM,SACNA,EAAM,UAIJA,EAAM,aAAe,EACvBA,EAAM,UAENA,EAAM,eAKFA,EAAM,eAAiB8d,EAAO9d,EAAM,MAAM,EAAE,SAC9CA,EAAM,aAAe,GACrBA,EAAM,WAKVzB,EAAQ,SAAWR,CAIpB,CAGD,SAAS0G,EAAMoC,EAAMgZ,EAAQ,CAG3B,MAAMhgB,EAAQggB,GAAU,CAAE,EAC1B,OAAAhgB,EAAM,KAAOgH,EACbhH,EAAM,MAAQif,EAAK,EACnBvgB,EAAQ,OAAO,KAAK,CAAC,QAASsB,EAAOtB,CAAO,CAAC,EAC7Cmd,EAAM,KAAK7b,CAAK,EACTA,CACR,CAGD,SAASqB,EAAK2F,EAAM,CAClB,MAAMhH,EAAQ6b,EAAM,IAAK,EACzB,OAAA7b,EAAM,IAAMif,EAAK,EACjBvgB,EAAQ,OAAO,KAAK,CAAC,OAAQsB,EAAOtB,CAAO,CAAC,EACrCsB,CACR,CAOD,SAAS6e,EAAsBoB,EAAW5c,EAAM,CAC9Cgc,EAAUY,EAAW5c,EAAK,IAAI,CAC/B,CAOD,SAASyb,EAAkBoB,EAAG7c,EAAM,CAClCA,EAAK,QAAS,CACf,CAQD,SAASub,EAAiBuB,EAAUH,EAAQ,CAC1C,OAAOI,EAWP,SAASA,EAAKvC,EAAYvR,EAAa+T,EAAY,CAEjD,IAAIC,EAEAC,GAEAC,GAEAnd,EACJ,OAAO,MAAM,QAAQwa,CAAU,EAC3B4C,GAAuB5C,CAAU,EACjC,aAAcA,EAEd4C,GAAuB,CAAC5C,CAAU,CAAC,EACnC6C,GAAsB7C,CAAU,EAQpC,SAAS6C,GAAsBC,EAAK,CAClC,OAAO3iB,GAGP,SAASA,GAAME,GAAM,CACnB,MAAM0iB,GAAM1iB,KAAS,MAAQyiB,EAAIziB,EAAI,EAC/Bmd,GAAMnd,KAAS,MAAQyiB,EAAI,KAC3BvQ,GAAO,CAGX,GAAI,MAAM,QAAQwQ,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,GAC7C,GAAI,MAAM,QAAQvF,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,EAC9C,EACD,OAAOoF,GAAuBrQ,EAAI,EAAElS,EAAI,CACzC,CACF,CAQD,SAASuiB,GAAuBrQ,EAAM,CAGpC,OAFAkQ,EAAmBlQ,EACnBmQ,GAAiB,EACbnQ,EAAK,SAAW,EACXiQ,EAEFQ,EAAgBzQ,EAAKmQ,EAAc,CAAC,CAC5C,CAQD,SAASM,EAAgBZ,EAAW,CAClC,OAAOjiB,GAGP,SAASA,GAAME,GAAM,CAanB,OARAmF,EAAOyd,EAAO,EACdN,GAAmBP,EACdA,EAAU,UACbvhB,EAAQ,iBAAmBuhB,GAM3BA,EAAU,MACVvhB,EAAQ,OAAO,WAAW,QAAQ,KAAK,SAASuhB,EAAU,IAAI,EAEvD3f,GAAQ,EAEV2f,EAAU,SAAS,KAIxBD,EAAS,OAAO,OAAO,OAAO,OAAOthB,CAAO,EAAGshB,CAAM,EAAIthB,EACzDc,EACAC,GACAa,EACD,EAACpC,EAAI,CACP,CACF,CAGD,SAASuB,GAAGvB,EAAM,CAEhB,OAAAiiB,EAASK,GAAkBnd,CAAI,EACxBiJ,CACR,CAGD,SAAShM,GAAIpC,EAAM,CAGjB,OADAmF,EAAK,QAAS,EACV,EAAEkd,GAAiBD,EAAiB,OAC/BO,EAAgBP,EAAiBC,EAAc,CAAC,EAElDF,CACR,CACF,CACF,CAOD,SAAShB,EAAUY,EAAWzB,EAAM,CAC9ByB,EAAU,YAAc,CAACvB,EAAqB,SAASuB,CAAS,GAClEvB,EAAqB,KAAKuB,CAAS,EAEjCA,EAAU,SACZ1gB,GACEb,EAAQ,OACR8f,EACA9f,EAAQ,OAAO,OAAS8f,EACxByB,EAAU,QAAQvhB,EAAQ,OAAO,MAAM8f,CAAI,EAAG9f,CAAO,CACtD,EAECuhB,EAAU,YACZvhB,EAAQ,OAASuhB,EAAU,UAAUvhB,EAAQ,OAAQA,CAAO,EAE/D,CAOD,SAASoiB,GAAQ,CACf,MAAMC,EAAa9B,EAAK,EAClB+B,EAAgBtiB,EAAQ,SACxBuiB,EAAwBviB,EAAQ,iBAChCwiB,EAAmBxiB,EAAQ,OAAO,OAClCyiB,EAAa,MAAM,KAAKtF,CAAK,EACnC,MAAO,CACL,QAAAuF,EACA,KAAMF,CACP,EAOD,SAASE,GAAU,CACjBjhB,EAAQ4gB,EACRriB,EAAQ,SAAWsiB,EACnBtiB,EAAQ,iBAAmBuiB,EAC3BviB,EAAQ,OAAO,OAASwiB,EACxBrF,EAAQsF,EACRtB,EAAyB,CAC1B,CACF,CAQD,SAASA,GAA0B,CAC7B1f,EAAM,QAAQse,GAAete,EAAM,OAAS,IAC9CA,EAAM,OAASse,EAAYte,EAAM,IAAI,EACrCA,EAAM,QAAUse,EAAYte,EAAM,IAAI,EAAI,EAE7C,CACH,CASA,SAASqf,GAAYvB,EAAQje,EAAO,CAClC,MAAMqhB,EAAarhB,EAAM,MAAM,OACzBshB,EAAmBthB,EAAM,MAAM,aAC/BuhB,EAAWvhB,EAAM,IAAI,OACrBwhB,EAAiBxhB,EAAM,IAAI,aAEjC,IAAIyhB,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACxD,EAAOoD,CAAU,EAAE,MAAMC,EAAkBE,CAAc,CAAC,MAC7D,CAEL,GADAC,EAAOxD,EAAO,MAAMoD,EAAYE,CAAQ,EACpCD,EAAmB,GAAI,CACzB,MAAMI,EAAOD,EAAK,CAAC,EACf,OAAOC,GAAS,SAClBD,EAAK,CAAC,EAAIC,EAAK,MAAMJ,CAAgB,EAErCG,EAAK,MAAO,CAEf,CACGD,EAAiB,GAEnBC,EAAK,KAAKxD,EAAOsD,CAAQ,EAAE,MAAM,EAAGC,CAAc,CAAC,CAEtD,CACD,OAAOC,CACT,CASA,SAASlC,GAAgBtB,EAAQqB,EAAY,CAC3C,IAAIvhB,EAAQ,GAEZ,MAAMD,EAAS,CAAE,EAEjB,IAAI6jB,EACJ,KAAO,EAAE5jB,EAAQkgB,EAAO,QAAQ,CAC9B,MAAMG,EAAQH,EAAOlgB,CAAK,EAE1B,IAAIF,EACJ,GAAI,OAAOugB,GAAU,SACnBvgB,EAAQugB,MAER,QAAQA,EAAK,CACX,IAAK,GAAI,CACPvgB,EAAQ,KACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQ;AAAA,EACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQ;AAAA,EACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQyhB,EAAa,IAAM,IAC3B,KACD,CACD,IAAK,GAAI,CACP,GAAI,CAACA,GAAcqC,EAAO,SAC1B9jB,EAAQ,IACR,KACD,CACD,QAEEA,EAAQ,OAAO,aAAaugB,CAAK,CAEpC,CACHuD,EAAQvD,IAAU,GAClBtgB,EAAO,KAAKD,CAAK,CAClB,CACD,OAAOC,EAAO,KAAK,EAAE,CACvB,CCxiBO,MAAM2d,GAAW,CACrB,GAAKrL,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKlP,EACR,EAGa0gB,GAAiB,CAC3B,GAAKtZ,EACR,EAGauZ,GAAc,CACzB,CAAC,EAAE,EAAG5d,GACN,CAAC,EAAE,EAAGA,GACL,GAAKA,EACR,EAGagZ,GAAO,CACjB,GAAK3T,GACL,GAAK2G,GACL,GAAK,CAACmB,GAAiBnB,EAAa,EACpC,GAAKrG,GACL,GAAKwH,GACL,GAAKnB,GACL,GAAKxN,GACL,IAAMA,EACT,EAGa+a,GAAS,CACnB,GAAKzb,GACL,GAAKH,EACR,EAGa/C,GAAO,CAClB,CAAC,EAAE,EAAGkR,GACN,CAAC,EAAE,EAAGA,GACN,CAAC,EAAE,EAAGA,GACL,GAAKJ,GACL,GAAK5N,GACL,GAAKzD,GACL,GAAK,CAAC8B,GAAUgM,EAAQ,EACxB,GAAKyD,GACL,GAAK,CAACzG,GAAiBxH,EAAe,EACtC,GAAKiM,GACL,GAAKvP,GACL,GAAKiG,EACR,EAGaud,GAAa,CACxB,KAAM,CAACxjB,GAAWyjB,EAAW,CAC/B,EAGariB,GAAmB,CAC9B,KAAM,CAAC,GAAI,EAAE,CACf,EAGasiB,GAAU,CACrB,KAAM,CAAE,CACV,oNCrFO,SAASvJ,GAAM5D,EAAS,CAE7B,MAAMgJ,EAEJoE,GAAkB,CAACC,GAAmB,IAHvBrN,GAAW,CAAE,GAGuB,YAAc,CAAE,CAAC,CAAC,EAGjEyJ,EAAS,CACb,QAAS,CAAE,EACX,KAAM,CAAE,EACR,WAAAT,EACA,QAASsE,EAAO/b,EAAO,EACvB,SAAU+b,EAAO1G,EAAQ,EACzB,KAAM0G,EAAOlF,EAAI,EACjB,OAAQkF,EAAO3E,EAAM,EACrB,KAAM2E,EAAOtjB,EAAI,CAClB,EACD,OAAOyf,EAKP,SAAS6D,EAAOhF,EAAS,CACvB,OAAOiF,EAEP,SAASA,EAAQ5D,EAAM,CACrB,OAAOH,GAAgBC,EAAQnB,EAASqB,CAAI,CAC7C,CACF,CACH,CClCA,MAAM6D,GAAS,cAKR,SAASC,IAAa,CAC3B,IAAI5C,EAAS,EACTtV,EAAS,GAETpM,EAAQ,GAERukB,EACJ,OAAOC,EAGP,SAASA,EAAa3kB,EAAOqX,EAAU/V,EAAK,CAE1C,MAAM8e,EAAS,CAAE,EAEjB,IAAIwE,EAEApkB,EAEAqH,EAEAgd,EAEAxkB,EAaJ,IAVAL,EAAQuM,EAASvM,EAAM,SAASqX,CAAQ,EACxCxP,EAAgB,EAChB0E,EAAS,GACLpM,IAEEH,EAAM,WAAW,CAAC,IAAM,OAC1B6H,IAEF1H,EAAQ,QAEH0H,EAAgB7H,EAAM,QAAQ,CAMnC,GALAwkB,GAAO,UAAY3c,EACnB+c,EAAQJ,GAAO,KAAKxkB,CAAK,EACzB6kB,EACED,GAASA,EAAM,QAAU,OAAYA,EAAM,MAAQ5kB,EAAM,OAC3DK,EAAOL,EAAM,WAAW6kB,CAAW,EAC/B,CAACD,EAAO,CACVrY,EAASvM,EAAM,MAAM6H,CAAa,EAClC,KACD,CACD,GAAIxH,IAAS,IAAMwH,IAAkBgd,GAAeH,EAClDtE,EAAO,KAAK,EAAE,EACdsE,EAAmB,WAUnB,QARIA,IACFtE,EAAO,KAAK,EAAE,EACdsE,EAAmB,QAEjB7c,EAAgBgd,IAClBzE,EAAO,KAAKpgB,EAAM,MAAM6H,EAAegd,CAAW,CAAC,EACnDhD,GAAUgD,EAAchd,GAElBxH,EAAI,CACV,IAAK,GAAG,CACN+f,EAAO,KAAK,KAAK,EACjByB,IACA,KACD,CACD,IAAK,GAAG,CAGN,IAFArhB,EAAO,KAAK,KAAKqhB,EAAS,CAAC,EAAI,EAC/BzB,EAAO,KAAK,EAAE,EACPyB,IAAWrhB,GAAM4f,EAAO,KAAK,EAAE,EACtC,KACD,CACD,IAAK,IAAI,CACPA,EAAO,KAAK,EAAE,EACdyB,EAAS,EACT,KACD,CACD,QACE6C,EAAmB,GACnB7C,EAAS,CAEZ,CAEHha,EAAgBgd,EAAc,CAC/B,CACD,OAAIvjB,IACEojB,GAAkBtE,EAAO,KAAK,EAAE,EAChC7T,GAAQ6T,EAAO,KAAK7T,CAAM,EAC9B6T,EAAO,KAAK,IAAI,GAEXA,CACR,CACH,CCnGO,SAAS0E,GAAYlkB,EAAQ,CAClC,KAAO,CAACsG,GAAYtG,CAAM,GAAG,CAG7B,OAAOA,CACT,CC4IA,MAAMwZ,GAAM,CAAE,EAAC,eAYF2K,GAcX,SAAU/kB,EAAOqX,EAAUL,EAAS,CAClC,OAAI,OAAOK,GAAa,WACtBL,EAAUK,EACVA,EAAW,QAEN2N,GAAShO,CAAO,EACrB8N,GACElK,GAAM5D,CAAO,EAAE,WAAW,MAAMyN,GAAU,EAAGzkB,EAAOqX,EAAU,EAAI,CAAC,CACpE,CACF,CACF,EAOH,SAAS2N,GAAShO,EAAS,CAEzB,MAAMiO,EAAS,CACb,WAAY,CAAE,EACd,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,QAAQ,EACzE,MAAO,CACL,SAAUC,EAAOC,EAAI,EACrB,iBAAkBC,EAClB,cAAeA,EACf,WAAYF,EAAOxR,EAAO,EAC1B,WAAYwR,EAAO7hB,EAAU,EAC7B,gBAAiB+hB,EACjB,mBAAoBA,EACpB,WAAYF,EAAOG,EAAQ,EAC3B,oBAAqB9Y,EACrB,oBAAqBA,EACrB,aAAc2Y,EAAOG,GAAU9Y,CAAM,EACrC,SAAU2Y,EAAOxe,GAAU6F,CAAM,EACjC,aAAc6Y,EACd,KAAMA,EACN,cAAeA,EACf,WAAYF,EAAOza,EAAU,EAC7B,4BAA6B8B,EAC7B,sBAAuBA,EACvB,sBAAuBA,EACvB,SAAU2Y,EAAOI,EAAQ,EACzB,gBAAiBJ,EAAOK,EAAS,EACjC,kBAAmBL,EAAOK,EAAS,EACnC,SAAUL,EAAOM,GAAMjZ,CAAM,EAC7B,aAAc6Y,EACd,SAAUF,EAAOM,GAAMjZ,CAAM,EAC7B,aAAc6Y,EACd,MAAOF,EAAOO,EAAK,EACnB,MAAOlZ,EACP,KAAM2Y,EAAOC,EAAI,EACjB,SAAUD,EAAOQ,EAAQ,EACzB,cAAeC,EACf,YAAaT,EAAO3S,GAAMqT,CAAkB,EAC5C,cAAeV,EAAO3S,EAAI,EAC1B,UAAW2S,EAAOvR,EAAS,EAC3B,UAAWkS,GACX,gBAAiBtZ,EACjB,0BAA2BA,EAC3B,oBAAqBA,EACrB,cAAe2Y,EAAOxR,EAAO,EAC7B,OAAQwR,EAAOY,EAAM,EACrB,cAAeZ,EAAO9S,EAAa,CACpC,EACD,KAAM,CACJ,WAAY2T,EAAQ,EACpB,mBAAoBC,EACpB,SAAUD,EAAQ,EAClB,cAAeE,GACf,iBAAkBC,GAClB,WAAYH,EAAQ,EACpB,qBAAsBI,EACtB,oCAAqCC,GACrC,gCAAiCA,GACjC,wBAAyBC,GACzB,WAAYN,EAAOO,CAAgB,EACnC,gBAAiBC,EACjB,oBAAqBC,EACrB,oBAAqBC,EACrB,cAAeN,EACf,aAAcJ,EAAOW,CAAkB,EACvC,SAAUX,EAAOY,CAAc,EAC/B,aAAcR,EACd,KAAMA,EACN,WAAYJ,EAAQ,EACpB,4BAA6Ba,EAC7B,sBAAuBC,EACvB,sBAAuBC,EACvB,SAAUf,EAAQ,EAClB,gBAAiBA,EAAOgB,CAAe,EACvC,kBAAmBhB,EAAOgB,CAAe,EACzC,SAAUhB,EAAOiB,CAAc,EAC/B,aAAcb,EACd,SAAUJ,EAAOkB,CAAc,EAC/B,aAAcd,EACd,MAAOJ,EAAOmB,EAAW,EACzB,MAAOC,GACP,UAAWC,EACX,WAAYC,EACZ,KAAMtB,EAAOuB,EAAU,EACvB,SAAUvB,EAAQ,EAClB,YAAaA,EAAQ,EACrB,cAAeA,EAAQ,EACvB,UAAWA,EAAQ,EACnB,gBAAiBwB,EACjB,0BAA2BC,GAC3B,oBAAqBC,EACrB,SAAUC,GACV,cAAe3B,EAAO4B,CAAmB,EACzC,0BAA2BC,EAC3B,kBAAmBC,EACnB,OAAQ9B,EAAQ,EAChB,cAAeA,EAAQ,CACxB,CACF,EACD+B,GAAU7C,GAASjO,GAAW,CAAA,GAAI,iBAAmB,CAAA,CAAE,EAGvD,MAAM/P,EAAO,CAAE,EACf,OAAO8gB,EAUP,SAASA,EAAQnnB,EAAQ,CAEvB,IAAIgc,EAAO,CACT,KAAM,OACN,SAAU,CAAE,CACb,EAED,MAAM/b,EAAU,CACd,MAAO,CAAC+b,CAAI,EACZ,WAAY,CAAE,EACd,OAAAqI,EACA,MAAAle,EACA,KAAAvD,EACA,OAAA+I,EACA,OAAAyb,EACA,QAAAC,EACA,QAAAC,CACD,EAEKC,EAAY,CAAE,EACpB,IAAIjoB,EAAQ,GACZ,KAAO,EAAEA,EAAQU,EAAO,QAGtB,GACEA,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,eAC1BU,EAAOV,CAAK,EAAE,CAAC,EAAE,OAAS,gBAE1B,GAAIU,EAAOV,CAAK,EAAE,CAAC,IAAM,QACvBioB,EAAU,KAAKjoB,CAAK,MACf,CACL,MAAMiF,GAAOgjB,EAAU,IAAK,EAC5BjoB,EAAQkoB,EAAYxnB,EAAQuE,GAAMjF,CAAK,CACxC,CAIL,IADAA,EAAQ,GACD,EAAEA,EAAQU,EAAO,QAAQ,CAC9B,MAAMynB,GAAUpD,EAAOrkB,EAAOV,CAAK,EAAE,CAAC,CAAC,EACnCka,GAAI,KAAKiO,GAASznB,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,GACzCmoB,GAAQznB,EAAOV,CAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAC7B,OAAO,OACL,CACE,eAAgBU,EAAOV,CAAK,EAAE,CAAC,EAAE,cAClC,EACDW,CACD,EACDD,EAAOV,CAAK,EAAE,CAAC,CAChB,CAEJ,CAGD,GAAIW,EAAQ,WAAW,OAAS,EAAG,CACjC,MAAMsE,GAAOtE,EAAQ,WAAWA,EAAQ,WAAW,OAAS,CAAC,GAC7CsE,GAAK,CAAC,GAAKmjB,IACnB,KAAKznB,EAAS,OAAWsE,GAAK,CAAC,CAAC,CACzC,CA0BD,IAvBAyX,EAAK,SAAW,CACd,MAAOta,GACL1B,EAAO,OAAS,EACZA,EAAO,CAAC,EAAE,CAAC,EAAE,MACb,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,CACN,EACD,IAAK0B,GACH1B,EAAO,OAAS,EACZA,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,IAC7B,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,CACN,CACF,EAGDV,EAAQ,GACD,EAAEA,EAAQ+kB,EAAO,WAAW,QACjCrI,EAAOqI,EAAO,WAAW/kB,CAAK,EAAE0c,CAAI,GAAKA,EAE3C,OAAOA,CACR,CAQD,SAASwL,EAAYxnB,EAAQT,EAAO0Y,EAAQ,CAC1C,IAAI3Y,EAAQC,EAAQ,EAChBooB,EAAmB,GACnBC,GAAa,GAEb9C,GAEAre,GAEAohB,GAEAxV,GACJ,KAAO,EAAE/S,GAAS2Y,GAAQ,CACxB,MAAMzR,EAAQxG,EAAOV,CAAK,EAmC1B,GAjCEkH,EAAM,CAAC,EAAE,OAAS,iBAClBA,EAAM,CAAC,EAAE,OAAS,eAClBA,EAAM,CAAC,EAAE,OAAS,cAEdA,EAAM,CAAC,IAAM,QACfmhB,IAEAA,IAEFtV,GAAW,QACF7L,EAAM,CAAC,EAAE,OAAS,kBACvBA,EAAM,CAAC,IAAM,UAEbse,IACA,CAACzS,IACD,CAACsV,GACD,CAACE,KAEDA,GAAsBvoB,GAExB+S,GAAW,QAGb7L,EAAM,CAAC,EAAE,OAAS,cAClBA,EAAM,CAAC,EAAE,OAAS,iBAClBA,EAAM,CAAC,EAAE,OAAS,kBAClBA,EAAM,CAAC,EAAE,OAAS,kBAClBA,EAAM,CAAC,EAAE,OAAS,6BAIlB6L,GAAW,QAGV,CAACsV,GACAnhB,EAAM,CAAC,IAAM,SACbA,EAAM,CAAC,EAAE,OAAS,kBACnBmhB,IAAqB,IACpBnhB,EAAM,CAAC,IAAM,SACZA,EAAM,CAAC,EAAE,OAAS,iBACjBA,EAAM,CAAC,EAAE,OAAS,eACtB,CACA,GAAIse,GAAU,CACZ,IAAIgD,GAAYxoB,EAEhB,IADAmH,GAAY,OACLqhB,MAAa,CAClB,MAAMC,GAAY/nB,EAAO8nB,EAAS,EAClC,GACEC,GAAU,CAAC,EAAE,OAAS,cACtBA,GAAU,CAAC,EAAE,OAAS,kBACtB,CACA,GAAIA,GAAU,CAAC,IAAM,OAAQ,SACzBthB,KACFzG,EAAOyG,EAAS,EAAE,CAAC,EAAE,KAAO,kBAC5BmhB,GAAa,IAEfG,GAAU,CAAC,EAAE,KAAO,aACpBthB,GAAYqhB,EAC1B,SACc,EAAAC,GAAU,CAAC,EAAE,OAAS,cACtBA,GAAU,CAAC,EAAE,OAAS,oBACtBA,GAAU,CAAC,EAAE,OAAS,8BACtBA,GAAU,CAAC,EAAE,OAAS,oBACtBA,GAAU,CAAC,EAAE,OAAS,kBAItB,KAEH,CAECF,KACC,CAACphB,IAAaohB,GAAsBphB,MAErCqe,GAAS,QAAU,IAIrBA,GAAS,IAAM,OAAO,OACpB,CAAE,EACFre,GAAYzG,EAAOyG,EAAS,EAAE,CAAC,EAAE,MAAQD,EAAM,CAAC,EAAE,GACnD,EACDxG,EAAO,OAAOyG,IAAanH,EAAO,EAAG,CAAC,OAAQwlB,GAAUte,EAAM,CAAC,CAAC,CAAC,EACjElH,IACA2Y,GACD,CAGGzR,EAAM,CAAC,EAAE,OAAS,mBACpBse,GAAW,CACT,KAAM,WACN,QAAS,GACT,MAAO,OAAO,OAAO,CAAA,EAAIte,EAAM,CAAC,EAAE,KAAK,EAEvC,IAAK,MACN,EAEDxG,EAAO,OAAOV,EAAO,EAAG,CAAC,QAASwlB,GAAUte,EAAM,CAAC,CAAC,CAAC,EACrDlH,IACA2Y,IACA4P,GAAsB,OACtBxV,GAAW,GAEd,CACF,CACD,OAAArS,EAAOT,CAAK,EAAE,CAAC,EAAE,QAAUqoB,GACpB3P,CACR,CAcD,SAASoP,EAAQ9P,EAAKnY,EAAO,CAC3BiH,EAAKkR,CAAG,EAAInY,CACb,CAYD,SAASkoB,EAAQ/P,EAAK,CACpB,OAAOlR,EAAKkR,CAAG,CAChB,CAYD,SAAS+M,EAAOZ,EAAQsE,EAAK,CAC3B,OAAO9nB,EAOP,SAASA,EAAKqB,EAAO,CACnB4E,EAAM,KAAK,KAAMud,EAAOniB,CAAK,EAAGA,CAAK,EACjCymB,GAAKA,EAAI,KAAK,KAAMzmB,CAAK,CAC9B,CACF,CAMD,SAASoK,GAAS,CAChB,KAAK,MAAM,KAAK,CACd,KAAM,WACN,SAAU,CAAE,CAClB,CAAK,CACF,CAgBD,SAASxF,EAAMsV,EAAMla,EAAO0mB,EAAc,CAGxC,OAFe,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAExC,SAAS,KAAKxM,CAAI,EACzB,KAAK,MAAM,KAAKA,CAAI,EACpB,KAAK,WAAW,KAAK,CAACla,EAAO0mB,CAAY,CAAC,EAE1CxM,EAAK,SAAW,CACd,MAAO/Z,GAAMH,EAAM,KAAK,CACzB,EACMka,CACR,CAUD,SAAS0J,EAAO6C,EAAK,CACnB,OAAOvmB,EAOP,SAASA,EAAMF,EAAO,CAChBymB,GAAKA,EAAI,KAAK,KAAMzmB,CAAK,EAC7BqB,EAAK,KAAK,KAAMrB,CAAK,CACtB,CACF,CAYD,SAASqB,EAAKrB,EAAO2mB,EAAa,CAChC,MAAMzM,EAAO,KAAK,MAAM,IAAK,EACvBvb,EAAO,KAAK,WAAW,IAAK,EAClC,GAAKA,EAWMA,EAAK,CAAC,EAAE,OAASqB,EAAM,OAC5B2mB,EACFA,EAAY,KAAK,KAAM3mB,EAAOrB,EAAK,CAAC,CAAC,GAErBA,EAAK,CAAC,GAAKwnB,IACnB,KAAK,KAAMnmB,EAAOrB,EAAK,CAAC,CAAC,OAfnC,OAAM,IAAI,MACR,iBACEqB,EAAM,KACN,MACAkS,GAAkB,CAChB,MAAOlS,EAAM,MACb,IAAKA,EAAM,GACvB,CAAW,EACD,kBACH,EASH,OAAAka,EAAK,SAAS,IAAM/Z,GAAMH,EAAM,GAAG,EAC5Bka,CACR,CAMD,SAAS2L,GAAS,CAChB,OAAO5K,GAAS,KAAK,MAAM,IAAG,CAAE,CACjC,CAUD,SAASwI,GAAqB,CAC5BqC,EAAQ,8BAA+B,EAAI,CAC5C,CAMD,SAAStC,EAAqBxjB,EAAO,CACnC,GAAI+lB,EAAQ,6BAA6B,EAAG,CAC1C,MAAMa,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjDA,EAAS,MAAQ,OAAO,SAAS,KAAK,eAAe5mB,CAAK,EAAG,EAAE,EAC/D8lB,EAAQ,6BAA6B,CACtC,CACF,CAMD,SAASzB,GAA4B,CACnC,MAAMvf,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOpV,CACb,CAMD,SAASwf,GAA4B,CACnC,MAAMxf,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOpV,CACb,CAMD,SAASsf,GAAwB,CAE3B2B,EAAQ,gBAAgB,IAC5B,KAAK,OAAQ,EACbD,EAAQ,iBAAkB,EAAI,EAC/B,CAMD,SAAS3B,GAAmB,CAC1B,MAAMrf,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,EAAK,QAAQ,2BAA4B,EAAE,EACxDghB,EAAQ,gBAAgB,CACzB,CAMD,SAASvB,GAAqB,CAC5B,MAAMzf,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,EAAK,QAAQ,eAAgB,EAAE,CAC7C,CAMD,SAAS4f,EAA4B1kB,EAAO,CAC1C,MAAMwO,EAAQ,KAAK,OAAQ,EACrB0L,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQ1L,EACb0L,EAAK,WAAatR,GAChB,KAAK,eAAe5I,CAAK,CAC1B,EAAC,YAAa,CAChB,CAMD,SAAS2kB,GAA8B,CACrC,MAAM7f,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,CACd,CAMD,SAAS2f,GAAoC,CAC3C,MAAM3f,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMpV,CACZ,CAMD,SAAS+e,EAAyB7jB,EAAO,CACvC,MAAMka,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7C,GAAI,CAACA,EAAK,MAAO,CACf,MAAM2M,EAAQ,KAAK,eAAe7mB,CAAK,EAAE,OACzCka,EAAK,MAAQ2M,CACd,CACF,CAMD,SAASnB,GAA0B,CACjCI,EAAQ,+BAAgC,EAAI,CAC7C,CAMD,SAASL,EAAgCzlB,EAAO,CAC9C,MAAMka,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQ,KAAK,eAAela,CAAK,EAAE,WAAW,CAAC,IAAM,GAAK,EAAI,CACpE,CAMD,SAASwlB,GAAsB,CAC7BM,EAAQ,8BAA8B,CACvC,CAOD,SAAS7C,EAAYjjB,EAAO,CAC1B,MAAMka,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7C,IAAIlX,EAAOkX,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,GAC7C,CAAClX,GAAQA,EAAK,OAAS,UAEzBA,EAAOnE,GAAM,EAEbmE,EAAK,SAAW,CACd,MAAO7C,GAAMH,EAAM,KAAK,CACzB,EAEDka,EAAK,SAAS,KAAKlX,CAAI,GAEzB,KAAK,MAAM,KAAKA,CAAI,CACrB,CAOD,SAASghB,EAAWhkB,EAAO,CACzB,MAAMgD,EAAO,KAAK,MAAM,IAAK,EAC7BA,EAAK,OAAS,KAAK,eAAehD,CAAK,EACvCgD,EAAK,SAAS,IAAM7C,GAAMH,EAAM,GAAG,CACpC,CAOD,SAASklB,EAAiBllB,EAAO,CAC/B,MAAMtB,EAAU,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAEhD,GAAIqnB,EAAQ,aAAa,EAAG,CAC1B,MAAM/iB,EAAOtE,EAAQ,SAASA,EAAQ,SAAS,OAAS,CAAC,EACzDsE,EAAK,SAAS,IAAM7C,GAAMH,EAAM,GAAG,EACnC8lB,EAAQ,aAAa,EACrB,MACD,CAEC,CAACC,EAAQ,8BAA8B,GACvCjD,EAAO,eAAe,SAASpkB,EAAQ,IAAI,IAE3CukB,EAAY,KAAK,KAAMjjB,CAAK,EAC5BgkB,EAAW,KAAK,KAAMhkB,CAAK,EAE9B,CAOD,SAAS4kB,GAAkB,CACzBkB,EAAQ,cAAe,EAAI,CAC5B,CAOD,SAASjB,GAAiB,CACxB,MAAM/f,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,CACd,CAOD,SAASggB,GAAiB,CACxB,MAAMhgB,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,CACd,CAOD,SAAS0f,GAAiB,CACxB,MAAM1f,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,CACd,CAOD,SAASqgB,IAAa,CACpB,MAAMjL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAI7C,GAAI6L,EAAQ,aAAa,EAAG,CAE1B,MAAMe,EAAgBf,EAAQ,eAAe,GAAK,WAClD7L,EAAK,MAAQ,YAEbA,EAAK,cAAgB4M,EAErB,OAAO5M,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEd4L,EAAQ,eAAe,CACxB,CAOD,SAASf,IAAc,CACrB,MAAM7K,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAI7C,GAAI6L,EAAQ,aAAa,EAAG,CAE1B,MAAMe,EAAgBf,EAAQ,eAAe,GAAK,WAClD7L,EAAK,MAAQ,YAEbA,EAAK,cAAgB4M,EAErB,OAAO5M,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEd4L,EAAQ,eAAe,CACxB,CAOD,SAASb,EAAgBjlB,EAAO,CAC9B,MAAMwd,EAAS,KAAK,eAAexd,CAAK,EAClC4mB,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAGjDA,EAAS,MAAQG,GAAavJ,CAAM,EAEpCoJ,EAAS,WAAahe,GAAoB4U,CAAM,EAAE,YAAa,CAChE,CAOD,SAASwH,IAAc,CACrB,MAAMgC,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC3CnpB,EAAQ,KAAK,OAAQ,EACrBqc,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7C,GADA4L,EAAQ,cAAe,EAAI,EACvB5L,EAAK,OAAS,OAAQ,CAGxB,MAAM+M,EAAWD,EAAS,SAC1B9M,EAAK,SAAW+M,CACtB,MACM/M,EAAK,IAAMrc,CAEd,CAOD,SAASwnB,IAAkC,CACzC,MAAMvgB,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMpV,CACZ,CAOD,SAASwgB,GAA4B,CACnC,MAAMxgB,EAAO,KAAK,OAAQ,EACpBoV,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQpV,CACd,CAOD,SAASygB,IAAiB,CACxBO,EAAQ,aAAa,CACtB,CAOD,SAASpC,IAAmB,CAC1BoC,EAAQ,gBAAiB,WAAW,CACrC,CAOD,SAASV,EAAsBplB,EAAO,CACpC,MAAMwO,EAAQ,KAAK,OAAQ,EACrB0L,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7CA,EAAK,MAAQ1L,EAEb0L,EAAK,WAAatR,GAChB,KAAK,eAAe5I,CAAK,CAC1B,EAAC,YAAa,EACf8lB,EAAQ,gBAAiB,MAAM,CAChC,CAOD,SAAS7B,GAA+BjkB,EAAO,CAC7C8lB,EAAQ,yBAA0B9lB,EAAM,IAAI,CAC7C,CAMD,SAASkkB,GAA8BlkB,EAAO,CAC5C,MAAM8E,EAAO,KAAK,eAAe9E,CAAK,EAChCgH,EAAO+e,EAAQ,wBAAwB,EAE7C,IAAIloB,EACAmJ,GACFnJ,EAAQqpB,GACNpiB,EACAkC,IAAS,kCAAoC,GAAK,EACnD,EACD8e,EAAQ,wBAAwB,GAGhCjoB,EADeyE,GAA8BwC,CAAI,EAGnD,MAAM9B,EAAO,KAAK,MAAM,IAAK,EAC7BA,EAAK,OAASnF,EACdmF,EAAK,SAAS,IAAM7C,GAAMH,EAAM,GAAG,CACpC,CAMD,SAAS+jB,GAAuB/jB,EAAO,CACrCgkB,EAAW,KAAK,KAAMhkB,CAAK,EAC3B,MAAMka,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,KAAK,eAAela,CAAK,CACrC,CAMD,SAAS8jB,GAAoB9jB,EAAO,CAClCgkB,EAAW,KAAK,KAAMhkB,CAAK,EAC3B,MAAMka,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,UAAY,KAAK,eAAela,CAAK,CACjD,CAOD,SAASkB,IAAa,CACpB,MAAO,CACL,KAAM,aACN,SAAU,CAAE,CACb,CACF,CAGD,SAASgiB,IAAW,CAClB,MAAO,CACL,KAAM,OACN,KAAM,KACN,KAAM,KACN,MAAO,EACR,CACF,CAGD,SAAS3e,IAAW,CAClB,MAAO,CACL,KAAM,aACN,MAAO,EACR,CACF,CAGD,SAAS+D,IAAa,CACpB,MAAO,CACL,KAAM,aACN,WAAY,GACZ,MAAO,KACP,MAAO,KACP,IAAK,EACN,CACF,CAGD,SAAS6a,IAAW,CAClB,MAAO,CACL,KAAM,WACN,SAAU,CAAE,CACb,CACF,CAGD,SAAS5R,IAAU,CAEjB,MAAO,CACL,KAAM,UACN,MAAO,OACP,SAAU,CAAE,CACb,CACF,CAGD,SAAS6R,IAAY,CACnB,MAAO,CACL,KAAM,OACP,CACF,CAGD,SAASC,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACR,CACF,CAGD,SAASC,IAAQ,CACf,MAAO,CACL,KAAM,QACN,MAAO,KACP,IAAK,GACL,IAAK,IACN,CACF,CAGD,SAASN,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,KACP,IAAK,GACL,SAAU,CAAE,CACb,CACF,CAMD,SAAS5S,GAAKpQ,EAAO,CACnB,MAAO,CACL,KAAM,OACN,QAASA,EAAM,OAAS,cACxB,MAAO,KACP,OAAQA,EAAM,QACd,SAAU,CAAE,CACb,CACF,CAMD,SAASujB,GAASvjB,EAAO,CACvB,MAAO,CACL,KAAM,WACN,OAAQA,EAAM,QACd,QAAS,KACT,SAAU,CAAE,CACb,CACF,CAGD,SAASwR,IAAY,CACnB,MAAO,CACL,KAAM,YACN,SAAU,CAAE,CACb,CACF,CAGD,SAASmS,IAAS,CAChB,MAAO,CACL,KAAM,SACN,SAAU,CAAE,CACb,CACF,CAGD,SAAS9kB,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACR,CACF,CAGD,SAASoR,IAAgB,CACvB,MAAO,CACL,KAAM,eACP,CACF,CACH,CAUA,SAAS9P,GAAMgnB,EAAG,CAChB,MAAO,CACL,KAAMA,EAAE,KACR,OAAQA,EAAE,OACV,OAAQA,EAAE,MACX,CACH,CAOA,SAASxB,GAAUyB,EAAUC,EAAY,CACvC,IAAItpB,EAAQ,GACZ,KAAO,EAAEA,EAAQspB,EAAW,QAAQ,CAClC,MAAMxpB,EAAQwpB,EAAWtpB,CAAK,EAC1B,MAAM,QAAQF,CAAK,EACrB8nB,GAAUyB,EAAUvpB,CAAK,EAEzBypB,GAAUF,EAAUvpB,CAAK,CAE5B,CACH,CAOA,SAASypB,GAAUF,EAAUE,EAAW,CAEtC,IAAItR,EACJ,IAAKA,KAAOsR,EACV,GAAIrP,GAAI,KAAKqP,EAAWtR,CAAG,GACzB,GAAIA,IAAQ,iBAAkB,CAC5B,MAAMuR,EAAQD,EAAUtR,CAAG,EACvBuR,GACFH,EAASpR,CAAG,EAAE,KAAK,GAAGuR,CAAK,CAErC,SAAiBvR,IAAQ,aAAc,CAC/B,MAAMuR,EAAQD,EAAUtR,CAAG,EACvBuR,GACFH,EAASpR,CAAG,EAAE,KAAK,GAAGuR,CAAK,CAE9B,SAAUvR,IAAQ,SAAWA,IAAQ,OAAQ,CAC5C,MAAMuR,EAAQD,EAAUtR,CAAG,EACvBuR,GACF,OAAO,OAAOH,EAASpR,CAAG,EAAGuR,CAAK,CAErC,EAGP,CAGA,SAASpB,GAAeqB,EAAMD,EAAO,CACnC,MAAIC,EACI,IAAI,MACR,iBACEA,EAAK,KACL,MACAtV,GAAkB,CAChB,MAAOsV,EAAK,MACZ,IAAKA,EAAK,GACpB,CAAS,EACD,0BACAD,EAAM,KACN,MACArV,GAAkB,CAChB,MAAOqV,EAAM,MACb,IAAKA,EAAM,GACrB,CAAS,EACD,WACH,EAEK,IAAI,MACR,oCACEA,EAAM,KACN,MACArV,GAAkB,CAChB,MAAOqV,EAAM,MACb,IAAKA,EAAM,GACrB,CAAS,EACD,iBACH,CAEL,CC31Ce,SAASE,GAAY5S,EAAS,CAkB3C,OAAO,OAAO,KAAM,CAAC,OAhBL+E,GAAQ,CAEtB,MAAMV,EAAmC,KAAK,KAAK,UAAU,EAE7D,OAAO0J,GACLhJ,EACA,OAAO,OAAO,GAAIV,EAAUrE,EAAS,CAInC,WAAY,KAAK,KAAK,qBAAqB,GAAK,CAAE,EAClD,gBAAiB,KAAK,KAAK,wBAAwB,GAAK,CAAE,CAClE,CAAO,CACF,CACF,CAEkC,CAAC,CACtC,CCdO,SAAS6S,GAAWnmB,EAAO2Y,EAAM,CAEtC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,aACT,WAAY,CAAE,EACd,SAAUyD,EAAM,KAAKA,EAAM,IAAI2Y,CAAI,EAAG,EAAI,CAC3C,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCTO,SAASslB,GAAU7hB,EAAO2Y,EAAM,CAErC,MAAMpc,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAY,CAAA,EAAI,SAAU,EAAE,EAC5E,OAAAyD,EAAM,MAAM2Y,EAAMpc,CAAM,EACjB,CAACyD,EAAM,UAAU2Y,EAAMpc,CAAM,EAAG,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,CACpE,CCJO,SAASI,GAAKqD,EAAO2Y,EAAM,CAChC,MAAMrc,EAAQqc,EAAK,MAAQA,EAAK,MAAQ;AAAA,EAAO,GAGzCyN,EAAOzN,EAAK,KAAOA,EAAK,KAAK,MAAM,qBAAqB,EAAI,KAE5D0N,EAAa,CAAE,EAEjBD,IACFC,EAAW,UAAY,CAAC,YAAcD,CAAI,GAK5C,IAAI7pB,EAAS,CACX,KAAM,UACN,QAAS,OACT,WAAA8pB,EACA,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAA/pB,CAAK,CAAC,CACjC,EAED,OAAIqc,EAAK,OACPpc,EAAO,KAAO,CAAC,KAAMoc,EAAK,IAAI,GAGhC3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACxBA,EAASyD,EAAM,UAAU2Y,EAAMpc,CAAM,EAGrCA,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAY,GAAI,SAAU,CAACA,CAAM,CAAC,EAC7EyD,EAAM,MAAM2Y,EAAMpc,CAAM,EACjBA,CACT,CCjCO,SAAS+pB,GAActmB,EAAO2Y,EAAM,CAEzC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAUyD,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCXO,SAASqlB,GAAS5hB,EAAO2Y,EAAM,CAEpC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUyD,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCRO,SAASgqB,GAAkBvmB,EAAO2Y,EAAM,CAC7C,MAAM6N,EAAK,OAAO7N,EAAK,UAAU,EAAE,YAAa,EAC1C8N,EAASpqB,GAAamqB,EAAG,YAAW,CAAE,EACtChqB,EAAQwD,EAAM,cAAc,QAAQwmB,CAAE,EAE5C,IAAIE,EAEAlqB,IAAU,IACZwD,EAAM,cAAc,KAAKwmB,CAAE,EAC3BxmB,EAAM,eAAewmB,CAAE,EAAI,EAC3BE,EAAU1mB,EAAM,cAAc,SAE9BA,EAAM,eAAewmB,CAAE,IACvBE,EAAUlqB,EAAQ,GAGpB,MAAMmqB,EAAe3mB,EAAM,eAAewmB,CAAE,EAGtC/E,EAAO,CACX,KAAM,UACN,QAAS,IACT,WAAY,CACV,KAAM,IAAMzhB,EAAM,cAAgB,MAAQymB,EAC1C,GACEzmB,EAAM,cACN,SACAymB,GACCE,EAAe,EAAI,IAAMA,EAAe,IAC3C,gBAAiB,GACjB,gBAAiB,CAAC,gBAAgB,CACnC,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAOD,CAAO,CAAC,CAAC,CAClD,EACD1mB,EAAM,MAAM2Y,EAAM8I,CAAI,EAGtB,MAAMmF,EAAM,CACV,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAU,CAACnF,CAAI,CAChB,EACD,OAAAzhB,EAAM,MAAM2Y,EAAMiO,CAAG,EACd5mB,EAAM,UAAU2Y,EAAMiO,CAAG,CAClC,CCvCO,SAASC,GAAS7mB,EAAO2Y,EAAM,CACpC,MAAMmO,EAAe9mB,EAAM,aAC3B,IAAI+mB,EAAK,EAET,KAAOA,KAAMD,GAAcC,IAE3B,MAAM5f,EAAa,OAAO4f,CAAE,EAE5B,OAAAD,EAAa3f,CAAU,EAAI,CACzB,KAAM,qBACN,WAAAA,EACA,SAAU,CAAC,CAAC,KAAM,YAAa,SAAUwR,EAAK,QAAQ,CAAC,EACvD,SAAUA,EAAK,QAChB,EAEM4N,GAAkBvmB,EAAO,CAC9B,KAAM,oBACN,WAAAmH,EACA,SAAUwR,EAAK,QACnB,CAAG,CACH,CC5BO,SAAS3I,GAAQhQ,EAAO2Y,EAAM,CAEnC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,IAAMoc,EAAK,MACpB,WAAY,CAAE,EACd,SAAU3Y,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCRO,SAASulB,GAAK9hB,EAAO2Y,EAAM,CAChC,GAAI3Y,EAAM,UAAW,CAEnB,MAAMzD,EAAS,CAAC,KAAM,MAAO,MAAOoc,EAAK,KAAK,EAC9C,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACpC,CAGD,OAAO,IACT,CCDO,SAASyqB,GAAOhnB,EAAO2Y,EAAM,CAClC,MAAMsO,EAAUtO,EAAK,cACrB,IAAIuO,EAAS,IAQb,GANID,IAAY,YACdC,GAAU,KACDD,IAAY,SACrBC,GAAU,KAAOvO,EAAK,OAASA,EAAK,YAAc,KAGhDA,EAAK,OAAS,iBAChB,MAAO,CAAC,KAAM,OAAQ,MAAO,KAAOA,EAAK,IAAMuO,CAAM,EAGvD,MAAMC,EAAWnnB,EAAM,IAAI2Y,CAAI,EACzBwH,EAAOgH,EAAS,CAAC,EAEnBhH,GAAQA,EAAK,OAAS,OACxBA,EAAK,MAAQ,IAAMA,EAAK,MAExBgH,EAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG7C,MAAM1lB,EAAO0lB,EAASA,EAAS,OAAS,CAAC,EAEzC,OAAI1lB,GAAQA,EAAK,OAAS,OACxBA,EAAK,OAASylB,EAEdC,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAOD,CAAM,CAAC,EAGtCC,CACT,CCtCO,SAASC,GAAepnB,EAAO2Y,EAAM,CAC1C,MAAM0G,EAAMrf,EAAM,WAAW2Y,EAAK,UAAU,EAE5C,GAAI,CAAC0G,EACH,OAAO2H,GAAOhnB,EAAO2Y,CAAI,EAI3B,MAAM0N,EAAa,CAAC,IAAKhqB,GAAagjB,EAAI,KAAO,EAAE,EAAG,IAAK1G,EAAK,GAAG,EAE/D0G,EAAI,QAAU,MAAQA,EAAI,QAAU,SACtCgH,EAAW,MAAQhH,EAAI,OAIzB,MAAM9iB,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA8pB,EAAY,SAAU,EAAE,EACzE,OAAArmB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCpBO,SAASwlB,GAAM/hB,EAAO2Y,EAAM,CAEjC,MAAM0N,EAAa,CAAC,IAAKhqB,GAAasc,EAAK,GAAG,CAAC,EAE3CA,EAAK,MAAQ,MAAQA,EAAK,MAAQ,SACpC0N,EAAW,IAAM1N,EAAK,KAGpBA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxC0N,EAAW,MAAQ1N,EAAK,OAI1B,MAAMpc,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA8pB,EAAY,SAAU,EAAE,EACzE,OAAArmB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CClBO,SAAS8qB,GAAWrnB,EAAO2Y,EAAM,CAEtC,MAAMrb,EAAO,CAAC,KAAM,OAAQ,MAAOqb,EAAK,MAAM,QAAQ,YAAa,GAAG,CAAC,EACvE3Y,EAAM,MAAM2Y,EAAMrb,CAAI,EAGtB,MAAMf,EAAS,CACb,KAAM,UACN,QAAS,OACT,WAAY,CAAE,EACd,SAAU,CAACe,CAAI,CAChB,EACD,OAAA0C,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCVO,SAAS+qB,GAActnB,EAAO2Y,EAAM,CACzC,MAAM0G,EAAMrf,EAAM,WAAW2Y,EAAK,UAAU,EAE5C,GAAI,CAAC0G,EACH,OAAO2H,GAAOhnB,EAAO2Y,CAAI,EAI3B,MAAM0N,EAAa,CAAC,KAAMhqB,GAAagjB,EAAI,KAAO,EAAE,CAAC,EAEjDA,EAAI,QAAU,MAAQA,EAAI,QAAU,SACtCgH,EAAW,MAAQhH,EAAI,OAIzB,MAAM9iB,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA8pB,EACA,SAAUrmB,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCzBO,SAASklB,GAAKzhB,EAAO2Y,EAAM,CAEhC,MAAM0N,EAAa,CAAC,KAAMhqB,GAAasc,EAAK,GAAG,CAAC,EAE5CA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxC0N,EAAW,MAAQ1N,EAAK,OAI1B,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA8pB,EACA,SAAUrmB,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCRO,SAASylB,GAAShiB,EAAO2Y,EAAM4O,EAAQ,CAC5C,MAAMC,EAAUxnB,EAAM,IAAI2Y,CAAI,EACxB8O,EAAQF,EAASG,GAAUH,CAAM,EAAII,GAAchP,CAAI,EAEvD0N,EAAa,CAAE,EAEfX,EAAW,CAAE,EAEnB,GAAI,OAAO/M,EAAK,SAAY,UAAW,CACrC,MAAMwH,EAAOqH,EAAQ,CAAC,EAEtB,IAAIvX,EAEAkQ,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IACtDlQ,EAAYkQ,GAEZlQ,EAAY,CAAC,KAAM,UAAW,QAAS,IAAK,WAAY,CAAA,EAAI,SAAU,EAAE,EACxEuX,EAAQ,QAAQvX,CAAS,GAGvBA,EAAU,SAAS,OAAS,GAC9BA,EAAU,SAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGvDA,EAAU,SAAS,QAAQ,CACzB,KAAM,UACN,QAAS,QACT,WAAY,CAAC,KAAM,WAAY,QAAS0I,EAAK,QAAS,SAAU,EAAI,EACpE,SAAU,CAAE,CAClB,CAAK,EAID0N,EAAW,UAAY,CAAC,gBAAgB,CACzC,CAED,IAAI7pB,EAAQ,GAEZ,KAAO,EAAEA,EAAQgrB,EAAQ,QAAQ,CAC/B,MAAMI,EAAQJ,EAAQhrB,CAAK,GAIzBirB,GACAjrB,IAAU,GACVorB,EAAM,OAAS,WACfA,EAAM,UAAY,MAElBlC,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGvCkC,EAAM,OAAS,WAAaA,EAAM,UAAY,KAAO,CAACH,EACxD/B,EAAS,KAAK,GAAGkC,EAAM,QAAQ,EAE/BlC,EAAS,KAAKkC,CAAK,CAEtB,CAED,MAAMnmB,EAAO+lB,EAAQA,EAAQ,OAAS,CAAC,EAGnC/lB,IAASgmB,GAAShmB,EAAK,OAAS,WAAaA,EAAK,UAAY,MAChEikB,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAI3C,MAAMnpB,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAA8pB,EAAY,SAAAX,CAAQ,EACpE,OAAA1lB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CAMA,SAASmrB,GAAU/O,EAAM,CACvB,IAAI8O,EAAQ,GACZ,GAAI9O,EAAK,OAAS,OAAQ,CACxB8O,EAAQ9O,EAAK,QAAU,GACvB,MAAM+M,EAAW/M,EAAK,SACtB,IAAInc,EAAQ,GAEZ,KAAO,CAACirB,GAAS,EAAEjrB,EAAQkpB,EAAS,QAClC+B,EAAQE,GAAcjC,EAASlpB,CAAK,CAAC,CAExC,CAED,OAAOirB,CACT,CAMA,SAASE,GAAchP,EAAM,CAC3B,MAAMkP,EAASlP,EAAK,OAEpB,OAA+BkP,GAC3BlP,EAAK,SAAS,OAAS,CAE7B,CC/GO,SAAS9J,GAAK7O,EAAO2Y,EAAM,CAEhC,MAAM0N,EAAa,CAAE,EACfmB,EAAUxnB,EAAM,IAAI2Y,CAAI,EAC9B,IAAInc,EAAQ,GAOZ,IALI,OAAOmc,EAAK,OAAU,UAAYA,EAAK,QAAU,IACnD0N,EAAW,MAAQ1N,EAAK,OAInB,EAAEnc,EAAQgrB,EAAQ,QAAQ,CAC/B,MAAMI,EAAQJ,EAAQhrB,CAAK,EAE3B,GACEorB,EAAM,OAAS,WACfA,EAAM,UAAY,MAClBA,EAAM,YACN,MAAM,QAAQA,EAAM,WAAW,SAAS,GACxCA,EAAM,WAAW,UAAU,SAAS,gBAAgB,EACpD,CACAvB,EAAW,UAAY,CAAC,oBAAoB,EAC5C,KACD,CACF,CAGD,MAAM9pB,EAAS,CACb,KAAM,UACN,QAASoc,EAAK,QAAU,KAAO,KAC/B,WAAA0N,EACA,SAAUrmB,EAAM,KAAKwnB,EAAS,EAAI,CACnC,EACD,OAAAxnB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCpCO,SAAS0T,GAAUjQ,EAAO2Y,EAAM,CAErC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAY,CAAE,EACd,SAAUyD,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCTO,SAASurB,GAAK9nB,EAAO2Y,EAAM,CAEhC,MAAMpc,EAAS,CAAC,KAAM,OAAQ,SAAUyD,EAAM,KAAKA,EAAM,IAAI2Y,CAAI,CAAC,CAAC,EACnE,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCNO,SAAS6lB,GAAOpiB,EAAO2Y,EAAM,CAElC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,SACT,WAAY,CAAE,EACd,SAAUyD,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCGO,MAAMwrB,GAAanpB,GAAM,OAAO,EAU1BopB,GAAWppB,GAAM,KAAK,EAU5B,SAASgS,GAAS+H,EAAM,CAC7B,MAAO,CAAC,MAAOoP,GAAWpP,CAAI,EAAG,IAAKqP,GAASrP,CAAI,CAAC,CACtD,CAUA,SAAS/Z,GAAM6G,EAAM,CACnB,OAAO7G,EAQP,SAASA,EAAM+Z,EAAM,CACnB,MAAM/Z,EAAS+Z,GAAQA,EAAK,UAAYA,EAAK,SAASlT,CAAI,GAAM,CAAE,EAGlE,MAAO,CAEL,KAAM7G,EAAM,MAAQ,KAEpB,OAAQA,EAAM,QAAU,KAExB,OAAQA,EAAM,OAAS,GAAKA,EAAM,OAAS,IAC5C,CACF,CACH,CCjEO,SAASqpB,GAAMjoB,EAAO2Y,EAAM,CACjC,MAAMuP,EAAOloB,EAAM,IAAI2Y,CAAI,EACrBwP,EAAWD,EAAK,MAAO,EAEvBE,EAAe,CAAE,EAEvB,GAAID,EAAU,CAEZ,MAAMhI,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUngB,EAAM,KAAK,CAACmoB,CAAQ,EAAG,EAAI,CACtC,EACDnoB,EAAM,MAAM2Y,EAAK,SAAS,CAAC,EAAGwH,CAAI,EAClCiI,EAAa,KAAKjI,CAAI,CACvB,CAED,GAAI+H,EAAK,OAAS,EAAG,CAEnB,MAAMG,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUroB,EAAM,KAAKkoB,EAAM,EAAI,CAChC,EAEKzrB,EAAQsrB,GAAWpP,EAAK,SAAS,CAAC,CAAC,EACnC/a,EAAMoqB,GAASrP,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,CAAC,EACxDlc,EAAM,MAAQmB,EAAI,OAAMyqB,EAAK,SAAW,CAAC,MAAA5rB,EAAO,IAAAmB,CAAG,GACvDwqB,EAAa,KAAKC,CAAI,CACvB,CAGD,MAAM9rB,EAAS,CACb,KAAM,UACN,QAAS,QACT,WAAY,CAAE,EACd,SAAUyD,EAAM,KAAKooB,EAAc,EAAI,CACxC,EACD,OAAApoB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CChCO,SAAS+rB,GAAStoB,EAAO2Y,EAAM4O,EAAQ,CAC5C,MAAMgB,EAAWhB,EAASA,EAAO,SAAW,OAGtCre,GADWqf,EAAWA,EAAS,QAAQ5P,CAAI,EAAI,KACxB,EAAI,KAAO,KAClC6P,EAAQjB,GAAUA,EAAO,OAAS,QAAUA,EAAO,MAAQ,OAC3DpS,EAASqT,EAAQA,EAAM,OAAS7P,EAAK,SAAS,OACpD,IAAI8P,EAAY,GAEhB,MAAMC,EAAQ,CAAE,EAEhB,KAAO,EAAED,EAAYtT,GAAQ,CAE3B,MAAMwT,EAAOhQ,EAAK,SAAS8P,CAAS,EAE9BpC,EAAa,CAAE,EACfuC,EAAaJ,EAAQA,EAAMC,CAAS,EAAI,OAE1CG,IACFvC,EAAW,MAAQuC,GAIrB,IAAIrsB,EAAS,CAAC,KAAM,UAAW,QAAA2M,EAAS,WAAAmd,EAAY,SAAU,EAAE,EAE5DsC,IACFpsB,EAAO,SAAWyD,EAAM,IAAI2oB,CAAI,EAChC3oB,EAAM,MAAM2oB,EAAMpsB,CAAM,EACxBA,EAASyD,EAAM,UAAU2Y,EAAMpc,CAAM,GAGvCmsB,EAAM,KAAKnsB,CAAM,CAClB,CAGD,MAAMA,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUyD,EAAM,KAAK0oB,EAAO,EAAI,CACjC,EACD,OAAA1oB,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCvDO,SAASssB,GAAU7oB,EAAO2Y,EAAM,CAIrC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUyD,EAAM,IAAI2Y,CAAI,CACzB,EACD,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CC5BA,MAAMusB,GAAM,EACNC,GAAQ,GAWP,SAASC,GAAU1sB,EAAO,CAC/B,MAAM2sB,EAAS,OAAO3sB,CAAK,EACrBwkB,EAAS,YACf,IAAII,EAAQJ,EAAO,KAAKmI,CAAM,EAC1BC,EAAO,EAEX,MAAMC,EAAQ,CAAE,EAEhB,KAAOjI,GACLiI,EAAM,KACJC,GAASH,EAAO,MAAMC,EAAMhI,EAAM,KAAK,EAAGgI,EAAO,EAAG,EAAI,EACxDhI,EAAM,CAAC,CACR,EAEDgI,EAAOhI,EAAM,MAAQA,EAAM,CAAC,EAAE,OAC9BA,EAAQJ,EAAO,KAAKmI,CAAM,EAG5B,OAAAE,EAAM,KAAKC,GAASH,EAAO,MAAMC,CAAI,EAAGA,EAAO,EAAG,EAAK,CAAC,EAEjDC,EAAM,KAAK,EAAE,CACtB,CAYA,SAASC,GAAS9sB,EAAOG,EAAOmB,EAAK,CACnC,IAAIkiB,EAAa,EACbE,EAAW1jB,EAAM,OAErB,GAAIG,EAAO,CACT,IAAIE,EAAOL,EAAM,YAAYwjB,CAAU,EAEvC,KAAOnjB,IAASmsB,IAAOnsB,IAASosB,IAC9BjJ,IACAnjB,EAAOL,EAAM,YAAYwjB,CAAU,CAEtC,CAED,GAAIliB,EAAK,CACP,IAAIjB,EAAOL,EAAM,YAAY0jB,EAAW,CAAC,EAEzC,KAAOrjB,IAASmsB,IAAOnsB,IAASosB,IAC9B/I,IACArjB,EAAOL,EAAM,YAAY0jB,EAAW,CAAC,CAExC,CAED,OAAOA,EAAWF,EAAaxjB,EAAM,MAAMwjB,EAAYE,CAAQ,EAAI,EACrE,CCjDO,SAAS1iB,GAAK0C,EAAO2Y,EAAM,CAEhC,MAAMpc,EAAS,CAAC,KAAM,OAAQ,MAAOysB,GAAU,OAAOrQ,EAAK,KAAK,CAAC,CAAC,EAClE,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCRO,SAASmS,GAAc1O,EAAO2Y,EAAM,CAEzC,MAAMpc,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAU,CAAE,CACb,EACD,OAAAyD,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CCEO,MAAM8sB,GAAW,CACtB,WAAAlD,GACA,MAAOtE,GACP,KAAAllB,GACA,OAAQ2pB,GACR,SAAA1E,GACA,kBAAA2E,GACA,SAAAM,GACA,QAAA7W,GACA,KAAA8R,GACA,eAAAsF,GACA,MAAArF,GACA,WAAAsF,GACA,cAAAC,GACA,KAAA7F,GACA,SAAAO,GACA,KAAAnT,GACA,UAAAoB,GACA,KAAA6X,GACA,OAAA1F,GACA,MAAA6F,GACA,UAAAY,GACA,SAAAP,GACA,KAAAhrB,GACA,cAAAoR,GACA,KAAM4a,GACN,KAAMA,GACN,WAAYA,GACZ,mBAAoBA,EACtB,EAGA,SAASA,IAAS,CAEhB,OAAO,IACT,CCzCO,SAASC,GAAU5Q,EAAM,CAC9B,MACE,CAACA,GACD,CAACA,EAAK,UACN,CAACA,EAAK,SAAS,OACf,CAACA,EAAK,SAAS,MAAM,MACrB,CAACA,EAAK,SAAS,MAAM,QACrB,CAACA,EAAK,SAAS,KACf,CAACA,EAAK,SAAS,IAAI,MACnB,CAACA,EAAK,SAAS,IAAI,MAEvB,CCdA,MAAMjC,GAAM,CAAE,EAAC,eAaR,SAAS8S,GAAYtQ,EAAM,CAEhC,MAAMuQ,EAAQ,OAAO,OAAO,IAAI,EAEhC,GAAI,CAACvQ,GAAQ,CAACA,EAAK,KACjB,MAAM,IAAI,MAAM,sCAAsC,EAGxD,OAAAwQ,GAAMxQ,EAAM,aAAenS,GAAe,CACxC,MAAMyf,EAAKmD,GAAM5iB,EAAW,UAAU,EAClCyf,GAAM,CAAC9P,GAAI,KAAK+S,EAAOjD,CAAE,IAC3BiD,EAAMjD,CAAE,EAAIzf,EAElB,CAAG,EAEMA,EAGP,SAASA,EAAWI,EAAY,CAC9B,MAAMqf,EAAKmD,GAAMxiB,CAAU,EAE3B,OAAOqf,GAAM9P,GAAI,KAAK+S,EAAOjD,CAAE,EAAIiD,EAAMjD,CAAE,EAAI,IAChD,CACH,CAMA,SAASmD,GAAMrtB,EAAO,CACpB,OAAO,OAAOA,GAAS,EAAE,EAAE,YAAa,CAC1C,CCwGA,MAAMoa,GAAM,CAAE,EAAC,eAYR,SAASkT,GAAY1Q,EAAM5F,EAAS,CACzC,MAAMqE,EAAWrE,GAAW,CAAE,EACxBuW,EAAYlS,EAAS,oBAAsB,GAE3CmP,EAAe,CAAE,EAQvB,OAAA9mB,EAAM,UAAY6pB,EAElB7pB,EAAM,cACJ2X,EAAS,gBAAkB,QAAaA,EAAS,gBAAkB,KAC/D,gBACAA,EAAS,cAEf3X,EAAM,cAAgB2X,EAAS,eAAiB,YAEhD3X,EAAM,qBAAuB2X,EAAS,sBAAwB,KAE9D3X,EAAM,wBAA0B2X,EAAS,yBAA2B,CAClE,UAAW,CAAC,SAAS,CACtB,EAED3X,EAAM,kBAAoB2X,EAAS,mBAAqB,kBAExD3X,EAAM,eAAiB2X,EAAS,eAEhC3X,EAAM,YAAc2X,EAAS,YAE7B3X,EAAM,SAAW,CAAC,GAAGqpB,GAAU,GAAG1R,EAAS,QAAQ,EAInD3X,EAAM,WAAawpB,GAAYtQ,CAAI,EACnClZ,EAAM,aAAe8mB,EAErB9mB,EAAM,cAAgB,CAAE,EAExBA,EAAM,eAAiB,CAAE,EAEzBA,EAAM,MAAQ8pB,GACd9pB,EAAM,UAAY+pB,GAClB/pB,EAAM,IAAMgqB,EACZhqB,EAAM,IAAMiqB,EACZjqB,EAAM,KAAO+V,GAEb/V,EAAM,QAAUkqB,EAEhBR,GAAMxQ,EAAM,qBAAuBnS,GAAe,CAChD,MAAMyf,EAAK,OAAOzf,EAAW,UAAU,EAAE,YAAa,EAIjD2P,GAAI,KAAKoQ,EAAcN,CAAE,IAC5BM,EAAaN,CAAE,EAAIzf,EAEzB,CAAG,EAGM/G,EAWP,SAASkqB,EAAQjE,EAAMD,EAAO,CAE5B,GAAIC,GAAQ,SAAUA,GAAQA,EAAK,KAAM,CAEvC,MAAM1iB,EAAO0iB,EAAK,KAEd1iB,EAAK,QACHyiB,EAAM,OAAS,YACjBA,EAAQ,CACN,KAAM,UACN,QAAS,GACT,WAAY,CAAE,EACd,SAAU,CAAE,CACb,GAGHA,EAAM,QAAUziB,EAAK,OAGnByiB,EAAM,OAAS,WAAaziB,EAAK,cACnCyiB,EAAM,WAAa,CAAC,GAAGA,EAAM,WAAY,GAAGziB,EAAK,WAAW,GAG1D,aAAcyiB,GAASA,EAAM,UAAYziB,EAAK,YAChDyiB,EAAM,SAAWziB,EAAK,UAEzB,CAED,GAAI0iB,EAAM,CACR,MAAMkE,EAAM,SAAUlE,EAAOA,EAAO,CAAC,SAAUA,CAAI,EAE9CsD,GAAUY,CAAG,IAEhBnE,EAAM,SAAW,CAAC,MAAO+B,GAAWoC,CAAG,EAAG,IAAKnC,GAASmC,CAAG,CAAC,EAE/D,CAED,OAAOnE,CACR,CAUD,SAAShmB,EAAM2Y,EAAMzP,EAASkhB,EAAO1E,EAAU,CAC7C,OAAI,MAAM,QAAQ0E,CAAK,IACrB1E,EAAW0E,EACXA,EAAQ,CAAE,GAILF,EAAQvR,EAAM,CACnB,KAAM,UACN,QAAAzP,EACA,WAAYkhB,GAAS,CAAE,EACvB,SAAU1E,GAAY,CAAE,CAC9B,CAAK,CACF,CAaD,SAASsE,EAASrR,EAAM4O,EAAQ,CAE9B,OAAO1N,GAAI7Z,EAAO2Y,EAAM4O,CAAM,CAC/B,CAUD,SAAS0C,EAAS1C,EAAQ,CAExB,OAAOzN,GAAI9Z,EAAOunB,CAAM,CACzB,CACH,CAYA,SAASuC,GAAM7M,EAAMoN,EAAI,CACnBpN,EAAK,WAAUoN,EAAG,SAAWzZ,GAASqM,CAAI,EAChD,CAcA,SAAS8M,GAAU9M,EAAMoN,EAAI,CAE3B,IAAI9tB,EAAS8tB,EAGb,GAAIpN,GAAQA,EAAK,KAAM,CACrB,MAAMqN,EAAQrN,EAAK,KAAK,MAClBsN,EAAYtN,EAAK,KAAK,UACtBuN,EAAcvN,EAAK,KAAK,YAE1B,OAAOqN,GAAU,WAGf/tB,EAAO,OAAS,UAClBA,EAAO,QAAU+tB,EAOjB/tB,EAAS,CACP,KAAM,UACN,QAAS+tB,EACT,WAAY,CAAE,EACd,SAAU,CAAE,CACb,GAcD/tB,EAAO,OAAS,WAAaiuB,IAC/BjuB,EAAO,WAAa,CAAC,GAAGA,EAAO,WAAY,GAAGiuB,CAAW,GAIzD,aAAcjuB,GACdA,EAAO,UACPguB,IAAc,MACdA,IAAc,SAGdhuB,EAAO,SAAWguB,EAErB,CAED,OAAOhuB,CACT,CAeO,SAASsd,GAAI7Z,EAAO2Y,EAAM4O,EAAQ,CACvC,MAAM9hB,EAAOkT,GAAQA,EAAK,KAG1B,GAAI,CAAClT,EACH,MAAM,IAAI,MAAM,uBAAyBkT,EAAO,GAAG,EAGrD,OAAIjC,GAAI,KAAK1W,EAAM,SAAUyF,CAAI,EACxBzF,EAAM,SAASyF,CAAI,EAAEzF,EAAO2Y,EAAM4O,CAAM,EAG7CvnB,EAAM,aAAeA,EAAM,YAAY,SAASyF,CAAI,EAG/C,aAAckT,EAAO,CAAC,GAAGA,EAAM,SAAUmB,GAAI9Z,EAAO2Y,CAAI,CAAC,EAAIA,EAGlE3Y,EAAM,eACDA,EAAM,eAAeA,EAAO2Y,EAAM4O,CAAM,EAG1CkD,GAAsBzqB,EAAO2Y,CAAI,CAC1C,CAaO,SAASmB,GAAI9Z,EAAOunB,EAAQ,CAEjC,MAAM7R,EAAS,CAAE,EAEjB,GAAI,aAAc6R,EAAQ,CACxB,MAAMmD,EAAQnD,EAAO,SACrB,IAAI/qB,EAAQ,GACZ,KAAO,EAAEA,EAAQkuB,EAAM,QAAQ,CAC7B,MAAMnuB,EAASsd,GAAI7Z,EAAO0qB,EAAMluB,CAAK,EAAG+qB,CAAM,EAG9C,GAAIhrB,EAAQ,CACV,GAAIC,GAASkuB,EAAMluB,EAAQ,CAAC,EAAE,OAAS,UACjC,CAAC,MAAM,QAAQD,CAAM,GAAKA,EAAO,OAAS,SAC5CA,EAAO,MAAQA,EAAO,MAAM,QAAQ,OAAQ,EAAE,GAG5C,CAAC,MAAM,QAAQA,CAAM,GAAKA,EAAO,OAAS,WAAW,CACvD,MAAM4jB,EAAO5jB,EAAO,SAAS,CAAC,EAE1B4jB,GAAQA,EAAK,OAAS,SACxBA,EAAK,MAAQA,EAAK,MAAM,QAAQ,OAAQ,EAAE,EAE7C,CAGC,MAAM,QAAQ5jB,CAAM,EACtBmZ,EAAO,KAAK,GAAGnZ,CAAM,EAErBmZ,EAAO,KAAKnZ,CAAM,CAErB,CACF,CACF,CAED,OAAOmZ,CACT,CAYA,SAAS+U,GAAsBzqB,EAAO2Y,EAAM,CAC1C,MAAMpV,EAAOoV,EAAK,MAAQ,CAAE,EAEtBpc,EACJ,UAAWoc,GACX,EAAEjC,GAAI,KAAKnT,EAAM,aAAa,GAAKmT,GAAI,KAAKnT,EAAM,WAAW,GACzD,CAAC,KAAM,OAAQ,MAAOoV,EAAK,KAAK,EAChC,CACE,KAAM,UACN,QAAS,MACT,WAAY,CAAE,EACd,SAAUmB,GAAI9Z,EAAO2Y,CAAI,CAC1B,EAEP,OAAA3Y,EAAM,MAAM2Y,EAAMpc,CAAM,EACjByD,EAAM,UAAU2Y,EAAMpc,CAAM,CACrC,CAcO,SAASwZ,GAAK2U,EAAOjD,EAAO,CAEjC,MAAMlrB,EAAS,CAAE,EACjB,IAAIC,EAAQ,GAMZ,IAJIirB,GACFlrB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlC,EAAEC,EAAQkuB,EAAM,QACjBluB,GAAOD,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAClDA,EAAO,KAAKmuB,EAAMluB,CAAK,CAAC,EAG1B,OAAIirB,GAASiD,EAAM,OAAS,GAC1BnuB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlCA,CACT,CC/iBO,SAASouB,GAAO3qB,EAAO,CAE5B,MAAM4qB,EAAY,CAAE,EACpB,IAAIpuB,EAAQ,GAEZ,KAAO,EAAEA,EAAQwD,EAAM,cAAc,QAAQ,CAC3C,MAAMqf,EAAMrf,EAAM,aAAaA,EAAM,cAAcxD,CAAK,CAAC,EAEzD,GAAI,CAAC6iB,EACH,SAGF,MAAMxa,EAAU7E,EAAM,IAAIqf,CAAG,EACvBmH,EAAK,OAAOnH,EAAI,UAAU,EAAE,YAAa,EACzCoH,EAASpqB,GAAamqB,EAAG,YAAW,CAAE,EAC5C,IAAIqE,EAAiB,EAErB,MAAMC,EAAiB,CAAE,EAEzB,KAAO,EAAED,GAAkB7qB,EAAM,eAAewmB,CAAE,GAAG,CAEnD,MAAMuE,EAAgB,CACpB,KAAM,UACN,QAAS,IACT,WAAY,CACV,KACE,IACA/qB,EAAM,cACN,SACAymB,GACCoE,EAAiB,EAAI,IAAMA,EAAiB,IAC/C,oBAAqB,GACrB,UAAW,CAAC,uBAAuB,EACnC,UAAW7qB,EAAM,iBAClB,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,CACtC,EAEG6qB,EAAiB,GACnBE,EAAc,SAAS,KAAK,CAC1B,KAAM,UACN,QAAS,MACT,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAOF,CAAc,CAAC,CAAC,CAClE,CAAS,EAGCC,EAAe,OAAS,GAC1BA,EAAe,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGhDA,EAAe,KAAKC,CAAa,CAClC,CAED,MAAMtpB,EAAOoD,EAAQA,EAAQ,OAAS,CAAC,EAEvC,GAAIpD,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IAAK,CAC3D,MAAMupB,EAAWvpB,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,EACnDupB,GAAYA,EAAS,OAAS,OAChCA,EAAS,OAAS,IAElBvpB,EAAK,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG/CA,EAAK,SAAS,KAAK,GAAGqpB,CAAc,CAC1C,MACMjmB,EAAQ,KAAK,GAAGimB,CAAc,EAIhC,MAAM9I,EAAW,CACf,KAAM,UACN,QAAS,KACT,WAAY,CAAC,GAAIhiB,EAAM,cAAgB,MAAQymB,CAAM,EACrD,SAAUzmB,EAAM,KAAK6E,EAAS,EAAI,CACnC,EAED7E,EAAM,MAAMqf,EAAK2C,CAAQ,EAEzB4I,EAAU,KAAK5I,CAAQ,CACxB,CAED,GAAI4I,EAAU,SAAW,EAIzB,MAAO,CACL,KAAM,UACN,QAAS,UACT,WAAY,CAAC,cAAe,GAAM,UAAW,CAAC,WAAW,CAAC,EAC1D,SAAU,CACR,CACE,KAAM,UACN,QAAS5qB,EAAM,qBACf,WAAY,CAEV,GAAG,KAAK,MAAM,KAAK,UAAUA,EAAM,uBAAuB,CAAC,EAC3D,GAAI,gBACL,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAOA,EAAM,aAAa,CAAC,CACtD,EACD,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAC1B,CACE,KAAM,UACN,QAAS,KACT,WAAY,CAAE,EACd,SAAUA,EAAM,KAAK4qB,EAAW,EAAI,CACrC,EACD,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAC3B,CACF,CACH,CC/BO,SAASK,GAAO/R,EAAM5F,EAAS,CACpC,MAAMtT,EAAQ4pB,GAAY1Q,EAAM5F,CAAO,EACjCqF,EAAO3Y,EAAM,IAAIkZ,EAAM,IAAI,EAC3BgS,EAAOP,GAAO3qB,CAAK,EAEzB,OAAIkrB,GAIFvS,EAAK,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAAGuS,CAAI,EAI/C,MAAM,QAAQvS,CAAI,EAAI,CAAC,KAAM,OAAQ,SAAUA,CAAI,EAAIA,CAChE,CC3EA,MAAMwS,GAGF,SAAU5T,EAAajE,EAAS,CAC9B,OAAOiE,GAAe,QAASA,EAC3B6T,GAAO7T,EAAajE,CAAO,EAC3B+X,GAAO9T,GAAejE,CAAO,CAClC,EAGLgY,GAAeH,GAQf,SAASC,GAAO7T,EAAajE,EAAS,CACpC,MAAO,CAACqF,EAAML,EAAMxb,IAAS,CAC3Bya,EAAY,IAAI0T,GAAOtS,EAAMrF,CAAO,EAAGgF,EAAOtF,GAAU,CACtDlW,EAAKkW,CAAK,CAChB,CAAK,CACF,CACH,CAQA,SAASqY,GAAO/X,EAAS,CAEvB,OAAQqF,GAASsS,GAAOtS,EAAMrF,CAAO,CACvC,CC/Ce,SAASiY,GAAajY,EAAS,CAC5C,GAAIA,EAAQ,iBAAmBA,EAAQ,mBACrC,MAAM,IAAI,UACR,0EACD,EAGH,GACEA,EAAQ,iBACRA,EAAQ,oBACRA,EAAQ,aAER,OAAQ4F,GAAS,CACfwQ,GAAMxQ,EAAM,UAAW,CAACP,EAAMnc,EAAOgvB,IAAY,CAC/C,MAAMjE,EAAsCiE,EAE5C,IAAIC,EAYJ,GAVInY,EAAQ,gBACVmY,EAAS,CAACnY,EAAQ,gBAAgB,SAASqF,EAAK,OAAO,EAC9CrF,EAAQ,qBACjBmY,EAASnY,EAAQ,mBAAmB,SAASqF,EAAK,OAAO,GAGvD,CAAC8S,GAAUnY,EAAQ,cAAgB,OAAO9W,GAAU,WACtDivB,EAAS,CAACnY,EAAQ,aAAaqF,EAAMnc,EAAO+qB,CAAM,GAGhDkE,GAAU,OAAOjvB,GAAU,SAC7B,OAAI8W,EAAQ,kBAAoBqF,EAAK,SACnC4O,EAAO,SAAS,OAAO/qB,EAAO,EAAG,GAAGmc,EAAK,QAAQ,EAEjD4O,EAAO,SAAS,OAAO/qB,EAAO,CAAC,EAG1BA,CAIjB,CAAO,CACF,CAEL;;;;;;;;GCxDa,IAAIkvB,GAAE,OAAO,IAAI,eAAe,EAAEC,GAAE,OAAO,IAAI,cAAc,EAAE/F,GAAE,OAAO,IAAI,gBAAgB,EAAEgG,GAAE,OAAO,IAAI,mBAAmB,EAAEC,GAAE,OAAO,IAAI,gBAAgB,EAAEC,GAAE,OAAO,IAAI,gBAAgB,EAAEC,GAAE,OAAO,IAAI,eAAe,EAAEC,GAAE,OAAO,IAAI,sBAAsB,EAAEC,GAAE,OAAO,IAAI,mBAAmB,EAAEC,GAAE,OAAO,IAAI,gBAAgB,EAAEC,GAAE,OAAO,IAAI,qBAAqB,EAAEC,GAAE,OAAO,IAAI,YAAY,EAAEC,GAAE,OAAO,IAAI,YAAY,EAAEC,GAAE,OAAO,IAAI,iBAAiB,EAAEC,GAAEA,GAAE,OAAO,IAAI,wBAAwB,EAChf,SAASC,EAAEC,EAAE,CAAC,GAAc,OAAOA,GAAlB,UAA4BA,IAAP,KAAS,CAAC,IAAIC,EAAED,EAAE,SAAS,OAAOC,GAAG,KAAKhB,GAAE,OAAOe,EAAEA,EAAE,KAAKA,EAAC,CAAE,KAAK7G,GAAE,KAAKiG,GAAE,KAAKD,GAAE,KAAKM,GAAE,KAAKC,GAAE,OAAOM,EAAE,QAAQ,OAAOA,EAAEA,GAAGA,EAAE,SAASA,EAAC,CAAE,KAAKT,GAAE,KAAKD,GAAE,KAAKE,GAAE,KAAKI,GAAE,KAAKD,GAAE,KAAKN,GAAE,OAAOW,EAAE,QAAQ,OAAOC,CAAC,CAAC,CAAC,KAAKf,GAAE,OAAOe,CAAC,CAAC,CAAC,CAAwBC,EAAA,gBAACZ,qBAA0BD,GAAEa,EAAA,QAAgBjB,GAAEiB,EAAA,WAAmBV,GAAkBU,EAAA,SAAC/G,GAAE+G,EAAA,KAAaN,GAAcM,EAAA,KAACP,GAAgBO,EAAA,OAAChB,cAAmBE,GAAEc,EAAA,WAAmBf,GAAkBe,EAAA,SAACT,GACheS,EAAA,aAAqBR,GAAEQ,EAAA,YAAoB,UAAU,CAAC,MAAM,EAAE,qBAA2B,UAAU,CAAC,MAAM,EAAE,EAA2BA,EAAA,kBAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIV,EAAC,EAA2BY,EAAA,kBAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIX,EAAC,EAAmBa,EAAA,UAAC,SAASF,EAAE,CAAC,OAAiB,OAAOA,GAAlB,UAA4BA,IAAP,MAAUA,EAAE,WAAWf,EAAC,EAAsBiB,EAAA,aAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIR,EAAC,EAAoBU,EAAA,WAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAI7G,EAAC,EAAgB+G,EAAA,OAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIJ,EAAC,EAAgBM,EAAA,OAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIL,EAAC,EACveO,EAAA,SAAiB,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAId,EAAC,eAAqB,SAASc,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIZ,EAAC,EAAsBc,EAAA,aAAC,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIb,EAAC,EAAEe,EAAA,WAAmB,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIP,EAAC,EAAES,EAAA,eAAuB,SAASF,EAAE,CAAC,OAAOD,EAAEC,CAAC,IAAIN,EAAC,EACxNQ,EAAA,mBAAC,SAASF,EAAE,CAAC,OAAiB,OAAOA,GAAlB,UAAkC,OAAOA,GAApB,YAAuBA,IAAI7G,IAAG6G,IAAIZ,IAAGY,IAAIb,IAAGa,IAAIP,IAAGO,IAAIN,IAAGM,IAAIH,IAAc,OAAOG,GAAlB,UAA4BA,IAAP,OAAWA,EAAE,WAAWJ,IAAGI,EAAE,WAAWL,IAAGK,EAAE,WAAWX,IAAGW,EAAE,WAAWV,IAAGU,EAAE,WAAWR,IAAGQ,EAAE,WAAWF,IAAYE,EAAE,cAAX,OAA6B,EAAgBE,EAAA,OAACH,ECV/SI,GAAA,QAAiBC,wDCDfC,GAAgB,kCAEhBC,GAAgB,MAChBC,GAAmB,OAGnBC,GAAiB,yCACjBC,GAAc,QACdC,GAAc,uDACdC,GAAkB,UAGlBC,GAAa,aAGbC,GAAU;AAAA,EACVC,GAAgB,IAChBC,GAAW,IACXC,GAAe,GAGfC,GAAe,UACfC,GAAmB,cASvBC,GAAiB,SAASC,EAAOva,EAAS,CACxC,GAAI,OAAOua,GAAU,SACnB,MAAM,IAAI,UAAU,iCAAiC,EAGvD,GAAI,CAACA,EAAO,MAAO,GAEnBva,EAAUA,GAAW,GAKrB,IAAIwa,EAAS,EACT3P,EAAS,EAOb,SAAS4P,EAAeC,EAAK,CAC3B,IAAI7E,EAAQ6E,EAAI,MAAMjB,EAAa,EAC/B5D,IAAO2E,GAAU3E,EAAM,QAC3B,IAAIjU,EAAI8Y,EAAI,YAAYV,EAAO,EAC/BnP,EAAS,CAACjJ,EAAI8Y,EAAI,OAAS9Y,EAAIiJ,EAAS6P,EAAI,MAC7C,CAOD,SAASpd,GAAW,CAClB,IAAInU,EAAQ,CAAE,KAAMqxB,EAAQ,OAAQ3P,CAAM,EAC1C,OAAO,SAASxF,EAAM,CACpB,OAAAA,EAAK,SAAW,IAAIsV,EAASxxB,CAAK,EAClCyxB,IACOvV,CACb,CACG,CAUD,SAASsV,EAASxxB,EAAO,CACvB,KAAK,MAAQA,EACb,KAAK,IAAM,CAAE,KAAMqxB,EAAQ,OAAQ3P,GACnC,KAAK,OAAS7K,EAAQ,MACvB,CAKD2a,EAAS,UAAU,QAAUJ,EAU7B,SAAS7a,EAAMmb,EAAK,CAClB,IAAIC,EAAM,IAAI,MACZ9a,EAAQ,OAAS,IAAMwa,EAAS,IAAM3P,EAAS,KAAOgQ,CAC5D,EAOI,GANAC,EAAI,OAASD,EACbC,EAAI,SAAW9a,EAAQ,OACvB8a,EAAI,KAAON,EACXM,EAAI,OAASjQ,EACbiQ,EAAI,OAASP,EAET,CAAAva,EAAQ,OAGV,MAAM8a,CAET,CAQD,SAASlN,EAAMmN,EAAI,CACjB,IAAInC,EAAImC,EAAG,KAAKR,CAAK,EACrB,GAAK3B,EACL,KAAI8B,EAAM9B,EAAE,CAAC,EACb,OAAA6B,EAAeC,CAAG,EAClBH,EAAQA,EAAM,MAAMG,EAAI,MAAM,EACvB9B,EACR,CAKD,SAASgC,GAAa,CACpBhN,EAAM8L,EAAgB,CACvB,CAQD,SAASsB,EAASC,EAAO,CACvB,IAAI5C,EAEJ,IADA4C,EAAQA,GAAS,GACT5C,EAAIvgB,KACNugB,IAAM,IACR4C,EAAM,KAAK5C,CAAC,EAGhB,OAAO4C,CACR,CAQD,SAASnjB,GAAU,CACjB,IAAIyF,EAAMD,IACV,GAAI,EAAA2c,IAAiBM,EAAM,OAAO,CAAC,GAAKL,IAAYK,EAAM,OAAO,CAAC,GAGlE,SADI3Y,EAAI,EAENuY,IAAgBI,EAAM,OAAO3Y,CAAC,IAC7BsY,IAAYK,EAAM,OAAO3Y,CAAC,GAAKqY,IAAiBM,EAAM,OAAO3Y,EAAI,CAAC,IAEnE,EAAEA,EAIJ,GAFAA,GAAK,EAEDuY,KAAiBI,EAAM,OAAO3Y,EAAI,CAAC,EACrC,OAAOlC,EAAM,wBAAwB,EAGvC,IAAIgb,EAAMH,EAAM,MAAM,EAAG3Y,EAAI,CAAC,EAC9B,OAAAiJ,GAAU,EACV4P,EAAeC,CAAG,EAClBH,EAAQA,EAAM,MAAM3Y,CAAC,EACrBiJ,GAAU,EAEHtN,EAAI,CACT,KAAM6c,GACN,QAASM,CACf,CAAK,EACF,CAQD,SAAS9iB,GAAc,CACrB,IAAI2F,EAAMD,IAGN2C,EAAO2N,EAAM+L,EAAc,EAC/B,GAAK1Z,EAIL,IAHAnI,IAGI,CAAC8V,EAAMgM,EAAW,EAAG,OAAOla,EAAM,sBAAsB,EAG5D,IAAIwb,EAAMtN,EAAMiM,EAAW,EAEvBsB,EAAM5d,EAAI,CACZ,KAAM8c,GACN,SAAUe,GAAKnb,EAAK,CAAC,EAAE,QAAQuZ,GAAeW,EAAY,CAAC,EAC3D,MAAOe,EACHE,GAAKF,EAAI,CAAC,EAAE,QAAQ1B,GAAeW,EAAY,CAAC,EAChDA,EACV,CAAK,EAGD,OAAAvM,EAAMkM,EAAe,EAEdqB,EACR,CAOD,SAASE,GAAe,CACtB,IAAIC,EAAQ,CAAA,EAEZN,EAASM,CAAK,EAId,QADIC,EACIA,EAAO3jB,KACT2jB,IAAS,KACXD,EAAM,KAAKC,CAAI,EACfP,EAASM,CAAK,GAIlB,OAAOA,CACR,CAED,OAAAV,IACOS,EAAY,CACrB,EAQA,SAASD,GAAKV,EAAK,CACjB,OAAOA,EAAMA,EAAI,QAAQX,GAAYI,EAAY,EAAIA,EACvD,CCpQA,IAAIvW,GAAQ2V,GAaZ,SAASiC,GAAcjB,EAAOkB,EAAU,CACtC,IAAIlZ,EAAS,KACb,GAAI,CAACgY,GAAS,OAAOA,GAAU,SAC7B,OAAOhY,EAST,QANI3K,EACAyjB,EAAezX,GAAM2W,CAAK,EAC1BmB,EAAc,OAAOD,GAAa,WAClCE,EACA3yB,EAEK4Y,EAAI,EAAGga,EAAMP,EAAa,OAAQzZ,EAAIga,EAAKha,IAClDhK,EAAcyjB,EAAazZ,CAAC,EAC5B+Z,EAAW/jB,EAAY,SACvB5O,EAAQ4O,EAAY,MAEhB8jB,EACFD,EAASE,EAAU3yB,EAAO4O,CAAW,EAC5B5O,IACTuZ,IAAWA,EAAS,CAAA,GACpBA,EAAOoZ,CAAQ,EAAI3yB,GAIvB,OAAOuZ,CACT,CAEAsZ,GAAc,QAAGL,GACKK,GAAA,QAAA,QAAGL,qCCqEnBpY,GAAM,CAAE,EAAC,eAIT0Y,GAAgB,IAAI,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,IAAI,CAAC,EAMjE,SAASC,GAAgBlyB,EAASwb,EAAM,CAE7C,MAAM+M,EAAW,CAAE,EACnB,IAAI4J,EAAa,GAEb1H,EAEJ,KAAO,EAAE0H,EAAa3W,EAAK,SAAS,QAClCiP,EAAQjP,EAAK,SAAS2W,CAAU,EAE5B1H,EAAM,OAAS,UACjBlC,EAAS,KAAK6J,GAAQpyB,EAASyqB,EAAO0H,EAAY3W,CAAI,CAAC,EAC9CiP,EAAM,OAAS,QAStBjP,EAAK,OAAS,WACd,CAACyW,GAAc,IAAIzW,EAAK,OAAO,GAC/B,CAACuV,GAAWtG,CAAK,IAEjBlC,EAAS,KAAKkC,EAAM,KAAK,EAElBA,EAAM,OAAS,OAAS,CAACzqB,EAAQ,QAAQ,UAElDuoB,EAAS,KAAKkC,EAAM,KAAK,EAI7B,OAAOlC,CACT,CAQA,SAAS6J,GAAQpyB,EAASwb,EAAMnc,EAAO+qB,EAAQ,CAC7C,MAAMjU,EAAUnW,EAAQ,QAClBqyB,EACJlc,EAAQ,mBAAqB,OACzBnD,GACAmD,EAAQ,iBACRmc,EAAetyB,EAAQ,OAGvBoM,EAAOoP,EAAK,QAEZ0N,EAAa,CAAE,EACrB,IAAIqJ,EAASD,EAETR,EAOJ,GALIQ,EAAa,QAAU,QAAUlmB,IAAS,QAC5CmmB,EAASC,GACTxyB,EAAQ,OAASuyB,GAGf/W,EAAK,WACP,IAAKsW,KAAYtW,EAAK,WAChBjC,GAAI,KAAKiC,EAAK,WAAYsW,CAAQ,GACpCW,GAAYvJ,EAAY4I,EAAUtW,EAAK,WAAWsW,CAAQ,EAAG9xB,CAAO,GAKtEoM,IAAS,MAAQA,IAAS,OAC5BpM,EAAQ,YAGV,MAAMuoB,EAAW2J,GAAgBlyB,EAASwb,CAAI,GAE1CpP,IAAS,MAAQA,IAAS,OAC5BpM,EAAQ,YAIVA,EAAQ,OAASsyB,EAIjB,MAAM7e,EAAW+H,EAAK,UAAY,CAChC,MAAO,CAAC,KAAM,KAAM,OAAQ,KAAM,OAAQ,IAAI,EAC9C,IAAK,CAAC,KAAM,KAAM,OAAQ,KAAM,OAAQ,IAAI,CAC7C,EACKkX,EACJvc,EAAQ,YAAcoD,GAAI,KAAKpD,EAAQ,WAAY/J,CAAI,EACnD+J,EAAQ,WAAW/J,CAAI,EACvBA,EACAumB,EAAQ,OAAOD,GAAc,UAAYA,IAAcE,GAAM,SAEnE,GAAI,CAACC,GAAQ,mBAAmBH,CAAS,EACvC,MAAM,IAAI,UACR,wBAAwBtmB,CAAI,qCAC7B,EAqDH,GAlDA8c,EAAW,IAAM7pB,EAEb+M,IAAS,KAAO+J,EAAQ,aAC1B+S,EAAW,OACT,OAAO/S,EAAQ,YAAe,WAC1BA,EAAQ,WACN,OAAO+S,EAAW,MAAQ,EAAE,EAC5B1N,EAAK,SACL,OAAO0N,EAAW,OAAU,SAAWA,EAAW,MAAQ,IAC3D,EACD/S,EAAQ,YAGZ/J,IAAS,KAAOimB,IAClBnJ,EAAW,KAAOmJ,EAChB,OAAOnJ,EAAW,MAAQ,EAAE,EAC5B1N,EAAK,SACL,OAAO0N,EAAW,OAAU,SAAWA,EAAW,MAAQ,IAC3D,GAID,CAACyJ,GACDvmB,IAAS,QACTge,EAAO,OAAS,WAChBA,EAAO,UAAY,QAEnBlB,EAAW,OAAS,IAIpB,CAACyJ,IACAvmB,IAAS,MACRA,IAAS,MACTA,IAAS,MACTA,IAAS,MACTA,IAAS,MACTA,IAAS,QAEX8c,EAAW,MAAQ,OAAO,SAAS9c,EAAK,OAAO,CAAC,EAAG,EAAE,GAGnDA,IAAS,OAAS+J,EAAQ,oBAC5B+S,EAAW,IAAM/S,EAAQ,kBACvB,OAAO+S,EAAW,KAAO,EAAE,EAC3B,OAAOA,EAAW,KAAO,EAAE,EAC3B,OAAOA,EAAW,OAAU,SAAWA,EAAW,MAAQ,IAC3D,GAGC,CAACyJ,GAASvmB,IAAS,MAAQge,EAAO,OAAS,UAAW,CACxD,MAAM0I,EAAQC,GAAgBvX,CAAI,EAClC0N,EAAW,QACT4J,GAASA,EAAM,WAAa,EAAQA,EAAM,WAAW,QAAW,KAClE5J,EAAW,MAAQ8J,GAAuB5I,EAAQ5O,CAAI,EACtD0N,EAAW,QAAUkB,EAAO,UAAY,IACzC,CAED,MAAI,CAACuI,IAAUvmB,IAAS,MAAQA,IAAS,QACvC8c,EAAW,QAAU9c,IAAS,KAC9B8c,EAAW,MAAQlpB,EAAQ,YAGzBoM,IAAS,MAAQA,IAAS,QACxB8c,EAAW,QACRA,EAAW,QAAOA,EAAW,MAAQ,CAAE,GAE5CA,EAAW,MAAM,UAAYA,EAAW,MACxC,OAAOA,EAAW,OAGfyJ,IACHzJ,EAAW,SAAW9c,IAAS,OAI/B,CAACumB,GAASvmB,IAAS,MAAQge,EAAO,OAAS,YAC7ClB,EAAW,SAAmBkB,EAAO,UAAY,SAI/CjU,EAAQ,YACV+S,EAAW,gBAAgB,EAAI+J,GAAgBxf,CAAQ,GAGrD,CAACkf,GAASxc,EAAQ,eACpB+S,EAAW,eAAiB1N,EAAK,UAI/B,CAACmX,GAASxc,EAAQ,sBACpB+S,EAAW,MAAQ8J,GAAuB5I,EAAQ5O,CAAI,EACtD0N,EAAW,aAAe8J,GAAuB5I,CAAM,GAGpDuI,IACHzJ,EAAW,KAAO1N,GAIb+M,EAAS,OAAS,EACrBqK,GAAM,cAAcF,EAAWxJ,EAAYX,CAAQ,EACnDqK,GAAM,cAAcF,EAAWxJ,CAAU,CAC/C,CAMA,SAAS6J,GAAgBvX,EAAM,CAC7B,IAAInc,EAAQ,GAEZ,KAAO,EAAEA,EAAQmc,EAAK,SAAS,QAAQ,CACrC,MAAMiP,EAAQjP,EAAK,SAASnc,CAAK,EAEjC,GAAIorB,EAAM,OAAS,WAAaA,EAAM,UAAY,QAChD,OAAOA,CAEV,CAED,OAAO,IACT,CAOA,SAASuI,GAAuB5I,EAAQ5O,EAAM,CAC5C,IAAInc,EAAQ,GACR6zB,EAAQ,EAEZ,KAAO,EAAE7zB,EAAQ+qB,EAAO,SAAS,QAC3BA,EAAO,SAAS/qB,CAAK,IAAMmc,GAC3B4O,EAAO,SAAS/qB,CAAK,EAAE,OAAS,WAAW6zB,IAGjD,OAAOA,CACT,CAQA,SAAST,GAAYxF,EAAO7W,EAAMjX,EAAO6tB,EAAK,CAC5C,MAAMroB,EAAOwuB,GAAKnG,EAAI,OAAQ5W,CAAI,EAClC,IAAIhX,EAASD,EAITC,GAAW,MAAgCA,IAAWA,IAMtD,MAAM,QAAQA,CAAM,IACtBA,EAASuF,EAAK,eAAiByuB,GAAOh0B,CAAM,EAAIi0B,GAAOj0B,CAAM,GAG3DuF,EAAK,WAAa,SAAW,OAAOvF,GAAW,WACjDA,EAASk0B,GAAWl0B,CAAM,GAGxBuF,EAAK,OAASA,EAAK,SACrBsoB,EACE1T,GAAI,KAAKta,GAAa0F,EAAK,QAAQ,EAC/B1F,GAAY0F,EAAK,QAAQ,EACzBA,EAAK,QACf,EAAQvF,EACKuF,EAAK,YACdsoB,EAAMtoB,EAAK,SAAS,EAAIvF,GAE5B,CAMA,SAASk0B,GAAWn0B,EAAO,CAEzB,MAAMC,EAAS,CAAE,EAEjB,GAAI,CACFsxB,GAAMvxB,EAAOyyB,CAAQ,CACzB,MAAU,CAEP,CAED,OAAOxyB,EAMP,SAASwyB,EAASxlB,EAAMijB,EAAG,CACzB,MAAMR,EAAIziB,EAAK,MAAM,EAAG,CAAC,IAAM,OAAS,MAAMA,EAAK,MAAM,CAAC,CAAC,GAAKA,EAChEhN,EAAOyvB,EAAE,QAAQ,YAAa0E,EAAa,CAAC,EAAIlE,CACjD,CACH,CAMA,SAASkE,GAAc/R,EAAGgS,EAAI,CAC5B,OAAOA,EAAG,YAAa,CACzB,CAMA,SAASP,GAAgBvf,EAAK,CAC5B,MAAO,CACLA,EAAI,MAAM,KACV,IACAA,EAAI,MAAM,OACV,IACAA,EAAI,IAAI,KACR,IACAA,EAAI,IAAI,MACT,EACE,IAAI,MAAM,EACV,KAAK,EAAE,CACZ,CC9ZA,MAAM6F,GAAM,CAAE,EAAC,eACTka,GACJ,oEAGIC,GAAa,CACjB,QAAS,CAAC,GAAI,gBAAiB,GAAI,iCAAiC,EACpE,UAAW,CAAC,GAAI,aAAc,GAAI,gCAAgC,EAClE,WAAY,CAAC,GAAI,sCAAsC,EACvD,mBAAoB,CAAC,GAAI,sCAAsC,EAC/D,WAAY,CAAC,GAAI,sCAAsC,EACvD,OAAQ,CAAC,GAAI,WAAY,GAAI,2BAA2B,EACxD,UAAW,CACT,GAAI,eACJ,GAAI,oDACL,EACD,aAAc,CACZ,GAAI,kBACJ,GAAI,oDACL,EACD,gBAAiB,CACf,GAAI,qBACJ,GAAI,oDACL,EACD,iBAAkB,CAChB,GAAI,sBACJ,GAAI,gDACL,CACH,EAQO,SAASC,GAAcxd,EAAS,CACrC,UAAWmB,KAAOoc,GAChB,GAAIna,GAAI,KAAKma,GAAYpc,CAAG,GAAKiC,GAAI,KAAKpD,EAASmB,CAAG,EAAG,CACvD,MAAMsc,EAAcF,GAAWpc,CAAG,EAClC,QAAQ,KACN,oCACEsc,EAAY,GAAK,SAASA,EAAY,EAAE,gBAAkB,QACpE,MAActc,CAAG,YAAYmc,EAAS,IAAIG,EAAY,EAAE,kBACjD,EACD,OAAOF,GAAWpc,CAAG,CACtB,CAGH,MAAMuC,EAAYR,GAAS,EACxB,IAAI0P,EAAW,EACf,IAAI5S,EAAQ,eAAiB,EAAE,EAC/B,IAAI6X,GAAc,CACjB,GAAG7X,EAAQ,oBACX,mBAAoB,EAC1B,CAAK,EACA,IAAIA,EAAQ,eAAiB,EAAE,EAC/B,IAAIiY,GAAcjY,CAAO,EAEtBgF,EAAO,IAAIjF,GAEb,OAAOC,EAAQ,UAAa,SAC9BgF,EAAK,MAAQhF,EAAQ,SACZA,EAAQ,WAAa,QAAaA,EAAQ,WAAa,MAChE,QAAQ,KACN,0EAA0EA,EAAQ,QAAQ,KAC3F,EAGH,MAAM0d,EAAWha,EAAU,QAAQA,EAAU,MAAMsB,CAAI,EAAGA,CAAI,EAE9D,GAAI0Y,EAAS,OAAS,OACpB,MAAM,IAAI,UAAU,wBAAwB,EAI9C,IAAIz0B,EAASwzB,GAAM,cACjBA,GAAM,SACN,CAAE,EACFV,GAAgB,CAAC,QAAA/b,EAAS,OAAQwO,GAAM,UAAW,CAAC,EAAGkP,CAAQ,CAChE,EAED,OAAI1d,EAAQ,YACV/W,EAASwzB,GAAM,cAAc,MAAO,CAAC,UAAWzc,EAAQ,SAAS,EAAG/W,CAAM,GAGrEA,CACT,CAEAu0B,GAAc,UAAY,CAExB,SAAUG,EAAU,OAEpB,UAAWA,EAAU,OAErB,aAAcA,EAAU,KACxB,gBAAiBA,EAAU,QAAQA,EAAU,MAAM,EACnD,mBAAoBA,EAAU,QAAQA,EAAU,MAAM,EACtD,iBAAkBA,EAAU,KAE5B,cAAeA,EAAU,QACvBA,EAAU,UAAU,CAClBA,EAAU,OACVA,EAAU,KACVA,EAAU,QACRA,EAAU,UAAU,CAClBA,EAAU,KACVA,EAAU,OACVA,EAAU,OACVA,EAAU,KACVA,EAAU,QAGRA,EAAU,GACX,CACX,CAAS,CACF,CACP,CAAK,CACF,EACD,cAAeA,EAAU,QACvBA,EAAU,UAAU,CAClBA,EAAU,OACVA,EAAU,KACVA,EAAU,QACRA,EAAU,UAAU,CAClBA,EAAU,KACVA,EAAU,OACVA,EAAU,OACVA,EAAU,KACVA,EAAU,QAGRA,EAAU,GACX,CACX,CAAS,CACF,CACP,CAAK,CACF,EAED,UAAWA,EAAU,KACrB,aAAcA,EAAU,KACxB,SAAUA,EAAU,KACpB,oBAAqBA,EAAU,KAC/B,iBAAkBA,EAAU,UAAU,CAACA,EAAU,KAAMA,EAAU,IAAI,CAAC,EACtE,WAAYA,EAAU,UAAU,CAACA,EAAU,KAAMA,EAAU,MAAM,CAAC,EAClE,kBAAmBA,EAAU,KAC7B,WAAYA,EAAU,MACxB","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]}